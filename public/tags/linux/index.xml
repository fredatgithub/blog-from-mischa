<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/linux/</link>
    <description>Recent content in Linux on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running iCloud Web as a Desktop Application on Arch Linux with Hyprland</title>
      <link>https://mischavandenburg.com/zet/running-icloud-web-as-a-desktop-application-on-arch-linux-with-hyprland/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/running-icloud-web-as-a-desktop-application-on-arch-linux-with-hyprland/</guid>
      <description>&lt;p&gt;Now that I&amp;rsquo;m daily driving Arch Linux again, I&amp;rsquo;ve been thinking about how to handle my tasks. I use Apple Reminders because the iWatch functionality with Siri is so good. I&amp;rsquo;ve been thinking of setting up a self-hosted solution, but then I would lose the Siri integration.&lt;/p&gt;
&lt;p&gt;In the meantime, I figured I would just try to access Apple Reminders from Linux. Using it from the browser worked surprisingly well.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Now that I&rsquo;m daily driving Arch Linux again, I&rsquo;ve been thinking about how to handle my tasks. I use Apple Reminders because the iWatch functionality with Siri is so good. I&rsquo;ve been thinking of setting up a self-hosted solution, but then I would lose the Siri integration.</p>
<p>In the meantime, I figured I would just try to access Apple Reminders from Linux. Using it from the browser worked surprisingly well.</p>
<p>Created a desktop file here with the name <code>icloud.desktop</code>:</p>
<p><code>/home/mischa/.local/share/applications</code></p>
<p>With these contents:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>Desktop Entry<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Name</span><span class="o">=</span>iCloud
</span></span><span class="line"><span class="cl"><span class="nv">Exec</span><span class="o">=</span>firefox --new-instance --profile /home/mischa/.mozilla/firefox/icloud-profile --kiosk https://icloud.com
</span></span><span class="line"><span class="cl"><span class="nv">Icon</span><span class="o">=</span>firefox
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>Application
</span></span><span class="line"><span class="cl"><span class="nv">Categories</span><span class="o">=</span>Network<span class="p">;</span>WebBrowser<span class="p">;</span>
</span></span></code></pre></div><p>Now I can run <code>wofi</code> and search for iCloud, and I have my iCloud applications running in a clean separate window within a workspace.</p>
<p>Also, I can configure Hyprland to run this application in a specific workspace on startup.</p>
<h2 id="links">Links</h2>
<p>202409060909</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>The Return of Arch Linux</title>
      <link>https://mischavandenburg.com/zet/the-return-of-arch-linux/</link>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/the-return-of-arch-linux/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m planning to do a series on Linux on my YouTube channel. The idea is to cover the fundamentals of Linux, either by teaching them myself or to link to existing resources. When the basics are done, I will take over and we&amp;rsquo;ll build an Arch Linux desktop together.&lt;/p&gt;
&lt;p&gt;I use my MacBook for normal productive work and coding, and I have a Thinkpad T480 which I have for experimentation, and mostly for writing notes and browsing while I&amp;rsquo;m in the living room. It was running Fedora using the Sway spin, and it worked fine.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I&rsquo;m planning to do a series on Linux on my YouTube channel. The idea is to cover the fundamentals of Linux, either by teaching them myself or to link to existing resources. When the basics are done, I will take over and we&rsquo;ll build an Arch Linux desktop together.</p>
<p>I use my MacBook for normal productive work and coding, and I have a Thinkpad T480 which I have for experimentation, and mostly for writing notes and browsing while I&rsquo;m in the living room. It was running Fedora using the Sway spin, and it worked fine.</p>
<p>But Arch Linux has been gnawing at me ever since I started my community. We&rsquo;ve had some lovely discussions about distros and window managers, and I almost always commented that I enjoyed building my Arch Linux system.</p>
<p>Well, I went back to it!</p>
<p>This time I&rsquo;m going even more minimal. I took the challenge of not using NetworkManager, and I figured I would go with systemd-boot right away too.</p>
<p>Some of you might remember the problems that happened with GRUB about 2 years ago. Systemd-boot feels so much more intuitive and straightforward to configure.</p>
<p>So now I have a super clean and minimal system using system-boot and systemd-networkd with iwd.</p>
<p>Getting internet to work was a bit of a challenge but figured it out eventually.</p>
<p>Using systemd-resolved, I currently don&rsquo;t even have a /etc/hosts file on my Arch Linux system. That&rsquo;s a new one for me.</p>
<p>This is the current pstree while ssh&rsquo;d into my Thinkpad from the MacBook.</p>
<p>I&rsquo;m so happy with the current minimal state of it!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>mischa@thinkpad ~<span class="o">]</span>$ pstree
</span></span><span class="line"><span class="cl">systemd─┬─dbus-broker-lau───dbus-broker
</span></span><span class="line"><span class="cl">        ├─iwd
</span></span><span class="line"><span class="cl">        ├─sshd───sshd-session───sshd-session───bash───pstree
</span></span><span class="line"><span class="cl">        ├─systemd───<span class="o">(</span>sd-pam<span class="o">)</span>
</span></span><span class="line"><span class="cl">        ├─systemd-journal
</span></span><span class="line"><span class="cl">        ├─systemd-logind
</span></span><span class="line"><span class="cl">        ├─systemd-network
</span></span><span class="line"><span class="cl">        ├─systemd-resolve
</span></span><span class="line"><span class="cl">        ├─systemd-udevd
</span></span><span class="line"><span class="cl">        └─systemd-userdbd───3*<span class="o">[</span>systemd-userwor<span class="o">]</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Installing packages in Devcontainers with Nix</title>
      <link>https://mischavandenburg.com/zet/installing-packages-in-devcontainers-with-nix/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/installing-packages-in-devcontainers-with-nix/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been obsessed with Devcontainers and Devpods recently, and I&amp;rsquo;m learning a lot about portable dev environments. This is truly the next level of config management and the future of dev environments in my opinion.&lt;/p&gt;
&lt;p&gt;I relied on brew as my package manager, however, I ran into problems when I wanted to run my Linux dev containers on my M2 Silicon Mac. Linux brew is not supported on ARM architecture.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve been obsessed with Devcontainers and Devpods recently, and I&rsquo;m learning a lot about portable dev environments. This is truly the next level of config management and the future of dev environments in my opinion.</p>
<p>I relied on brew as my package manager, however, I ran into problems when I wanted to run my Linux dev containers on my M2 Silicon Mac. Linux brew is not supported on ARM architecture.</p>
<h1 id="use-case">Use case</h1>
<p>I all I need to do is install a list of packages into a linux container. I was using brew because I need to install packages like k9s and flux which are sometimes not available in the standard package repositories.</p>
<p>After some tinkering with Nix I managed to solve my problem.</p>
<h1 id="nixpkgs">Nixpkgs</h1>
<p>My dotfiles contains this setup script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="nb">export</span> <span class="nv">XDG_CONFIG_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>/.config
</span></span><span class="line"><span class="cl">    mkdir -p <span class="s2">&#34;</span><span class="nv">$XDG_CONFIG_HOME</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    mkdir -p <span class="s2">&#34;</span><span class="nv">$XDG_CONFIG_HOME</span><span class="s2">&#34;</span>/nixpkgs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ln -sf <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">/nvim&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_CONFIG_HOME</span><span class="s2">&#34;</span>/nvim
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ln -sf <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">/.bash_profile&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>/.bash_profile
</span></span><span class="line"><span class="cl">    ln -sf <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">/.bashrc&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>/.bashrc
</span></span><span class="line"><span class="cl">    ln -sf <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">/.inputrc&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>/.inputrc
</span></span><span class="line"><span class="cl">    ln -sf <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">/.tmux.conf&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">&#34;</span>/.tmux.conf
</span></span><span class="line"><span class="cl">    ln -sf <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">/config.nix&#34;</span> <span class="s2">&#34;</span><span class="nv">$XDG_CONFIG_HOME</span><span class="s2">&#34;</span>/nixpkgs/config.nix
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># install Nix packages from config.nix</span>
</span></span><span class="line"><span class="cl">    nix-env -iA nixpkgs.myPackages
</span></span></code></pre></div><p>It sets up the nixpkgs directory and the config.nix.</p>
<p>The config.nix contains the packages I want to install:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">packageOverrides</span> <span class="o">=</span> <span class="n">pkgs</span><span class="p">:</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">myPackages</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">buildEnv</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;mischa-tools&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">paths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">neovim</span>
</span></span><span class="line"><span class="cl">        <span class="n">go</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodejs_22</span>
</span></span><span class="line"><span class="cl">        <span class="n">starship</span>
</span></span><span class="line"><span class="cl">        <span class="n">fd</span>
</span></span><span class="line"><span class="cl">        <span class="n">ripgrep</span>
</span></span><span class="line"><span class="cl">        <span class="n">lazygit</span>
</span></span><span class="line"><span class="cl">        <span class="n">kubectl</span>
</span></span><span class="line"><span class="cl">        <span class="n">k9s</span>
</span></span><span class="line"><span class="cl">        <span class="n">fluxcd</span>
</span></span><span class="line"><span class="cl">      <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Finally, the <code>nix-env -iA nixpkgs.myPackages</code> command installs all of the packages into my environment.</p>
<p>I was lucky to find this in the Nix documentation:</p>
<p><a href="https://nixos.org/manual/nixpkgs/stable/#sec-declarative-package-management">https://nixos.org/manual/nixpkgs/stable/#sec-declarative-package-management</a></p>
<p>Had I not found this particular heading, I think I would have been lost in the weeds for a long time. But Nix has definitely piqued my interest and I look forward to learn more about it.</p>
<h2 id="links">Links:</h2>
<p>Devpod dotfiles: <a href="https://github.com/mischavandenburg/dotfiles-devpod">https://github.com/mischavandenburg/dotfiles-devpod</a></p>
<p>202405261105</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Homelab Episode 1</title>
      <link>https://mischavandenburg.com/zet/homelab-episode-1/</link>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/homelab-episode-1/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/X40gNPZ2xP4?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;This is the first video of my homelab series.&lt;/p&gt;</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/X40gNPZ2xP4?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>This is the first video of my homelab series.</p>
<p>I set up the repo for my project and do the initial installation of k3s on an old laptop I had lying around. I had a k8s cluster installed on there with kubeadm which I needed to clean up first.</p>
<h2 id="links">Links:</h2>
<p>202312301912</p>
<p><a href="https://youtu.be/X40gNPZ2xP4">https://youtu.be/X40gNPZ2xP4</a></p>
<p>[[homelab]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>It is good to keep your second brain compatible with Obsidian</title>
      <link>https://mischavandenburg.com/zet/keep-second-brain-obsidian-compatible/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/keep-second-brain-obsidian-compatible/</guid>
      <description>&lt;p&gt;Although I rarely use Obsidian anymore, I still have it open because it is running the obsidian-git plugin in the background and it is constantly backing up my second brain to GitHub.&lt;/p&gt;
&lt;p&gt;I use iCloud to synch my vault across my iOs devices and I always create and edit my files using neovim.&lt;/p&gt;
&lt;p&gt;For my new gig at work I&amp;rsquo;m forced to use a windows laptop which means I cannot use iCloud to synch my vault. Then it is a godsend to be able to install Obsidian and use that to interact with my second brain.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Although I rarely use Obsidian anymore, I still have it open because it is running the obsidian-git plugin in the background and it is constantly backing up my second brain to GitHub.</p>
<p>I use iCloud to synch my vault across my iOs devices and I always create and edit my files using neovim.</p>
<p>For my new gig at work I&rsquo;m forced to use a windows laptop which means I cannot use iCloud to synch my vault. Then it is a godsend to be able to install Obsidian and use that to interact with my second brain.</p>
<p>It is very good to keep it compatible with obsidian so I can use the software for synching and interacting with my second brain on other operating systems conveniently.</p>
<h2 id="links">Links:</h2>
<p>202310052010</p>
<p>[[second-brain]]
[[notetaking]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: How I Write &amp; Publish My Blog Using Neovim &amp; Hugo From The Command Line</title>
      <link>https://mischavandenburg.com/zet/blogging-from-command-line/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/blogging-from-command-line/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/bzkrmkGDQJA?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;I show my workflow to publish my Hugo blog from the command line using neovim and bash&lt;/p&gt;</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bzkrmkGDQJA?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>I show my workflow to publish my Hugo blog from the command line using neovim and bash</p>
<h2 id="links">Links:</h2>
<p>202305091705</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Creating A Command To Change Fontsize in Alacritty</title>
      <link>https://mischavandenburg.com/zet/video-custom-fontsize-command/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-custom-fontsize-command/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/Q8dxoqqMHAg?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h2 id=&#34;links&#34;&gt;Links:&lt;/h2&gt;
&lt;p&gt;202305070805&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/Q8dxoqqMHAg&#34;&gt;https://youtu.be/Q8dxoqqMHAg&lt;/a&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Q8dxoqqMHAg?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<h2 id="links">Links:</h2>
<p>202305070805</p>
<p><a href="https://youtu.be/Q8dxoqqMHAg">https://youtu.be/Q8dxoqqMHAg</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>The Ups And Downs Of A Devops Engineer</title>
      <link>https://mischavandenburg.com/zet/ups-and-downs-of-devops-engineer/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/ups-and-downs-of-devops-engineer/</guid>
      <description>&lt;p&gt;Next winter I&amp;rsquo;ll be entering my third year as a DevOps Engineer. When you first break into this field there is an overwhelming amount of things to learn. Frankly, this will always be the case. But I&amp;rsquo;m reaching a point where I have gained experience with most of the main areas and tooling, and I can start seeing the relations between them and how they compare to one another.&lt;/p&gt;
&lt;p&gt;Just like any other job or activity, there are things that you like and that suit you well, and there are things that you don&amp;rsquo;t like. And now the first phases of overwhelm are confidently behind me, I&amp;rsquo;m starting to learn the things I prefer doing over others.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Next winter I&rsquo;ll be entering my third year as a DevOps Engineer. When you first break into this field there is an overwhelming amount of things to learn. Frankly, this will always be the case. But I&rsquo;m reaching a point where I have gained experience with most of the main areas and tooling, and I can start seeing the relations between them and how they compare to one another.</p>
<p>Just like any other job or activity, there are things that you like and that suit you well, and there are things that you don&rsquo;t like. And now the first phases of overwhelm are confidently behind me, I&rsquo;m starting to learn the things I prefer doing over others.</p>
<p>Being a DevOps Engineer does not mean you get to write code all day. I&rsquo;m currently working in an organization where we&rsquo;re not working fully DevOps yet. Rather than deploying many times in small increments, we are still using patching windows. Managing infrastructure in this way means you&rsquo;ll need to communicate with teams to schedule the patching and submit changes to the approval board. It can involve a lot of emailing and talking back and forth. And sometimes things go wrong and everything needs to be rescheduled again. Although it is valuable experience, and I certainly have the communication skills to handle these kinds of situations, I&rsquo;m learning that I lean more towards the dev side of things.</p>
<p>Today was a fun day at work. I&rsquo;ve been working on a PR for a while whenever I wasn&rsquo;t required to work on tickets. The PR involved refactoring a Bicep template for our Azure Key Vault deployments, which were using parameter files with a lot of repeated code. After getting a lot of good feedback on my code changes, and submitting it for review multiple times, it was finally approved and I could get to work.</p>
<p>I used bash, jq and vim to clean up the parameter files for each workload and submitted PRs. My colleague, who helped me with the PR&rsquo;s, was standing by and ready to approve them as soon as I submitted them. Some pipelines ran into some trouble and required a few more PR&rsquo;s to fix, and there was a bit of pressure because we needed to get the pipelines working before any other changes needed to be deployed the next day.</p>
<p>By working together like this we managed to clean up 2850 lines of code in one day and it was a great feeling to get this job done. I had been working on this for a couple of weeks and it&rsquo;s so satisfying to move that ticket status to &ldquo;done&rdquo;.</p>
<p>I really enjoy the coding! And I really enjoy working with Infrastructure as Code! Somehow it really gives me a lot of pleasure knowing that the code I&rsquo;m writing will be transformed to running infrastructure after it is submitted. I love writing programs in my free time as well, but there is just something magical seeing your parameter file being turned into a functional Kubernetes cluster or Key Vault.</p>
<p>Working as a DevOps Engineer, I&rsquo;m generally having so much fun. I really enjoyed myself when I was learning jq and used scripts to change hundreds of lines of code at a time and submitting them as a PR. And some days, the work is less enjoyable, but it is all part of the job. It all serves to deliver value to the end customer, and if I can have fun most of the time while delivering value, I know I&rsquo;m in the right place.</p>
<p>In any case, there hasn&rsquo;t been a second during these past two years where I regretted my choice of becoming a DevOps Engineer. I love my job, I found my passion in my work, and I&rsquo;m so excited for the future. Cloud computing is never standing still, Kubernetes is starting to become more and more popular, and my skills grow with every day that passes.</p>
<p>I&rsquo;m a happy camper.</p>
<h2 id="links">Links:</h2>
<p>202305042005</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How To Check The Weather From The Command Line</title>
      <link>https://mischavandenburg.com/zet/check-weather-terminal/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/check-weather-terminal/</guid>
      <description>&lt;p&gt;For the past few months I&amp;rsquo;ve been using this neat API to check the weather from the command line. It&amp;rsquo;s very simple to use. Simply run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl wttr.in&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will show the weather based on your location, but you can also give a particular location and format.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl wttr.in/Amsterdam&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links:&lt;/h2&gt;
&lt;p&gt;202304271504&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chubin/wttr.in&#34;&gt;https://github.com/chubin/wttr.in&lt;/a&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>For the past few months I&rsquo;ve been using this neat API to check the weather from the command line. It&rsquo;s very simple to use. Simply run:</p>
<p><code>curl wttr.in</code></p>
<p>This will show the weather based on your location, but you can also give a particular location and format.</p>
<p><code>curl wttr.in/Amsterdam</code></p>
<h2 id="links">Links:</h2>
<p>202304271504</p>
<p><a href="https://github.com/chubin/wttr.in">https://github.com/chubin/wttr.in</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Starting My Homelab</title>
      <link>https://mischavandenburg.com/zet/starting-my-homelab/</link>
      <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/starting-my-homelab/</guid>
      <description>&lt;p&gt;This week I started a project which I&amp;rsquo;ve been putting off for too long. I finally started my homelab. Over the past year I&amp;rsquo;ve been collecting hardware here and there, and I&amp;rsquo;ve had the intention to start up a proper Kubernetes cluster at home. I got inspired by Rob Muhlenstein&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/playlist?list=PLrK9UeDMcQLpjUGg5z9Z6Un-axVx06-2J&#34;&gt;Homelab Init&lt;/a&gt; playlist on YouTube which I&amp;rsquo;m working on.&lt;/p&gt;
&lt;p&gt;There are a few reasons why I haven&amp;rsquo;t started up until now:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This week I started a project which I&rsquo;ve been putting off for too long. I finally started my homelab. Over the past year I&rsquo;ve been collecting hardware here and there, and I&rsquo;ve had the intention to start up a proper Kubernetes cluster at home. I got inspired by Rob Muhlenstein&rsquo;s <a href="https://www.youtube.com/playlist?list=PLrK9UeDMcQLpjUGg5z9Z6Un-axVx06-2J">Homelab Init</a> playlist on YouTube which I&rsquo;m working on.</p>
<p>There are a few reasons why I haven&rsquo;t started up until now:</p>
<ul>
<li>Focused on switching jobs and certifications</li>
<li>Not knowing what to run on the cluster</li>
<li>High electricity costs</li>
</ul>
<p>Now that I found a new job with a great employer, I&rsquo;ve changed my focus towards doing more hands-on learning in my free time by learning Go and diving deeper into Cloud Native technology. Energy prices have come down in the meantime as well.</p>
<p>I&rsquo;ve reached a stage in my Go learning journey where I&rsquo;m actually able to start making small deployable applications, and I want an environment where I can do that without high costs or without fearing to break something. I want to learn more about databases on Kubernetes, and I want to start writing small microservices and API&rsquo;s that are able to query these databases.</p>
<p>My lab is going to be my playground, where I can deploy whatever I want and learn the technologies that interest me at that particular moment.</p>
<h1 id="hardware-parts">Hardware: Parts</h1>
<p>For some reason the Raspberry Pi has become synonymous with homelabs. I get that it&rsquo;s fun to run a cluster on something that is not much larger than a 1kg pack of sugar. But I never really caught on to that whole scene yet. Maybe it&rsquo;s because I&rsquo;m a bit late to the party and the Pi&rsquo;s have been scarce and very expensive lately?</p>
<p>In any case, I&rsquo;ve been thankfully accepting old computers that friends were going to get rid of, and I&rsquo;ve been keeping some of my own old hardware as well. I have enough motherboards and other parts to assemble around 3 nodes, which will probably have around 8GB RAM each, but possibilities to attach storage.</p>
<p>This is also what has been keeping me back for a while I think. There is quite a bit of work that I need to do to get these machines going, and probably I&rsquo;ll have to purchase a couple of other parts. However, I also have some functional hardware.</p>
<h2 id="gaming-desktop">Gaming Desktop</h2>
<p>I have an old gaming desktop with 16GB RAM, an Intel 6700K Skylake, 1070 video card and a couple of TB of storage.</p>
<p>This has been my Arch Linux desktop for the past year, but now that I switched to my new MacBook, I&rsquo;m not using it as much. I want to keep it as it is right now, but I could run a few Virtual Machines on there, and maybe consider turning it into a ProxMox server.</p>
<h2 id="old-laptops">Old Laptops</h2>
<p>I have two old laptops. One Asus with 4GB of RAM and a Thinkpad T430 with 8GB RAM. The Thinkpad is actually surprisingly powerful. As a weekend project I installed Arch on it and I fitted it with a refurbished keyboard, and it is a very pleasant machine to work with. However, now that I have a very powerful laptop that I use as a desktop and portable device, it has become redundant.</p>
<h1 id="old-laptops-as-raspberri-pis">Old Laptops as Raspberri Pi&rsquo;s</h1>
<p>Having these two old laptops lying around, it occurred to me that these machines were basically Raspberri Pi&rsquo;s with a large form factor and a higher power usage. Why would I need to spend hundreds of euros on these smaller computers if I could just use these laptops as a starting point for my lab?</p>
<p>Using laptops has the following advantages:</p>
<ul>
<li>No additional costs</li>
<li>No building needed</li>
<li>Easy to install Linux on them</li>
<li>Built-in screen and keyboard for quick access when SSH does not work out</li>
<li>Built-in batteries to handle short power disruptions (rare but possible)</li>
<li>Can get going very quickly</li>
</ul>
<h1 id="choices-and-goals">Choices and Goals</h1>
<h2 id="kubernetes">Kubernetes</h2>
<p>The first goal is to get a Kubernetes cluster running. I will do bare metal kubeadm installs, and later I want to learn more about Talos. Fortunately I feel very comfortable installing Kubernetes with kubeadm. I did plenty of practice for my CKA, and I recently installed it on free Oracle VM&rsquo;s. I&rsquo;ve experimented a bit with K9S earlier, but I want to learn how to maintain on-prem Kubernetes.</p>
<p>My goals is to learn to maintain production-grade clusters properly.</p>
<h2 id="linux">Linux</h2>
<p>Naturally I&rsquo;ll be using Linux as my base OS. After some consideration I chose to use Ubuntu Server 22. Some notes on that choice:</p>
<ul>
<li>I already have years of Ubuntu Server experience</li>
<li>Good to keep building on what I have</li>
<li>Working with managed Kubernetes on my day job requires me to keep Linux admin skills fresh</li>
<li>Still the <a href="https://www.enterpriseappstoday.com/stats/linux-statistics.html">most popular Linux distro</a></li>
<li>Google uses Ubuntu Server</li>
<li>Well documented and plenty of questions on StackOverflow</li>
</ul>
<h2 id="infrastructure-as-code--gitops">Infrastructure as Code &amp; GitOps</h2>
<p>Initially I&rsquo;ll configure the servers by hand, but I want to have the server configuration as code as Ansible playbooks eventually. However, I&rsquo;ll be using ArgoCD for all of my deployments on Kubernetes itself, so the server configuration is only a very small part of the setup. Just get Kubernetes running and do the rest with ArgoCD.</p>
<p>Perhaps I will expand with larger servers that run multiple VM&rsquo;s. Then it will be very relevant to start provisioning these with Ansible.</p>
<h2 id="networking">Networking</h2>
<p>I want to learn more about networking and use static IP addresses for my servers. I need to figure out how my home network works exactly. Surprisingly, I&rsquo;ve never taken the effort to actually know how the devices on my network get their IP addresses and how they communicate, even though I&rsquo;ve learned plenty about it for my day job and do networking in an enterprise environment daily.</p>
<p>For Kubernetes I&rsquo;ll use Flannel to start out with, but I want to learn more about Cilium, Istio and other service mesh implementations.</p>
<p>Another goal is to host my own DNS server for internal name resolution, probably CoreDNS.</p>
<h2 id="deployment">Deployment</h2>
<p>I want to host my own container registry (Harbor) and use Tekton pipelines to for CI/CD, and I&rsquo;m playing with the thought to host my own GitLab instance as well.</p>
<h1 id="lets-go">Let&rsquo;s Go!</h1>
<p>Another realization was that I don&rsquo;t need to have everything figured out before I begin. The beauty of cluster computing is that you can add to it as you go. I can start with a small cluster of two nodes and build it out as my needs grow. I don&rsquo;t expect to need more than a few GB of RAM in the foreseeable future, so these two laptops will be plenty to get going.</p>
<p><img loading="lazy" src="/cluster-laptops.png" type="" alt=""  /></p>
<h2 id="links">Links:</h2>
<p>2023041213</p>
<p>[[homelab]]</p>
<p>[[homelab-network]]</p>
<p>[[Linux]]</p>
<p>[[homelab-ubuntu-server]]</p>
<p>[[Kubernetes]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Generating Markdown Headings with YYYY-MM-DD Date Format Using Bash</title>
      <link>https://mischavandenburg.com/zet/generate-markdown-headings-date/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/generate-markdown-headings-date/</guid>
      <description>&lt;p&gt;A couple of weeks ago I created a simple bash script to generate a date in format YYY-MM-DD to use with the magic !! wands in vim.&lt;/p&gt;
&lt;p&gt;Just now I wanted to expand this with being able to create a markdown header with this date.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Gendate generates the date in YYY-MM-DD format&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Can be called with arguments h and number to generate a markdown heading&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# For example: &amp;#39;gendate h 3&amp;#39; will generate &amp;#39;### 2023-03-29&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date +&lt;span class=&#34;s2&#34;&gt;&amp;#34;%Y-%m-%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -gt &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# handling wrong arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Usage: gendate h 2 to generate with markdown heading ##&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# format markdown heading if arguments h, n are given&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;seq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# if no arguments given, generate the date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
      <content:encoded><![CDATA[<p>A couple of weeks ago I created a simple bash script to generate a date in format YYY-MM-DD to use with the magic !! wands in vim.</p>
<p>Just now I wanted to expand this with being able to create a markdown header with this date.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Gendate generates the date in YYY-MM-DD format</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Can be called with arguments h and number to generate a markdown heading</span>
</span></span><span class="line"><span class="cl"><span class="c1"># For example: &#39;gendate h 3&#39; will generate &#39;### 2023-03-29&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">header</span><span class="o">=</span><span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">date</span><span class="o">=</span><span class="k">$(</span>date +<span class="s2">&#34;%Y-%m-%d&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="nv">$#</span> -gt <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># handling wrong arguments</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$#</span> -eq <span class="m">1</span> <span class="o">||</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;h&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;Usage: gendate h 2 to generate with markdown heading ##&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># format markdown heading if arguments h, n are given</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$#</span> -eq <span class="m">2</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> <span class="nv">$2</span><span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">            <span class="nv">header</span><span class="o">+=</span><span class="s2">&#34;#&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">done</span>
</span></span><span class="line"><span class="cl">        <span class="nv">header</span><span class="o">+=</span><span class="s2">&#34; &#34;</span><span class="nv">$date</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$header</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># if no arguments given, generate the date</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$date</span><span class="s2">&#34;</span>
</span></span></code></pre></div><h2 id="links">Links:</h2>
<p>202304011104</p>
<p><a href="https://github.com/mischavandenburg/dotfiles/tree/main/scripts">https://github.com/mischavandenburg/dotfiles/tree/main/scripts</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Kubernetes Resource Management for Pods and Containers - CPU and Memory</title>
      <link>https://mischavandenburg.com/zet/kubernetes-resource-management-pods-containers/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/kubernetes-resource-management-pods-containers/</guid>
      <description>&lt;p&gt;Pods have containers, and limits can be set on those containers.&lt;/p&gt;
&lt;h1 id=&#34;requests&#34;&gt;Requests&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;used by the kube-scheduler to determine where the Pod will be placed&lt;/li&gt;
&lt;li&gt;containers can use more than requested resources if it is available on node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a limit is specified, but no request, Kubernetes will use the limit value as the request value.&lt;/p&gt;
&lt;h1 id=&#34;limits&#34;&gt;Limits&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;containers may never use more than the set limit&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Pods have containers, and limits can be set on those containers.</p>
<h1 id="requests">Requests</h1>
<ul>
<li>used by the kube-scheduler to determine where the Pod will be placed</li>
<li>containers can use more than requested resources if it is available on node</li>
</ul>
<p>If a limit is specified, but no request, Kubernetes will use the limit value as the request value.</p>
<h1 id="limits">Limits</h1>
<ul>
<li>
<p>containers may never use more than the set limit</p>
</li>
<li>
<p>enforced by kubelet and container</p>
</li>
<li>
<p>host kernel will kill processes that attempt to allocate more than limit (OOM error)</p>
</li>
<li>
<p>reactively: killed when exceeded</p>
</li>
<li>
<p>enforcement: system prevents container to ever exceed limit</p>
</li>
<li>
<p>If the node runs out of memory and the container exceeds its memory request, the pod will be evicted</p>
</li>
<li>
<p>container runtimes don&rsquo;t terminate Pods or containers for excessive CPU usage</p>
</li>
</ul>
<h1 id="pods">Pods</h1>
<p>The pod resource request and limit is the sum of the resource requests of the containers in the pod.</p>
<h1 id="cpu-units">CPU Units</h1>
<p>Defined as an absolute amount of resource. 1000m = 1 CPU.</p>
<p>This is always the same unit, regardless whether the host has 4 or 48 CPU&rsquo;s.</p>
<p>500m CPU = 0.5 CPU</p>
<h1 id="memory-units">Memory Units</h1>
<p>Can use P, T, G, M etc.</p>
<p>Note that &ldquo;m&rdquo; is not megabyte. 0.8m = 0.8 bytes.</p>
<p>Use mebibytes Mi or megabytes M.</p>
<h1 id="definiton-example">Definiton Example</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">100Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">250m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">200Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">500m</span><span class="w">
</span></span></span></code></pre></div><h1 id="scheduling">Scheduling</h1>
<p>The scheduler ensures that the sum of requests of the pods on the node does not exceed the available resources.</p>
<p>Even if a node has low resource usage, it will not accept pods that have requests which exceed the available resources.</p>
<h1 id="nodes">Nodes</h1>
<p>use <code>k describe node</code> to see the resource status of the node.</p>
<h2 id="links">Links:</h2>
<p>202303281903</p>
<p><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Run Newsboat in Zenmode</title>
      <link>https://mischavandenburg.com/zet/newsboat-in-zenmode/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/newsboat-in-zenmode/</guid>
      <description>&lt;p&gt;To read the news free from distractions and ads I use Newsboat as a reader for RSS feeds.&lt;/p&gt;
&lt;p&gt;However, one thing that annoyed me was that it would span across my entire screen in the terminal. When you read blogs or news pages in the browser, you&amp;rsquo;ll notice that the text is always located in a middle column of the window, so you don&amp;rsquo;t have to move your neck while reading. At least, this is the case with well designed websites that serve text content.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>To read the news free from distractions and ads I use Newsboat as a reader for RSS feeds.</p>
<p>However, one thing that annoyed me was that it would span across my entire screen in the terminal. When you read blogs or news pages in the browser, you&rsquo;ll notice that the text is always located in a middle column of the window, so you don&rsquo;t have to move your neck while reading. At least, this is the case with well designed websites that serve text content.</p>
<p>Vim has a plugin that achieves this and I use it extensively. It is called Zenmode. In Neovim I use a similar plugin called No Neckpain.</p>
<p>To achieve a similar configuration for Newsboat I used tmux. I wrote the following bash script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl"><span class="c1"># nb opens a new pane and runs newsboat in it. I want to read from a centered column in my screen.</span>
</span></span><span class="line"><span class="cl">tmux split-pane -h <span class="se">\;</span> resize-pane -x 130<span class="se">\;</span> send -t <span class="m">2</span> <span class="s2">&#34;newsboat&#34;</span> Enter<span class="se">\;</span> send -t <span class="m">1</span> <span class="s2">&#34;clear&#34;</span> Enter
</span></span></code></pre></div><p>Note that this needs to be run from within an existing tmux window with no split panes.</p>
<p>It splits the current window in to two panes, resizes the new pane to a width of 130 pixels and sends the &ldquo;newsboat&rdquo; command to the new pane, and the &ldquo;clear&rdquo; command to the old (left) pane to keep it nice and clean.</p>
<p>In my <code>~/.newsboat/config</code> file I added the following setting:</p>
<p><code>text-width 72</code></p>
<p>This will limit the text on the right hand side of the screen.</p>
<p>The end result looks like this:</p>
<p><img loading="lazy" src="/newsboat-zen.png" type="" alt="Newsboat Zenmode"  /></p>
<h2 id="links">Links:</h2>
<p>202303260903</p>
<p><a href="https://github.com/folke/zen-mode.nvim">https://github.com/folke/zen-mode.nvim</a></p>
<p><a href="https://github.com/shortcuts/no-neck-pain.nvim">https://github.com/shortcuts/no-neck-pain.nvim</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Had a CLI Shokunin Moment Today</title>
      <link>https://mischavandenburg.com/zet/cli-shokunin-moment/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/cli-shokunin-moment/</guid>
      <description>&lt;p&gt;Today was meal-prepping day and I cut up some vegetables for the coming week. I’m on a strict caloric restriction regimen and need to meticulously track and plan all the food that I consume.&lt;/p&gt;
&lt;p&gt;I cut up three kinds of vegetables and wrote down how many grams of each I cut up so I could divide them by three and add them to my calorie tracking application.&lt;/p&gt;
&lt;p&gt;As I took out my phone to pick up my calculator to divide each number, my inner engineer started complaining about the fact that I had to do three calculations and that it would be much better to loop over an array of these values.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Today was meal-prepping day and I cut up some vegetables for the coming week. I’m on a strict caloric restriction regimen and need to meticulously track and plan all the food that I consume.</p>
<p>I cut up three kinds of vegetables and wrote down how many grams of each I cut up so I could divide them by three and add them to my calorie tracking application.</p>
<p>As I took out my phone to pick up my calculator to divide each number, my inner engineer started complaining about the fact that I had to do three calculations and that it would be much better to loop over an array of these values.</p>
<p>I had my laptop nearby with a terminal open and wrote this instead:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">for</span> i in <span class="m">287</span> <span class="m">252</span> 321<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$i</span><span class="s2"> / 3&#34;</span> <span class="p">|</span> bc<span class="p">;</span> <span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">95</span>
</span></span><span class="line"><span class="cl"><span class="m">84</span>
</span></span><span class="line"><span class="cl"><span class="m">107</span>
</span></span></code></pre></div><p>After turning my passion into my career, I love the fact that I’m starting to think like an engineer in all my other areas of life. I’m also happy to see my progress in command line work. I chose to go the hard way, using bash instead of zsh and doing all my editing in vim and using Linux as much as possible, and it is paying off because I don’t have to think much about these little operations anymore.</p>
<p>Then again, I would be much better off training my brain to become better at doing math without the aid of paper or calculators 🤓</p>
<p>If you&rsquo;re curious about what a shokunin is, check out this article I wrote: <a href="https://mischavandenburg.com/zet/articles/jiro-sushi/">https://mischavandenburg.com/zet/articles/jiro-sushi/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to continuously run a Go file while coding in the terminal</title>
      <link>https://mischavandenburg.com/zet/running-go-on-change/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/running-go-on-change/</guid>
      <description>&lt;p&gt;I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.&lt;/p&gt;
&lt;p&gt;You can use this command in a split window to keep running a Go file. It will update when you save the file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;entr -c bash -c &amp;quot;go run main.go&amp;quot; &amp;lt;&amp;lt;&amp;lt; main.go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.</p>
<p>You can use this command in a split window to keep running a Go file. It will update when you save the file.</p>
<p><code>entr -c bash -c &quot;go run main.go&quot; &lt;&lt;&lt; main.go</code></p>
<p>Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:</p>
<p><code>find src/ | entr -s 'make'</code></p>
<p>Super handy to see the outcome of your code changes in real time.</p>
<p>To run all the files in the directory, use the following:</p>
<p><code>entr -c bash -c &quot;go run . &quot; &lt; &lt;(find .)</code></p>
<p>I picked this up while going through Rob&rsquo;s Beginner Boost of 2022:</p>
<p><a href="https://youtu.be/kwrN3jbv4sE">https://youtu.be/kwrN3jbv4sE</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setting up a Kubernetes cluster on an Ubuntu 20.04 VM with containerd and flannel</title>
      <link>https://mischavandenburg.com/zet/articles/simple-cluster-on-ubuntu-vm/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/simple-cluster-on-ubuntu-vm/</guid>
      <description>&lt;p&gt;You can get a free 24GB ram VM from Oracle. What better place for your own Kubernetes lab that is always available? See &lt;a href=&#34;https://mischavandenburg.com/zet/free-oracle-vm.md&#34;&gt;this article&lt;/a&gt; to create your VM.&lt;/p&gt;
&lt;p&gt;Here are the steps I took to install a single node kubernetes cluster on the Ubuntu VM.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install apt-transport-https curl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install containerd&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>You can get a free 24GB ram VM from Oracle. What better place for your own Kubernetes lab that is always available? See <a href="/zet/free-oracle-vm.md">this article</a> to create your VM.</p>
<p>Here are the steps I took to install a single node kubernetes cluster on the Ubuntu VM.</p>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt install apt-transport-https curl
</span></span></code></pre></div><p>Install containerd</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mkdir -p /etc/apt/keyrings
</span></span><span class="line"><span class="cl">curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install containerd.io
</span></span></code></pre></div><p>Remove the default containerd configuration, because it creates errors when running kubeadm init.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo rm -f /etc/containerd/config.toml
</span></span><span class="line"><span class="cl">sudo systemctl status containerd.service
</span></span></code></pre></div><p>Install Kubernetes</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/kubernetes.list
</span></span><span class="line"><span class="cl">sudo apt install kubeadm kubelet kubectl kubernetes-cni
</span></span></code></pre></div><p>Avoid the error &ldquo;/proc/sys/net/bridge/bridge-nf-call-iptables does not exist&rdquo; on kubeinit (reference <a href="https://github.com/kubernetes/kubeadm/issues/1062)">https://github.com/kubernetes/kubeadm/issues/1062)</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo modprobe br_netfilter
</span></span><span class="line"><span class="cl">sudo <span class="nb">echo</span> <span class="m">1</span> &gt; /proc/sys/net/ipv4/ip_forward
</span></span></code></pre></div><h2 id="start-the-cluster">Start the cluster</h2>
<p>Initialize the Kubernetes cluster for use with Flannel</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo kubeadm init --pod-network-cidr<span class="o">=</span>10.244.0.0/16
</span></span></code></pre></div><p>Copy to config as kubadm command says</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span></code></pre></div><p>Usually you wouldn&rsquo;t run pods on your control-plane node. However, since we are running a lab environment on a single VM, it&rsquo;s ok. To be able to schedule pods on the control-plane node, we need to remove the NoSchedule taint:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl taint node instance-20230205-0909 node-role.kubernetes.io/control-plane:NoSchedule-
</span></span></code></pre></div><h2 id="add-a-container-networking-interface">Add a Container Networking Interface</h2>
<p>Install Flannel to the cluster (reference <a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
</span></span></code></pre></div><h2 id="configure-the-server-firewall">Configure the server firewall</h2>
<p>We use Uncomplicated Firewall. Run these commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo ufw allow <span class="m">22</span>
</span></span><span class="line"><span class="cl">sudo ufw allow 6443/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 2379:2380/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 10250/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 10259/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 10257/tcp
</span></span><span class="line"><span class="cl">sudo ufw <span class="nb">enable</span>
</span></span><span class="line"><span class="cl">sudo ufw status
</span></span></code></pre></div><h2 id="set-up-bashrc">Set up bashrc</h2>
<p>Next, edit your bashrc with <code>vim ~/.bashrc</code> and add these lines:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> &lt;<span class="o">(</span>kubectl completion bash<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">k</span><span class="o">=</span>kubectl
</span></span><span class="line"><span class="cl"><span class="nb">complete</span> -o default -F __start_kubectl k
</span></span></code></pre></div><p>Then run <code>source ~/.bashrc</code></p>
<p>This configures autocompletion for kubectl, and sets up &ldquo;k&rdquo; as an alias for kubectl.</p>
<h2 id="lets-run-a-pod">Let&rsquo;s run a pod!</h2>
<p>To see all pods running on your cluster:</p>
<p><code>k get pods -A</code></p>
<p>Now let&rsquo;s run a simple nginx pod and expose it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">k run nginx --image<span class="o">=</span>nginx
</span></span><span class="line"><span class="cl">k expose pod nginx --port<span class="o">=</span><span class="m">80</span> --type<span class="o">=</span>NodePort
</span></span></code></pre></div><p>To find out which port it&rsquo;s running on, run <code>k get service</code>. In the PORT(S) column, there will be an nginx service exposing port 80 to a random port on the node in the range of 30000-32767.</p>
<p>In my case, it says &ldquo;80:31878/TCP&rdquo;</p>
<p>To see if we can reach the container, run:</p>
<p><code>curl localhost:31878</code></p>
<p>If everything went well, you will get back the HTML of the default index page served by NGINX:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ubuntu@instance-20230205-0909:~$ curl localhost:31878
</span></span><span class="line"><span class="cl">&lt;!DOCTYPE html&gt;
</span></span><span class="line"><span class="cl">&lt;html&gt;
</span></span><span class="line"><span class="cl">&lt;head&gt;
</span></span><span class="line"><span class="cl">&lt;title&gt;Welcome to nginx!&lt;/title&gt;
</span></span><span class="line"><span class="cl">&lt;style&gt;
</span></span><span class="line"><span class="cl">html <span class="o">{</span> color-scheme: light dark<span class="p">;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">body <span class="o">{</span> width: 35em<span class="p">;</span> margin: <span class="m">0</span> auto<span class="p">;</span>
</span></span><span class="line"><span class="cl">font-family: Tahoma, Verdana, Arial, sans-serif<span class="p">;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">&lt;/style&gt;
</span></span><span class="line"><span class="cl">&lt;/head&gt;
</span></span><span class="line"><span class="cl">&lt;body&gt;
</span></span><span class="line"><span class="cl">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;
</span></span><span class="line"><span class="cl">&lt;p&gt;If you see this page, the nginx web server is successfully installed and
</span></span><span class="line"><span class="cl">working. Further configuration is required.&lt;/p&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;p&gt;For online documentation and support please refer to
</span></span><span class="line"><span class="cl">&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;http://nginx.org/&#34;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;
</span></span><span class="line"><span class="cl">Commercial support is available at
</span></span><span class="line"><span class="cl">&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;http://nginx.com/&#34;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;p&gt;&lt;em&gt;Thank you <span class="k">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;
</span></span><span class="line"><span class="cl">&lt;/body&gt;
</span></span><span class="line"><span class="cl">&lt;/html&gt;
</span></span></code></pre></div><p>To reach the pod from the browser, open your port in the security group configured for the subnet of your VM.</p>
<p>Good luck with your new lab environment!</p>
<h2 id="links">Links</h2>
<p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/service/">https://kubernetes.io/docs/concepts/services-networking/service/</a></p>
<p><a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Get a free 4 CPU 24GB Ram VM on from Oracle</title>
      <link>https://mischavandenburg.com/zet/free-oracle-vm/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/free-oracle-vm/</guid>
      <description>&lt;p&gt;A few weeks ago someone gave me a tip. Oracle actually has a really good free tier offering.&lt;/p&gt;
&lt;p&gt;You can host a 4CPU 24GB VM for free!&lt;/p&gt;
&lt;p&gt;This is perfect for a lab environment.&lt;/p&gt;
&lt;p&gt;I spent my evening creating the VM and setting up a kubernetes cluster from scratch.&lt;/p&gt;
&lt;p&gt;Use this video to claim your free vm:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NKc3k7xceT8&#34;&gt;https://www.youtube.com/watch?v=NKc3k7xceT8&lt;/a&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>A few weeks ago someone gave me a tip. Oracle actually has a really good free tier offering.</p>
<p>You can host a 4CPU 24GB VM for free!</p>
<p>This is perfect for a lab environment.</p>
<p>I spent my evening creating the VM and setting up a kubernetes cluster from scratch.</p>
<p>Use this video to claim your free vm:</p>
<p><a href="https://www.youtube.com/watch?v=NKc3k7xceT8">https://www.youtube.com/watch?v=NKc3k7xceT8</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setting up a new LUKS encrypted disk with dm-crypt in Arch Linux</title>
      <link>https://mischavandenburg.com/zet/articles/new-luks-encrypted-disk/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/new-luks-encrypted-disk/</guid>
      <description>&lt;p&gt;Today I added a harddisk I had lying around because I needed some more space. On my Arch Linux system I have all my drives encrypted like a good boy. It can be a bit tricky when you are adding them because you need to configure a few different files and add different UUID&amp;rsquo;s in each of them.&lt;/p&gt;
&lt;p&gt;Here are the steps I follow to add a new disk. Note that this how to assumes that you already have set up your system with dm-crypt.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Today I added a harddisk I had lying around because I needed some more space. On my Arch Linux system I have all my drives encrypted like a good boy. It can be a bit tricky when you are adding them because you need to configure a few different files and add different UUID&rsquo;s in each of them.</p>
<p>Here are the steps I follow to add a new disk. Note that this how to assumes that you already have set up your system with dm-crypt.</p>
<p>List out the disks with lsblk:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)[</span>mischa@arch-beast ~<span class="o">]</span>$ lsblk
</span></span><span class="line"><span class="cl">NAME          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
</span></span><span class="line"><span class="cl">sda             8:0    <span class="m">0</span> 223.6G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sda1          8:1    <span class="m">0</span> 223.6G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─games     254:0    <span class="m">0</span> 223.6G  <span class="m">0</span> crypt /games
</span></span><span class="line"><span class="cl">sdb             8:16   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdb1          8:17   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd  254:2    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd
</span></span><span class="line"><span class="cl">sdc             8:32   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdc1          8:33   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd2 254:3    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd2
</span></span><span class="line"><span class="cl">sdd             8:48   <span class="m">0</span> 465.8G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">├─sdd1          8:49   <span class="m">0</span>   300M  <span class="m">0</span> part  /boot
</span></span><span class="line"><span class="cl">└─sdd2          8:50   <span class="m">0</span> 465.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─root      254:1    <span class="m">0</span> 465.5G  <span class="m">0</span> crypt /
</span></span><span class="line"><span class="cl">sde             8:64   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sde1          8:65   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span></code></pre></div><p>I will be adding /dev/sde to my system. As you see, I already created a partition on it, named <code>sde1</code>. The mountpoint for the disk will be <code>/data-hdd3</code>.</p>
<p>If you still need to add your partition, use <code>sudo gdisk /dev/sde</code> to write a new table and partition.</p>
<h2 id="encryption">encryption</h2>
<p>First I create the mount point I&rsquo;ll use and set the appropriate permisssions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mkdir /data-hdd3
</span></span><span class="line"><span class="cl">sudo chown mischa:mischa /data-hdd3
</span></span></code></pre></div><p>Now we create a LUKS header and an encrypted filesystem on the disk.
Note that I&rsquo;m using the notation convention from the Arch Wiki where the &ldquo;#&rdquo; indicates that the command should be run as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># cryptsetup -y -v luksFormat /dev/sde1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># cryptsetup open /dev/sde1 data-hdd3 </span>
</span></span><span class="line"><span class="cl"><span class="c1"># mkfs.ext4 /dev/mapper/data-hdd3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># mount /dev/mapper/data-hdd3 /data-hdd3</span>
</span></span></code></pre></div><p>Verify that it worked and the new encrypted partition is mounted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arch-beast# lsblk
</span></span><span class="line"><span class="cl">NAME          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
</span></span><span class="line"><span class="cl">sda             8:0    <span class="m">0</span> 223.6G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sda1          8:1    <span class="m">0</span> 223.6G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─games     254:0    <span class="m">0</span> 223.6G  <span class="m">0</span> crypt /games
</span></span><span class="line"><span class="cl">sdb             8:16   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdb1          8:17   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd  254:2    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd
</span></span><span class="line"><span class="cl">sdc             8:32   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdc1          8:33   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd2 254:3    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd2
</span></span><span class="line"><span class="cl">sdd             8:48   <span class="m">0</span> 465.8G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">├─sdd1          8:49   <span class="m">0</span>   300M  <span class="m">0</span> part  /boot
</span></span><span class="line"><span class="cl">└─sdd2          8:50   <span class="m">0</span> 465.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─root      254:1    <span class="m">0</span> 465.5G  <span class="m">0</span> crypt /
</span></span><span class="line"><span class="cl">sde             8:64   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sde1          8:65   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd3 254:4    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd3
</span></span></code></pre></div><h2 id="auto-mounting-at-boot">Auto mounting at boot</h2>
<p>We&rsquo;ll need to add this disk to the kerenel parameters, /etc/crypttab and /etc/fstab. I haven&rsquo;t gotten round to switching to systemd boot yet, but I will do so very soon.</p>
<p>Open tmux and split the pane. In the bottom pane, run <code>lsblk -f</code> to have all the UUIDs listed. Then open the grub configuration file with <code>sudoedit /etc/default/grub</code></p>
<p><img loading="lazy" src="/luks1.png" type="" alt=""  /></p>
<p>You can discern which uuid to add from the listed examples. For my new disk, I needed to add the following:</p>
<p><code>rd.luks.name=3169af6c-a129-448e-b451-d7767866f607 data-hdd3=/dev/mapper/data-hdd3</code></p>
<p>Then run <code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code> to update grub with the new settings. Adjust the path if you use a different path for your boot partition!</p>
<p>Next, we add it to /etc/crypttab</p>
<p><img loading="lazy" src="/luks2.png" type="" alt=""  /></p>
<p>To mount the new encrypted partition at boot, we add it to /etc/fstab.</p>
<p><strong>Note that this time we need to use the UUID of the partition located at /dev/mapper/data-hdd3</strong></p>
<p><img loading="lazy" src="/luks3.png" type="" alt=""  /></p>
<p>Use <code>sudo findmnt --verify</code> to check if there is antyhing wrong with the file.</p>
<p>Now you should be able to reboot and your new encrypted disk should be mounted automatically.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)[</span>mischa@arch-beast ~<span class="o">]</span>$ lsblk
</span></span><span class="line"><span class="cl">NAME          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
</span></span><span class="line"><span class="cl">sda             8:0    <span class="m">0</span> 223.6G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sda1          8:1    <span class="m">0</span> 223.6G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─games     254:1    <span class="m">0</span> 223.6G  <span class="m">0</span> crypt /games
</span></span><span class="line"><span class="cl">sdb             8:16   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdb1          8:17   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd  254:0    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd
</span></span><span class="line"><span class="cl">sdc             8:32   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdc1          8:33   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd2 254:4    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd2
</span></span><span class="line"><span class="cl">sdd             8:48   <span class="m">0</span> 465.8G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">├─sdd1          8:49   <span class="m">0</span>   300M  <span class="m">0</span> part  /boot
</span></span><span class="line"><span class="cl">└─sdd2          8:50   <span class="m">0</span> 465.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─root      254:2    <span class="m">0</span> 465.5G  <span class="m">0</span> crypt /
</span></span><span class="line"><span class="cl">sde             8:64   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sde1          8:65   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd3 254:3    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd3
</span></span></code></pre></div><h1 id="links">links</h1>
<p><a href="https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition">https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition</a></p>
<p><a href="https://wiki.archlinux.org/title/GRUB">https://wiki.archlinux.org/title/GRUB</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setting up automated backups on my Arch Linux system with rsync and bash</title>
      <link>https://mischavandenburg.com/zet/arch-backup-setup-1/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/arch-backup-setup-1/</guid>
      <description>&lt;p&gt;For the past few months I&amp;rsquo;ve been stuyding every hour of free time that I had. Now that I reached my certification goals for now, I finally had some time to do a chore I had been meaning to do for a long time.&lt;/p&gt;
&lt;p&gt;My Arch Linux system is fully encrypted, and I make backups. But I was still doing it a bit haphazardly, usually every Friday.&lt;/p&gt;
&lt;p&gt;I wanted to automate this for a long time now, but I never got round to it. Today I made the first steps, but it is still in progress.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>For the past few months I&rsquo;ve been stuyding every hour of free time that I had. Now that I reached my certification goals for now, I finally had some time to do a chore I had been meaning to do for a long time.</p>
<p>My Arch Linux system is fully encrypted, and I make backups. But I was still doing it a bit haphazardly, usually every Friday.</p>
<p>I wanted to automate this for a long time now, but I never got round to it. Today I made the first steps, but it is still in progress.</p>
<p>Naturally, I could use a tool like Timeshift or something similar to schedule my backups. However, I want to do it myself using rsync because I want to fully understand what I am backing up, when, and where. Rsync is also used in our environment at work, so I assume it is more common in enterprise and production environments.</p>
<h2 id="full-system-backup">full system backup</h2>
<p>Before I was making a full system backup every Friday using this command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo rsync -aAXH --info<span class="o">=</span>stats1,progress2 --exclude<span class="o">={</span><span class="s2">&#34;/dev/*&#34;</span>,<span class="s2">&#34;/proc/*&#34;</span>,<span class="s2">&#34;/sys/*&#34;</span>,<span class="s2">&#34;/tmp/*&#34;</span>,<span class="s2">&#34;/run/*&#34;</span>,<span class="s2">&#34;/mnt/*&#34;</span>,<span class="s2">&#34;/media/*&#34;</span>,<span class="s2">&#34;/lost+found&#34;</span>,<span class="s2">&#34;/home/*/.cache/*&#34;</span>,<span class="s2">&#34;/data-hdd/&#34;</span>,<span class="s2">&#34;/games/&#34;</span>,<span class="s2">&#34;/var/lib/docker/*&#34;</span>,<span class="s2">&#34;/home/mischa/music/*&#34;</span>,<span class="s2">&#34;/swapfile&#34;</span>, <span class="s2">&#34;/data-hdd2/&#34;</span>, <span class="s2">&#34;/data-hdd3/&#34;</span><span class="o">}</span> / /data-hdd/backups/arch-beast/01-01-23
</span></span></code></pre></div><p>This command creates a full backup of my entire root filesystem, and it should be possible to restore my entire system by just reversing the target and destination in the end.</p>
<p>However, as I was coming up with my new strategy, I thought this was overkill.</p>
<h2 id="slimming-down">slimming down</h2>
<p>All I really need to back up is my home directory and it would be nice to have my /etc directory backed up as well.</p>
<p>So I wrote a simple shell script to do this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">BACKUPS_DESTINATION</span><span class="o">=</span><span class="s2">&#34;/data-hdd/backups/arch-beast&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># format:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># rsync -a --delete --quiet /path/to/backup /location/of/backup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># stop the script if an error occurs</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rsync -a --delete --quiet --exclude<span class="o">=</span><span class="s2">&#34;{&#34;</span>/home/*/.cache/*<span class="s2">&#34;}&#34;</span> /home/mischa <span class="nv">$BACKUPS_DESTINATION</span>/home
</span></span><span class="line"><span class="cl">rsync -a --delete --quiet /etc <span class="nv">$BACKUPS_DESTINATION</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Made backups on: </span><span class="k">$(</span>date<span class="k">)</span><span class="s2">&#34;</span> &gt;&gt; /var/log/backup.log
</span></span></code></pre></div><p>-a flag from man page:</p>
<p><em>&ldquo;This  is  equivalent to -rlptgoD.  It is a quick way of saying you want recursion and want to preserve almost everything.&rdquo;</em></p>
<p>&ndash;delete: means files deleted on the source are to be deleted on the backup as well</p>
<h2 id="automation">automation</h2>
<p>I have a few scripts running in cronjobs on my system. I have a goal of putting them all in systemd timers, but I haven&rsquo;t gotten round to it yet. For now, I will just add my backup scripts to my existing cronjobs setup.</p>
<p>To make my backups every day, I added this to my crontab:</p>
<p><code>0 12 * * * /bin/bash /home/mischa/git/lab/bash/backup</code></p>
<p>Every day it will make a backup to the same directory and update the changed files, or delete the files I deleted from my system.</p>
<p>I also wanted to have a weekly backup happening on Monday.</p>
<p>I will make a more elaborate script to make a weekly directory, and rotate it with a new directory every week. But for now, I just chose a quick solution by creating a weekly version of my script and running it every Monday.</p>
<p>The only difference is the path:</p>
<p><code>BACKUPS_DESTINATION=&quot;/data-hdd/backups/arch-beast/weekly&quot;</code></p>
<p>In the crontab:</p>
<p><code>0 10 * * 1 /bin/bash /home/mischa/git/lab/bash/backup-weekly</code></p>
<h2 id="to-do">to do</h2>
<ul>
<li>set up weekly backup in the same script</li>
<li>create error handling and improve logging</li>
<li>set up in systemd timers instead of crontab</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Using parameter expansion as search and replace</title>
      <link>https://mischavandenburg.com/zet/slash-syntax-replace/</link>
      <pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/slash-syntax-replace/</guid>
      <description>&lt;p&gt;&lt;em&gt;Last modified: 2023-01-10&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this evening&amp;rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;!#/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;//:/&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I could not make heads or tails of all these slashes and curly braces, since the output clearly indicated that search and replacement was being performed. I&amp;rsquo;m used to the sed / vim syntax: &lt;code&gt;s/foo/bar&lt;/code&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>Last modified: 2023-01-10</em></p>
<p>In this evening&rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">!#/bin/bash
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="si">${</span><span class="nv">PATH</span><span class="p">//:/</span><span class="se">\\</span><span class="nv">n</span><span class="si">}</span>
</span></span></code></pre></div><p>I could not make heads or tails of all these slashes and curly braces, since the output clearly indicated that search and replacement was being performed. I&rsquo;m used to the sed / vim syntax: <code>s/foo/bar</code></p>
<p>After some research I learned that &lsquo;//&rsquo; is a global search and replace syntax of several text processing programs. It is known as parameter expansion in bash.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">foo</span><span class="o">=</span><span class="s2">&#34;1234567890&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">foo</span><span class="p">//[0-9]/x</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This replaces all the digits in the $foo variable with &lsquo;x&rsquo;, so the output would be xxxxxxxxxx</p>
<p>To do this with sed, you would do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$foo</span><span class="s2">&#34;</span> <span class="p">|</span> sed <span class="s1">&#39;s/[0-9]/x/g&#39;</span>
</span></span></code></pre></div><p>For more info:</p>
<p><code>man bash</code></p>
<p><code>/parameter expansion</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Back to Bas(h)ics: leaving zsh for now</title>
      <link>https://mischavandenburg.com/zet/back-to-bashics/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/back-to-bashics/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve used zsh for nearly two years now. I have a custom setup with autocompletion and a good looking prompt.&lt;/p&gt;
&lt;p&gt;Recently I&amp;rsquo;ve been diving deeper into bash scripting, following tutorials by rwxrob. He emphasizes all the time that it is much better to stick to bash instead of zsh.&lt;/p&gt;
&lt;p&gt;Advantages of using bash:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the default Linux shell&lt;/li&gt;
&lt;li&gt;available on any Linux system&lt;/li&gt;
&lt;li&gt;full documentation available anywhere at all times with &lt;code&gt;man bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;free software&lt;/li&gt;
&lt;li&gt;less dependent on external plugins and configurations&lt;/li&gt;
&lt;li&gt;more portable&lt;/li&gt;
&lt;li&gt;practice by working on the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fact that &lt;a href=&#34;https://mischavandenburg.com/content/zet/bash-cmdline-is-coding.md&#34;&gt;working on the commandline is already coding&lt;/a&gt; convinced me to leave my beloved customized prompt behind (for now) and go back to the basics.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve used zsh for nearly two years now. I have a custom setup with autocompletion and a good looking prompt.</p>
<p>Recently I&rsquo;ve been diving deeper into bash scripting, following tutorials by rwxrob. He emphasizes all the time that it is much better to stick to bash instead of zsh.</p>
<p>Advantages of using bash:</p>
<ul>
<li>the default Linux shell</li>
<li>available on any Linux system</li>
<li>full documentation available anywhere at all times with <code>man bash</code></li>
<li>free software</li>
<li>less dependent on external plugins and configurations</li>
<li>more portable</li>
<li>practice by working on the command line</li>
</ul>
<p>The fact that <a href="/content/zet/bash-cmdline-is-coding.md">working on the commandline is already coding</a> convinced me to leave my beloved customized prompt behind (for now) and go back to the basics.</p>
<p>I want to improve my bash scripting, and working in the bash shell will improve that just by virtue of doing my daily tasks on the command line.</p>
<p>Also I noticed I&rsquo;ve gotten used to zsh&rsquo;s excellent autocompletion and menu navigation. When I log in to servers at work, there is always this little moment of &ldquo;oh, I don&rsquo;t have that here&rdquo;. I want to get better at bash so I&rsquo;m not dependent on these external crutches anymore.</p>
<p>Also, I&rsquo;m going to port my zsh configuration to bash. My current zsh configuration loads a bunch of plugins, and it is more of a hassle to get set up on a new system.</p>
<p>I want to be able to pull my dotfiles repo and do very few steps to configure my environment.</p>
<p>But I&rsquo;m going to miss that good-looking prompt with all the lovely icons!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to deploy to a Linux VM in Azure with Azure Pipelines</title>
      <link>https://mischavandenburg.com/zet/azure-pipelines-deploy-vm/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/azure-pipelines-deploy-vm/</guid>
      <description>&lt;p&gt;To reach a VM from Azure Pipelines, you need to set up an environment.&lt;/p&gt;
&lt;p&gt;Create your Linux VM in Azure.&lt;/p&gt;
&lt;p&gt;In Azure DevOps, click envirnoments, new, and select the Virtual Machine option.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://mischavandenburg.com/env1.png&#34; type=&#34;&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;A command is generated for you. SSH into your VM and run the command.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://mischavandenburg.com/env2.png&#34; type=&#34;&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Now the VM should show up under environments in Azure DevOps.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>To reach a VM from Azure Pipelines, you need to set up an environment.</p>
<p>Create your Linux VM in Azure.</p>
<p>In Azure DevOps, click envirnoments, new, and select the Virtual Machine option.</p>
<p><img loading="lazy" src="/env1.png" type="" alt=""  /></p>
<p>A command is generated for you. SSH into your VM and run the command.</p>
<p><img loading="lazy" src="/env2.png" type="" alt=""  /></p>
<p>Now the VM should show up under environments in Azure DevOps.</p>
<p>Set up a repo with an azure-pipelines.yml with these contents to test. under <code>environment</code>, set the same name as you did in Azure DevOps for your environment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">trigger</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">pool</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">vmImage</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">deployment</span><span class="p">:</span><span class="w"> </span><span class="l">VMDeploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy to VM</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">environment</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">resourceType</span><span class="p">:</span><span class="w"> </span><span class="l">VirtualMachine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nt">runOnce</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">deploy</span><span class="p">:</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">script</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;Hello world&#34;</span><span class="w">
</span></span></span></code></pre></div><p>You can see it when the deploy runs on the VM:</p>
<p><img loading="lazy" src="/env3.png" type="" alt=""  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Deploying a Linux VM to Azure with Terraform</title>
      <link>https://mischavandenburg.com/zet/terraform-linux-vm/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/terraform-linux-vm/</guid>
      <description>&lt;p&gt;For a project I&amp;rsquo;m setting up my environment with Terraform.&lt;/p&gt;
&lt;p&gt;I used &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-terraform&#34;&gt;this tutorial&lt;/a&gt;, but modified the code to make it simpler and easier to understand for beginners. The original uses a random module to generate random names, and generates a new SSH key. Also, this tutorial uses expensive VM tiers and Premium storage, which are not necessary when you are learning.&lt;/p&gt;
&lt;p&gt;I also thought the SSH configuration was overcomplicated. My version just takes an SSH keypair stored at &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>For a project I&rsquo;m setting up my environment with Terraform.</p>
<p>I used <a href="https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-terraform">this tutorial</a>, but modified the code to make it simpler and easier to understand for beginners. The original uses a random module to generate random names, and generates a new SSH key. Also, this tutorial uses expensive VM tiers and Premium storage, which are not necessary when you are learning.</p>
<p>I also thought the SSH configuration was overcomplicated. My version just takes an SSH keypair stored at <code>~/.ssh/id_rsa.pub</code></p>
<p>To run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">terraform</span> <span class="k">init</span>
</span></span><span class="line"><span class="cl"><span class="k">terraform</span> <span class="k">plan</span>
</span></span><span class="line"><span class="cl"><span class="k">terraform</span> <span class="k">apply</span>
</span></span></code></pre></div><p>The scripts prints the public IP of the newly created VM. You should be able to SSH to it:</p>
<p><code>ssh azureuser@the_printed_ip_address</code></p>
<p>You can find the code in <a href="https://github.com/mischavandenburg/lab/tree/main/terraform/azure-simple-linux-vm">my &ldquo;lab&rdquo; repo on GitHub.</a></p>
<p><a href="https://github.com/mischavandenburg/lab/tree/main/terraform/azure-simple-linux-vm">https://github.com/mischavandenburg/lab/tree/main/terraform/azure-simple-linux-vm</a></p>
<p><a href="https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-terraform">https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-terraform</a></p>
<p><a href="https://learn.microsoft.com/en-us/azure/developer/terraform/authenticate-to-azure?source=recommendations&amp;tabs=bash#authenticate-to-azure-via-a-microsoft-account">https://learn.microsoft.com/en-us/azure/developer/terraform/authenticate-to-azure?source=recommendations&amp;tabs=bash#authenticate-to-azure-via-a-microsoft-account</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to follow symbolic links while searching with Telescope in neovim</title>
      <link>https://mischavandenburg.com/zet/neovim-telescope-follow-symlinks/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/neovim-telescope-follow-symlinks/</guid>
      <description>&lt;p&gt;I use the &lt;a href=&#34;https://mischavandenburg.com/zet/articles/obsidian-introduction/&#34;&gt;Obsidian&lt;/a&gt; app, but I mostly write and search my notes with neovim. I added my zet directory from this blog repo into the Obsidian vault as a symbolic link, but I soon discovered that these files were not being searched.&lt;/p&gt;
&lt;p&gt;Telescope.nvim uses ripgrep (rg) to do the live grepping in its search, and ripgrep does not follow symbolic links by default. You need to pass the -L flag to it.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I use the <a href="/zet/articles/obsidian-introduction/">Obsidian</a> app, but I mostly write and search my notes with neovim. I added my zet directory from this blog repo into the Obsidian vault as a symbolic link, but I soon discovered that these files were not being searched.</p>
<p>Telescope.nvim uses ripgrep (rg) to do the live grepping in its search, and ripgrep does not follow symbolic links by default. You need to pass the -L flag to it.</p>
<p>To pass the -L flag, and some other flags, I added the following to my telescope config file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">-- Custom ripgrep configuration:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">telescope</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;telescope&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">telescopeConfig</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;telescope.config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- Clone the default Telescope configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">vimgrep_arguments</span> <span class="o">=</span> <span class="p">{</span> <span class="n">unpack</span><span class="p">(</span><span class="n">telescopeConfig.values</span><span class="p">.</span><span class="n">vimgrep_arguments</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- I want to search in hidden/dot files.</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;--hidden&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">-- I don&#39;t want to search in the `.git` directory.</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;--glob&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;!**/.git/*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- I want to follow symbolic links</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;-L&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">telescope.setup</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">	<span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">-- `hidden = true` is not supported in text grep commands.</span>
</span></span><span class="line"><span class="cl">		<span class="n">vimgrep_arguments</span> <span class="o">=</span> <span class="n">vimgrep_arguments</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="n">pickers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">find_files</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">-- `hidden = true` will still show the inside of `.git/` as it&#39;s not `.gitignore`d.</span>
</span></span><span class="line"><span class="cl">			<span class="n">find_command</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;rg&#34;</span><span class="p">,</span> <span class="s2">&#34;--files&#34;</span><span class="p">,</span> <span class="s2">&#34;--hidden&#34;</span><span class="p">,</span> <span class="s2">&#34;--glob&#34;</span><span class="p">,</span> <span class="s2">&#34;!**/.git/*&#34;</span><span class="p">,</span> <span class="s2">&#34;-L&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>Based on the configuration examples found on the project&rsquo;s GitHub page.</p>
<p><a href="https://github.com/nvim-telescope/telescope.nvim">https://github.com/nvim-telescope/telescope.nvim</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to install the Openstack CLI on Linux</title>
      <link>https://mischavandenburg.com/zet/install-openstack-cli/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/install-openstack-cli/</guid>
      <description>&lt;p&gt;Make sure to have pip installed.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;pip install python-openstackclient&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pip will install a binary called &amp;ldquo;openstack&amp;rdquo; in ~/.local/bin&lt;/p&gt;
&lt;p&gt;If the openstack command is not available in your session, you might need to add it to your PATH:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PATH=&amp;quot;$HOME/.local/bin:$PATH&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add this to your ~/.zshrc or ~/.bashrc to make sure this happens for each shell session.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t forget to source your updated ~/.zshrc if you chose to add it:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Make sure to have pip installed.</p>
<p>Run <code>pip install python-openstackclient</code></p>
<p>Pip will install a binary called &ldquo;openstack&rdquo; in ~/.local/bin</p>
<p>If the openstack command is not available in your session, you might need to add it to your PATH:</p>
<p><code>export PATH=&quot;$HOME/.local/bin:$PATH&quot;</code></p>
<p>Add this to your ~/.zshrc or ~/.bashrc to make sure this happens for each shell session.</p>
<p>Don&rsquo;t forget to source your updated ~/.zshrc if you chose to add it:</p>
<p><code>source ~/.zshrc</code></p>
<p><a href="https://docs.openstack.org/newton/user-guide/common/cli-install-openstack-command-line-clients.html">https://docs.openstack.org/newton/user-guide/common/cli-install-openstack-command-line-clients.html</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Reset a VM Root Password using the Openstack CLI</title>
      <link>https://mischavandenburg.com/zet/openstack-root-password/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/openstack-root-password/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Download the Openstack RC file from the Openstack portal. Click your username in the top right corner to find it.&lt;/li&gt;
&lt;li&gt;Source the RC file to make the environment variables avaialable to your current session: &lt;code&gt;source ~/my_openstack.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find the instance ID of your VM from the portal.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;openstack server set --root-password be3xxxx5-8348-418b-xxxb-c4xxxx575cd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You will be prompted for the new password which will be set on the virtual machine.&lt;/li&gt;
&lt;/ol&gt;</description>
      <content:encoded><![CDATA[<ol>
<li>Download the Openstack RC file from the Openstack portal. Click your username in the top right corner to find it.</li>
<li>Source the RC file to make the environment variables avaialable to your current session: <code>source ~/my_openstack.sh</code></li>
<li>Find the instance ID of your VM from the portal.</li>
<li>Run <code>openstack server set --root-password be3xxxx5-8348-418b-xxxb-c4xxxx575cd</code></li>
<li>You will be prompted for the new password which will be set on the virtual machine.</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to run installed pip packages as binaries</title>
      <link>https://mischavandenburg.com/zet/run-installed-pip-packages/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/run-installed-pip-packages/</guid>
      <description>&lt;p&gt;When you install a pip package which is meant to be run from the command line as a command, you might find that it is not available to you after installation.&lt;/p&gt;
&lt;p&gt;If this happens, it might be that the path is missing from your PATH variable. Therefore, the shell does not source these binaries when initiated, and does not know that these executables exist.&lt;/p&gt;
&lt;p&gt;You can find the location of your binaries by running &lt;code&gt;pip show package_name&lt;/code&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>When you install a pip package which is meant to be run from the command line as a command, you might find that it is not available to you after installation.</p>
<p>If this happens, it might be that the path is missing from your PATH variable. Therefore, the shell does not source these binaries when initiated, and does not know that these executables exist.</p>
<p>You can find the location of your binaries by running <code>pip show package_name</code></p>
<p>Usually the binaries will be located in ~/.local/bin on a UNIX based system.</p>
<p>To add this to your path, run:</p>
<p><code>export PATH=&quot;$HOME/.local/bin:$PATH&quot;</code></p>
<p>Add this to your ~/.zshrc or ~/.bashrc to make sure this happens for each shell session.</p>
<p>Don&rsquo;t forget to source your updated ~/.zshrc if you chose to add it:</p>
<p><code>source ~/.zshrc</code></p>
<p><a href="https://stackoverflow.com/questions/29980798/where-does-pip-install-its-packages">https://stackoverflow.com/questions/29980798/where-does-pip-install-its-packages</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Working on the command line is already coding</title>
      <link>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</guid>
      <description>&lt;p&gt;Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.&lt;/p&gt;
&lt;p&gt;When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.&lt;/p&gt;
&lt;p&gt;I think this is such an interesting point. I&amp;rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line. However, when I was writing bash scripts, I did consider myself to be coding. There is literally no difference. A bash script is just a string of commands that you would enter manually anyway.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.</p>
<p>When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.</p>
<p>I think this is such an interesting point. I&rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line. However, when I was writing bash scripts, I did consider myself to be coding. There is literally no difference. A bash script is just a string of commands that you would enter manually anyway.</p>
<p><a href="https://rwx.gg/">https://rwx.gg/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Fall in love with sed.</title>
      <link>https://mischavandenburg.com/zet/fall-in-love-with-sed/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/fall-in-love-with-sed/</guid>
      <description>&lt;p&gt;Sed, it&amp;rsquo;s so powerful. I remember I struggled with finding practical uses for it when I did my LPIC-1 certification. But now I find myself using it several times a week. It is so powerful to edit multiple files at a time. I use it for work, but also for making changes to my entire second brain in Obsidian with one command.&lt;/p&gt;
&lt;p&gt;Today I needed to update my /articles/ links to /zet/articles/ links because I&amp;rsquo;m restructuring my website. Here is the sed expression that is executed for every markdown file that is found by fd:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Sed, it&rsquo;s so powerful. I remember I struggled with finding practical uses for it when I did my LPIC-1 certification. But now I find myself using it several times a week. It is so powerful to edit multiple files at a time. I use it for work, but also for making changes to my entire second brain in Obsidian with one command.</p>
<p>Today I needed to update my /articles/ links to /zet/articles/ links because I&rsquo;m restructuring my website. Here is the sed expression that is executed for every markdown file that is found by fd:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/\/articles\//\/zet\/articles\//g&#39;</span> <span class="k">$(</span>fd .md<span class="k">)</span>
</span></span></code></pre></div><p>The result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">diff --git a/content/zet/move-to-zet.md b/content/zet/move-to-zet.md
</span></span><span class="line"><span class="cl">index 1e37283..3b817e3 <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/content/zet/move-to-zet.md
</span></span><span class="line"><span class="cl">+++ b/content/zet/move-to-zet.md
</span></span><span class="line"><span class="cl">@@ -6,7 +6,7 @@ tags:
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> ---
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-I<span class="s1">&#39;ve transitioned my note taking system towards a Zettelkasten system. I still use directories for folders and make copious links, but more
</span></span></span><span class="line"><span class="cl"><span class="s1">often than not I put them in the larger generic 00-zettelkasten directory in my [Obsidian](/articles/obsidian-introduction/) vault.
</span></span></span><span class="line"><span class="cl"><span class="s1">+I&#39;</span>ve transitioned my note taking system towards a Zettelkasten system. I still use directories <span class="k">for</span> folders and make copious links, but more
</span></span><span class="line"><span class="cl">often than not I put them in the larger generic 00-zettelkasten directory in my <span class="o">[</span>Obsidian<span class="o">](</span>/zet/articles/obsidian-introduction/<span class="o">)</span> vault.
</span></span></code></pre></div><p>These sites are super useful to help you formulate your expressions:</p>
<p><a href="https://sed.js.org/">https://sed.js.org/</a></p>
<p><a href="https://regex101.com/">https://regex101.com/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How This Blog is Created, Written and Hosted</title>
      <link>https://mischavandenburg.com/zet/articles/how-this-blog-is-created/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/how-this-blog-is-created/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/bzkrmkGDQJA?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;As I alluded to in my &lt;a href=&#34;https://mischavandenburg.com/zet/articles/obsidian-introduction&#34;&gt;article about Obsidian,&lt;/a&gt; I am very fond of editing my text in neovim. Naturally, if you want to edit in neovim, you need to have your text as local files. I keep all of my personal notes in markdown.&lt;/p&gt;</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bzkrmkGDQJA?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>As I alluded to in my <a href="/zet/articles/obsidian-introduction">article about Obsidian,</a> I am very fond of editing my text in neovim. Naturally, if you want to edit in neovim, you need to have your text as local files. I keep all of my personal notes in markdown.</p>
<p>Previously I was using WordPress, but the editing and writing experience became torture which I could not endure any longer. I looked for a different solution that would allow me to edit my files locally instead of in the browser.</p>
<p>I discovered <a href="https://gohugo.io/">Hugo</a> and I fell in love with it immediately.</p>
<p>Hugo is a static site generator based on markdown files. My entire blog is written in markdown files which are stored <a href="https://github.com/mischavandenburg/blog">in a GitHub repo.</a>. I write my blog posts in vim and when I&rsquo;m done I use Hugo to generate the updated website.</p>
<p>The result is what you see in the &ldquo;public&rdquo; directory in the GitHub repo. This public directory is pushed to a different repo which is hooked up to my hosting provider. My hosting provider uses Plesk, and with Plesk I have the option to connect the GitHub repo to the web server with a webhook. When I push to my hosting repo, the contents are gathered by the webserver and served as public web content.</p>
<p>My complete writing and publishing workflow looks like this:</p>
<ol>
<li>Create a new markdown file</li>
<li>Write the note or article</li>
<li>Save the file and run the &ldquo;hugo&rdquo; command to regenerate the website</li>
<li>Run the &ldquo;publish&rdquo; script. This is a custom script I wrote that takes the contents of the &ldquo;public&rdquo; directory to my hosting repo</li>
<li>Push the newly generated website to the hosting repo</li>
<li>And we&rsquo;re live! 🚀 🎉</li>
</ol>
<p>It is such a smooth and convenient process. I can literally have a new note published to the interet within a few minutes, and it is all done from the command line using my favorite tools.</p>
<p><a href="https://github.com/mischavandenburg/blog">Blog GitHub repo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What Are Containers?</title>
      <link>https://mischavandenburg.com/zet/articles/what-are-containers/</link>
      <pubDate>Sun, 01 Jan 2023 16:17:58 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/what-are-containers/</guid>
      <description>&lt;p&gt;When you learn about DevOps, you will come across the concept of a container early on. This is a &amp;ldquo;Mischa Explains&amp;rdquo; article where I attempt to explain a concept in my own words as simply as possible. I use the Feynman technique and pretend to explain it to a 12-year-old.&lt;/p&gt;
&lt;h1 id=&#34;virtualization&#34;&gt;Virtualization&lt;/h1&gt;
&lt;p&gt;To understand containers, we need to understand virtualization. Virtualization is the process of creating &amp;ldquo;fake computers&amp;rdquo; or &amp;ldquo;virtual computers&amp;rdquo; on a physical computer.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>When you learn about DevOps, you will come across the concept of a container early on. This is a &ldquo;Mischa Explains&rdquo; article where I attempt to explain a concept in my own words as simply as possible. I use the Feynman technique and pretend to explain it to a 12-year-old.</p>
<h1 id="virtualization">Virtualization</h1>
<p>To understand containers, we need to understand virtualization. Virtualization is the process of creating &ldquo;fake computers&rdquo; or &ldquo;virtual computers&rdquo; on a physical computer.</p>
<p>On your desk, you have a laptop or a desktop PC. This machine has hardware such as a motherboard, a hard disk, and a video card. To run programs on your computer, it needs an Operating System. Usually, Windows, macOS, or Linux are used.</p>
<p>Let&rsquo;s say you have a computer running Windows, but you want to run a program that can only run on Linux. One solution is to buy another laptop and put it beside your Windows laptop on your desk. So now you have two computers with two different operating systems.</p>
<p>Fortunately, there are other solutions. We can use virtualization to make a Virtual Machine. A virtual machine is created by software to imitate a fully functional running computer inside your current operating system. You can create a virtual machine that runs Linux on your Windows computer. Your Windows computer running the Linux virtual machine is known as the **host.</p>
<p>Now you don&rsquo;t need to buy another computer to run your Linux program. Instead, you can boot up your Linux virtual machine and run your program when needed. If you have a powerful computer, you could run ten or more virtual machines, each of which has its own operating system and custom environment.</p>
<h1 id="containers">Containers</h1>
<p>Every time you create a virtual machine, the virtual machine needs a complete operating system to work. So, first, the software creates a virtual processor, virtual video card, and a virtual network interface. Then, it runs a fully functional operating system on that virtual hardware. This takes up a lot of resources.</p>
<p>Containers are lightweight packages of software. They are designed to do a very specific task, and therefore they only contain the resources they need to do that task. Nothing more.</p>
<p>Containers use the operating system of the physical computer to run. They have a very minimal, lightweight operating system inside them, but it only contains the elements they need to do their specific task. Therefore, containers are very easy to distribute, and you can run them very quickly.</p>
<h1 id="containers-are-like-newspapers">Containers are like newspapers</h1>
<p>Containers are like newspapers. Newspapers have a particular task: providing you with the day&rsquo;s news. You cannot use newspapers to study for your mathematics exam. You use your math book to study for your math exam. If you want to be informed of the day&rsquo;s news, you use a newspaper. This is what I mean by containers having a specific task.</p>
<p>Next, newspapers are printed on a specific kind of paper. When you buy an expensive book, it will have a sturdy and durable cover, and the pages are made of nice thick paper that will last a long time. The pages don&rsquo;t tear very quickly, and when the book gets wet, it can withstand it. This thick cover and high-quality papers are like the operating system of a virtual machine.</p>
<p>Newspapers, on the other hand, are printed on very thin paper. Because they are designed to distribute the news to you effectively, newspapers do not need to be stored forever or do any other tasks. If you used thick, expensive paper for newspapers, they would become costly, and no one would buy them anymore. The paper is optimized to bring the news to you.</p>
<p>In the same way, the container only comes with the components it needs to do its specific task. Therefore, the container is optimized for its purpose. As a result, they can be distributed more quickly and do not take up a lot of resources when running.</p>
<p>There are other benefits to containers, such as improving the ability to autoscale your application, but I will expand on those in a future blog post.</p>
<h1 id="further-study">Further study</h1>
<p>To learn more about containers, you can use the following resources:</p>
<p><a href="https://youtu.be/r6YIlPEC4y4">Containers &amp; Friends from John Savill&rsquo;s DevOps Masterclass</a></p>
<p><a href="https://docs.docker.com/get-started/overview/">Docker Documentation</a></p>
<p><a href="https://youtu.be/3c-iBn73dDE">Docker Tutorial for Beginners</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Book Notes: The Unicorn Project</title>
      <link>https://mischavandenburg.com/zet/articles/unicorn-project/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/unicorn-project/</guid>
      <description>&lt;p&gt;
  &lt;img loading=&#34;lazy&#34; src=&#34;https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/91UM5i4nirL.jpg&#34; alt=&#34;Unicorn Project&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;This book is the sequel to &lt;a href=&#34;https://mischavandenburg.com/zet/articles/phoenix-project&#34;&gt;the Phoenix project&lt;/a&gt;. Both books are set at Parts Unlimited, a fictitious company that supplies car parts to DIY mechanics and repair shops. Phoenix is a new system that Parts Unlimited has worked on for multiple years. It is supposed to handle order processing and communication between manufacturing, stores, and clients. Phoenix will also play a role in sales and marketing. The company has been gathering customer data for years, but it cannot use any of this data yet. Phoenix will enable it to generate targeted marketing campaigns from the data when it&amp;rsquo;s finished.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>
  <img loading="lazy" src="https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/91UM5i4nirL.jpg" alt="Unicorn Project"  /></p>
<p>This book is the sequel to <a href="/zet/articles/phoenix-project">the Phoenix project</a>. Both books are set at Parts Unlimited, a fictitious company that supplies car parts to DIY mechanics and repair shops. Phoenix is a new system that Parts Unlimited has worked on for multiple years. It is supposed to handle order processing and communication between manufacturing, stores, and clients. Phoenix will also play a role in sales and marketing. The company has been gathering customer data for years, but it cannot use any of this data yet. Phoenix will enable it to generate targeted marketing campaigns from the data when it&rsquo;s finished.</p>
<p>But as we saw in the previous book, it is far from finished, and things go wrong all the time. The company is not doing well, the stock prices are falling, and they need an edge over the competition. Phoenix will be their edge, but they&rsquo;ve been working on it for years. Eventually, management decided that Phoenix needed to be deployed in two weeks. But it is far from ready.</p>
<p>The main character in the Unicorn project is Maxine, a senior developer who temporarily transferred to a different department. She had to work on the Phoenix project against her will because of an unfortunate situation that needed a scapegoat. However, Maxine decides to make the best out of it, and she&rsquo;d like to begin with one thing: to get a Phoenix build going on her laptop.</p>
<p>Very quickly, she finds it impossible to run a full build of the Phoenix project due to missing files and other elements. She is appalled and makes it her mission to get the build going, but she meets another hurdle every step of the way. Missing credentials. Missing binaries and libraries. And for each of these hurdles, she must submit a ticket with a different department. Very soon, she has over 20 tickets running with long waiting times. Just to get a build going on her machine so she can work! Dozens of developers were hired to work on the Phoenix project. But when she asks them if they&rsquo;ve managed to get a build going yet, Maxine is horrified to discover that they&rsquo;ve tried for several months but haven&rsquo;t made any progress. Maxine has made more progress in a week.</p>
<blockquote>
<hr>
<p>&ldquo;Everyone around here thinks features are important because they can see them in their app, on the web page, or in the API. But no one seems to realize how important the build process is. Developers cannot be productive without a great build, integration, and test process.&rdquo;</p>
<ul>
<li>Unicorn Project</li>
</ul>
<hr>
</blockquote>
<p>After a few weeks, Maxine receives an invitation to have a drink with a group of people who are very interested in her. When she arrives at the bar, she meets the Rebellion: a group of developers, managers, and people from Operations, who are tired of the old organizational structure and want to make real changes. They think out of the box and experiment with new technologies, even though they are not authorized to do so.</p>
<p>With the Rebellion, Maxine significantly improves the build and deployment process. They recognized that Phoenix actually never was being built in its entirety. Developers were always working on parts of the application. However, after a lot of struggle, they create a build process that enables each developer to become operational on his first day.</p>
<p>This is the first step of a long series of exciting events that lead to Phoenix becoming a success. By the end of the book, they have a completely new development and testing process, and they can deploy changes to production without needing to take the entire application down. This allows them to create targeted marketing campaigns and respond to changes in the market. The first campaign was a huge success and generated the highest sales ever.</p>
<p>Maxine&rsquo;s struggle with the build process was an eye-opening experience for me. It gave me a very practical example of the need for DevOps principles to enable delivering value to customers. It is also something I recognize in my current organization. For example, projects can get stuck on a firewall change that needs to be approved by an external party. By implementing DevOps principles and arranging teams according to the &ldquo;you build it, you run it&rdquo; principle, teams can be responsible for the entire process from idea to production and therefore have a very short release cycle for their application.</p>
<p>I thoroughly enjoyed the first part of the book. However, the second part was less engaging to me. It became long-winded and felt like butter spread over too much bread. The author demonstrates a high level of technical experience and knowledge through his descriptions of processes, deployments, and fictional applications. Although I understand the intention of making Parts Unlimited a believable company, I think it could have been accomplished with much less detail and words.</p>
<p>The second part has more corporate drama, such as temporarily suspended managers without any clear reason. The focus shifts from a development and operations perspective to a managerial perspective. Maybe I will reread the book in a few years and this part will make a lot more sense to me then. The same happened when I reread the Phoenix project. I could not understand some aspects of the book, which became much clearer to me when I revisited it after gaining experience in the field.</p>
<p>I highly recommend this book to anyone working as a developer, DevOps Engineer, or in operations, especially if you are starting your career. The book gave me a lot of insights into &ldquo;the old way of working&rdquo; and a better understanding of the need for DevOps principles in the modern IT landscape. However, make sure to read the Phoenix project first.</p>
<h2 id="the-unicorn-project-a-novel-about-developers-digital-disruption-and-thriving-in-the-age-of-data-by-gene-kim">The Unicorn Project: A Novel about Developers, Digital Disruption, and Thriving in the Age of Data by Gene Kim</h2>
]]></content:encoded>
    </item>
    
    <item>
      <title>How and Why I Started Using Vim</title>
      <link>https://mischavandenburg.com/zet/articles/how-started-vim/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/how-started-vim/</guid>
      <description>&lt;p&gt;If you are just starting your Linux journey, you might have noticed that a few camps exist in the Linux world. Just like in any other area of life, it seems that groups of human beings enjoy dividing themselves instead of living in harmony. There are camps centered around Linux distributions (I use Arch, btw) but also around text editors.&lt;/p&gt;
&lt;h2 id=&#34;the-beginning&#34;&gt;The Beginning&lt;/h2&gt;
&lt;p&gt;The reason why I started to use vim is rather practical. When I was studying to become a Cloud Engineer, I had access to subscriptions on AWS and Azure to experiment with virtual machines. This was a perfect place to learn to work with Ansible. Many of the labs projects I did involved setting up a few virtual machines, and I destroyed many VMs when I made some big mistakes in the configuration.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If you are just starting your Linux journey, you might have noticed that a few camps exist in the Linux world. Just like in any other area of life, it seems that groups of human beings enjoy dividing themselves instead of living in harmony. There are camps centered around Linux distributions (I use Arch, btw) but also around text editors.</p>
<h2 id="the-beginning">The Beginning</h2>
<p>The reason why I started to use vim is rather practical. When I was studying to become a Cloud Engineer, I had access to subscriptions on AWS and Azure to experiment with virtual machines. This was a perfect place to learn to work with Ansible. Many of the labs projects I did involved setting up a few virtual machines, and I destroyed many VMs when I made some big mistakes in the configuration.</p>
<p>I was using Visual Studio Code at the time on my local machine, but I had to connect to a new virtual machine multiple times a day. It became very tiresome to set everything up with VSCode every time, or pulling the files to my local machine and copying them over again. So I just ssh&rsquo;ed into the machines to edit the text files with the included editor, which happened to be vim.</p>
<h2 id="obsession-in-its-infancy">Obsession in its Infancy</h2>
<p>When you first use vim, it is a rather disorienting experience. But in every tutorial, I was told it would be difficult in the beginning but much faster and more effective in the end. I found this very appealing because I like to do things the hard way and challenge myself.</p>
<p>I discovered that there were people out there who did all of their text editing and coding in vim. I met programmers who refuse to use anything else and people who write entire books in vim. So there had to be something to it.</p>
<p>It also fitted very well with my intention of working on the command line as much as possible and moving away from GUI applications whenever possible. I like to move in this direction because I love the idea of controlling your entire workflow with your keyboard instead of using your mouse, and vim fits perfectly into this picture.</p>
<h2 id="what-i-like-after-nine-months">What I like after Nine Months</h2>
<p>At this point, I&rsquo;ve been using vim as my primary text editor for about nine months. In my current job, I work a lot with yaml files stored in private git repositories.</p>
<p>I only work with these files from the command line, and I don&rsquo;t have any other code editor installed. I use ripgrep and fzf (fuzzy file finder) to search through the files, and I use neovim to edit them. When I need to search for files from within vim, I use the awesome Telescope plugin.</p>
<p>In these months, I&rsquo;ve picked up a few tricks, and I am starting to see the power of vim. The best thing I like about it is that I don&rsquo;t have to leave my terminal window to do the tasks I need to do. Instead, I can search through the files I need to work with, open them, make adjustments, and commit them to the repository. Then I enter the command to run the ansible playbook, and it all happens in the same window, and I don&rsquo;t have to lift my fingers from the keyboard.</p>
<h4 id="keyboard-shortcuts">Keyboard Shortcuts</h4>
<p>Now that I am gaining more experience with vim, I&rsquo;m picking up more advanced usages that significantly improve my workflow. For example, &ldquo;da(&rdquo; meaning &ldquo;delete around parentheses&rdquo; to quickly delete the text between two parentheses. Or &ldquo;da&lt;&rdquo; to very quickly delete HTML tags. Another great feature is the visual block mode, where I can add comment tags to many lines simultaneously, for example.</p>
<h4 id="searching-and-navigation">Searching and Navigation</h4>
<p>Navigating large text files has become incredibly quick since I started using vim. Of course, it takes some getting used to, but it is a lovely experience to open a file, press / to search and enter the keyword and immediately arrive at the point I need to be—no scrolling with the mouse and no need to lift my hands from the keyboard.</p>
<p>I also love the ability to jump from sentence to sentence using ) or paragraphs using }.</p>
<h4 id="multiple-files">Multiple Files</h4>
<p>It takes a little while to get used to, but when you get into it, it is effortless to open up two files at a time if you need information from both. Often I need data from 4 or more files, and opening them quickly with keyboard commands has significantly improved my workflow speed.</p>
<h4 id="customization">Customization</h4>
<p>One of the things I enjoy most about vim is the ability to customize it exactly to my needs. I&rsquo;m completely in charge of the plugins which are loaded into vim and which colors it uses, and this appeals a lot to me. However, it can be rather overwhelming in the beginning. To be honest, it is still overwhelming after ten months. It can be tough to get an idea of where to start, which plugins you need, and which settings you need to change.</p>
<p>I just started with the base install of vim and started from there. Every time I required a particular functionality, I searched around to see if a plugin was available. Very often, someone out there had the same problem as you and created a plugin for it. For example, I recently installed a plugin for using emojis in vim 😄</p>
<h2 id="how-to-get-started">How to Get Started</h2>
<p>The short answer is to simply start using vim for all of your text editing, whether it be coding or writing for pleasure. It is a cliche to say, but it will be hard in the beginning, but I promise you it will pay off in the end.</p>
<p>The second thing I&rsquo;d recommend is to run vimtutor on a Linux machine. Do this once a day for a couple of weeks, and you&rsquo;ll know how to edit text files on any Linux system for the rest of your life, which is a precious skill.</p>
<p>Finally, don&rsquo;t spend too much time reading about all the available plugins. Your needs will become apparent to you as you start to use vim for all of your tasks, and you can search for plugins to address those needs. This way, you start with a minimal editor, which you&rsquo;ll build according to your needs.</p>
<h1 id="good-luck">Good Luck!</h1>
]]></content:encoded>
    </item>
    
    <item>
      <title>Building my Own OS: Linux as a Creative Activity</title>
      <link>https://mischavandenburg.com/zet/articles/linux-creativity/</link>
      <pubDate>Sat, 10 Sep 2022 12:22:28 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/linux-creativity/</guid>
      <description>&lt;p&gt;&lt;em&gt;NOTE: In this article, I use a rather broad definition of “Operating System.” I do not intend to appear as if I wrote and compiled my own Linux kernel, nor do I understand the inner workings of the kernel written in C. Instead, with “building my OS from scratch,” I intend to convey that I used a minimal Linux distribution as a starting point and started building from there.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;
&lt;p&gt;I started using GNU/Linux as a daily driver about six months ago, and I have not regretted the decision ever since. There has not been a single use case where I needed to use Windows for anything at all.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>NOTE: In this article, I use a rather broad definition of “Operating System.” I do not intend to appear as if I wrote and compiled my own Linux kernel, nor do I understand the inner workings of the kernel written in C. Instead, with “building my OS from scratch,” I intend to convey that I used a minimal Linux distribution as a starting point and started building from there.</em></p>
<h2 id="introduction">introduction</h2>
<p>I started using GNU/Linux as a daily driver about six months ago, and I have not regretted the decision ever since. There has not been a single use case where I needed to use Windows for anything at all.</p>
<p>As I was getting more used to daily driving Linux, I noticed how much I enjoyed the ability to customize my operating system and workflow. Finally, after spending a weekend going down the customization rabbit hole, I had a good-looking terminal and customized neovim to perform as I needed it.</p>
<p>Not much later, I came across Arch Linux and the idea of building your own operating system from the ground up. I was instantly intrigued and knew I wanted to do the same. A few months have passed since I first came across Arch Linux, and now I am writing this blog post in neovim on my custom OS that I created from scratch. The font, the spacing, the colors, everything is exactly how I like it, and I love using it.</p>
<p>When you first install Arch Linux, all you get is a black screen with a blinking cursor. However, the experience of creating a fully functional graphical environment from “nothing” has been extremely satisfying, and I learned so much about GNU/Linux in the process. I also realized that this could be seen as a creative activity, like a painter creating his masterpiece from a blank canvas or a sculptor carefully chipping away at a block of marble.</p>
<h2 id="not-just-graphics">not just graphics</h2>
<p>When I say customization, I am not just referring to the visual aspects of the operating system. The things going on “under the hood” must also be carefully configured when you use a minimal distro such as Arch Linux.</p>
<p>Arch Linux comes with very few packages preinstalled, and every time you wish to add something to your system, you need to install it and enable the service in systemd. For example, after I did the installation and created my user account, I needed to run a command with root privileges. To my great surprise, even the “sudo” command was unavailable and needed to be installed.</p>
<p>This is the aspect I learned most from. Whenever I desired a certain functionality from my operating system, I needed to install and enable it. This has given me a much better understanding of the processes and daemons running on my system. It has also given me a greater appreciation of all the elements needed to provide a working environment.</p>
<h2 id="graphic-violence">graphic violence</h2>
<p>When you create an Arch Linux installation USB and boot it up, you are greeted with a command line and nothing else.</p>
<p><img loading="lazy" src="/creative1.png" type="" alt=""  /></p>
<p>When you install something more beginner-friendly, such as Ubuntu or Manjaro KDE, your installation will include a graphical desktop environment. But on Arch Linux, you must install and configure this yourself. Furthermore, to be able to render a graphical environment, you will also need to install and configure a display server such as Xorg.</p>
<p>When I started on my journey, I intended to create something that used minimal resources with a minimal look. Having used GNOME on Manjaro for a few months, I was very satisfied, but I wanted to try a tiling window manager to shave down even more resource usage. After some research, I ended up with the Awesome Window Manager. Here are some screenshots of the final result:</p>
<p><img loading="lazy" src="/creative2.png" type="" alt=""  /></p>
<p>This is what my desktop looks like when I boot up.</p>
<p><img loading="lazy" src="/creative3.png" type="" alt=""  />
Here I’m editing my window manager configuration file, while I have a browser open and keep an eye on my system resources</p>
<p><img loading="lazy" src="/creative4.png" type="" alt=""  /></p>
<p>my music listening setup, using mpd + ncmpcpp, cava and sptlrx. the lyrics are shown in real time as the music is played.</p>
<h2 id="creativity">creativity</h2>
<p><a href="https://dictionary.cambridge.org/dictionary/english">The Cambridge Dictionary</a> defines creativity as “the ability to produce original and unusual ideas, or <strong>to make something new or imaginative</strong>.”</p>
<p>When you embark on a journey, such as creating your operating system, you will probably start with a particular intention or a goal that you will work towards. With this goal in mind, you can start searching for the tools and color schemes you need to create the system that you have in mind. The result is a unique combination of tools, colors, fonts, and programs specifically tailored to your needs and wants and chosen by you.</p>
<p>Is this any different from a painter starting with a blank canvas or a musician starting with a fragment of a melody, ending up with a complete symphony? Entering commands into a computer terminal might not strike everybody as a creative activity. Still, I have found that it is a very effective and satisfying way of expressing myself and creating something I love to use daily. As an IT professional, I spend most of my time behind my computer. Doesn’t it make sense to put effort into building something customized to your needs?</p>
<h4 id="resources">resources</h4>
<p>If you want to start building your own OS, I recommend these resources:</p>
<p><a href="https://archlinux.org/">Arch Linux</a></p>
<p><a href="https://wiki.archlinux.org/">Arch Wiki</a></p>
<p><a href="https://www.reddit.com/r/unixporn/">r/unixporn – a subreddit about customization</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Upgrade Java and Jenkins on Ubuntu 18.04</title>
      <link>https://mischavandenburg.com/how-to-upgrade-java-and-jenkins-on-ubuntu-18-04/</link>
      <pubDate>Tue, 19 Jul 2022 18:01:26 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/how-to-upgrade-java-and-jenkins-on-ubuntu-18-04/</guid>
      <description>&lt;p&gt;Last week I upgraded Jenkins to the latest version on the server infrastructure at work. Starting with the Jenkins 2.357 release, Java 11 or Java 17 &lt;a href=&#34;https://www.jenkins.io/blog/2022/06/28/require-java-11/&#34;&gt;will be required to run Jenkins&lt;/a&gt;. Also, the upcoming LTS release will require Java 11.&lt;/p&gt;
&lt;p&gt;This means that I also needed to update Java on our Jenkins servers. Here are the steps that I did to perform the Jenkins and Java upgrade.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Last week I upgraded Jenkins to the latest version on the server infrastructure at work. Starting with the Jenkins 2.357 release, Java 11 or Java 17 <a href="https://www.jenkins.io/blog/2022/06/28/require-java-11/">will be required to run Jenkins</a>. Also, the upcoming LTS release will require Java 11.</p>
<p>This means that I also needed to update Java on our Jenkins servers. Here are the steps that I did to perform the Jenkins and Java upgrade.</p>
<p>SSH into the server and stop the service. Then get the latest upgrades for your server, which is good practice:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">service jenkins stop
</span></span><span class="line"><span class="cl">apt-get update
</span></span><span class="line"><span class="cl">apt-get upgrade
</span></span></code></pre></div><p>Depending on your setup, the apt-get upgrade command might upgrade Jenkins to the latest version that does not require Java 11+. In my case, that was 3.346.</p>
<p><strong>When you get a question about updating your current config file, take the default option. This option keeps your current configuration.</strong></p>
<p>However, if your Jenkins is installed from a binary or another source, you might need to upgrade Jenkins to 3.346 using the Jenkins.war file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /usr/share/jenkins
</span></span><span class="line"><span class="cl">mv jenkins.war jenkins.war.old
</span></span><span class="line"><span class="cl">wget https://updates.jenkins-ci.org/latest/jenkins.war
</span></span><span class="line"><span class="cl">service jenkins start
</span></span></code></pre></div><p>When you start Jenkins, it will be updated to the latest version that does not require Java 11 or higher. You will notice that there will be a new folder called migrate in /usr/share/jenkins , and the jenkins.war is now located in /usr/share/java</p>
<p>This is where I got confused because it did not patch to the latest version, only up to 3.346 and the jenkins.war file was no longer being updated from the /usr/share/jenkins folder.</p>
<p>The reason is that this update moves the .war file to the /usr/share/java directory.</p>
<h1 id="java">java</h1>
<p>To get Jenkins to the latest version, we need to install or update Java and check if it has worked:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt-get install default-jre
</span></span><span class="line"><span class="cl">java -version
</span></span></code></pre></div><p>Now that you have updated the java version, you are ready to update Jenkins to the latest version.</p>
<p>Notice that we use the /usr/share/java folder now, instead of /usr/share/jenkins</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">service jenkins stop
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/share/java
</span></span><span class="line"><span class="cl">mv jenkins.war jenkins.war.old
</span></span><span class="line"><span class="cl">wget https://updates.jenkins-ci.org/latest/jenkins.war
</span></span><span class="line"><span class="cl">service jenkins start
</span></span></code></pre></div><h1 id="nodes">nodes</h1>
<p>When I accessed the Jenkins GUI, everything seemed fine, and my version was up to 3.358.</p>
<p>However, I noticed that the build nodes were all offline. When inspecting the logs, I saw the following error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">java.io.EOFException
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream<span class="nv">$PeekInputStream</span>.readFully<span class="o">(</span>ObjectInputStream.java:2905<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream<span class="nv">$BlockDataInputStream</span>.readShort<span class="o">(</span>ObjectInputStream.java:3400<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream.readStreamHeader<span class="o">(</span>ObjectInputStream.java:936<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream.&lt;init&gt;<span class="o">(</span>ObjectInputStream.java:379<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.ObjectInputStreamEx.&lt;init&gt;<span class="o">(</span>ObjectInputStreamEx.java:49<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.Command.readFrom<span class="o">(</span>Command.java:142<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.Command.readFrom<span class="o">(</span>Command.java:128<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.AbstractSynchronousByteArrayCommandTransport.read<span class="o">(</span>AbstractSynchronousByteArrayCommandTransport.java:35<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.SynchronousCommandTransport<span class="nv">$ReaderThread</span>.run<span class="o">(</span>SynchronousCommandTransport.java:61<span class="o">)</span>
</span></span><span class="line"><span class="cl">Caused: java.io.IOException: Unexpected termination of the channel
</span></span><span class="line"><span class="cl">	at hudson.remoting.SynchronousCommandTransport<span class="nv">$ReaderThread</span>.run<span class="o">(</span>SynchronousCommandTransport.java:75<span class="o">)</span>
</span></span></code></pre></div><p>Observing that the error had something to do with Java, I ssh’d into the build nodes and updated Java there as well with the same command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt-get install default-jre
</span></span></code></pre></div><p>After updating Java on the build node, head back to the GUI on the master node and restart the build node.</p>
<p>It should now be online again.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How To Move Steam Game Files To a Separate Hard Drive on Linux</title>
      <link>https://mischavandenburg.com/how-to-move-your-steam-game-files-to-a-separate-hard-drive-on-linux/</link>
      <pubDate>Thu, 26 May 2022 09:03:44 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/how-to-move-your-steam-game-files-to-a-separate-hard-drive-on-linux/</guid>
      <description>&lt;p&gt;I have installed my OS on a 240GB SSD, and I prefer to keep my data on a different disk to leave enough space to work with. I wanted to move my steam game files to a separate hard drive on Linux. I’ll show you what I did to make this happen in this article. I use Manjaro GNOME.&lt;/p&gt;
&lt;p&gt;First, you need a correctly partitioned hard drive.&lt;/p&gt;
&lt;p&gt;To wipe your drive clean and have a single partition on it, we’ll use GParted.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I have installed my OS on a 240GB SSD, and I prefer to keep my data on a different disk to leave enough space to work with. I wanted to move my steam game files to a separate hard drive on Linux. I’ll show you what I did to make this happen in this article. I use Manjaro GNOME.</p>
<p>First, you need a correctly partitioned hard drive.</p>
<p>To wipe your drive clean and have a single partition on it, we’ll use GParted.</p>
<p><img loading="lazy" src="/gparted1.png" type="" alt=""  />
Select your disk in the upper right corner.</p>
<p>Then go to Device and select Create Partition Table:</p>
<p><img loading="lazy" src="/parted2.png" type="" alt=""  /></p>
<p>Follow the wizard and use an ext4 filesystem. NTFS can cause problems because Steam cannot read it properly.</p>
<h1 id="mounting">mounting</h1>
<p>To use a disk or a partition in Linux, it needs to be mounted.</p>
<p>List your devices and identify the one you wish to mount by using the “lsblk” command.</p>
<p>In my case, I wish to mount the drive sdc1</p>
<p><img loading="lazy" src="/lsblk.png" type="" alt=""  /></p>
<p>On Linux, all filesystems need to be mounted before they can be used. I wanted my whole disk to be available in the directory /mnt/data</p>
<p>Before mounting, I created the directory.</p>
<p><code>cd /mnt</code></p>
<p><code>sudo mkdir data</code></p>
<p>When you make the directory by using sudo, the directory owner will be the root user. This means that you cannot access the directory and write to it from your own user.</p>
<p>Use this command to change the ownership of the directory. Replace “mischa” with your username.</p>
<p><code>sudo chmod mischa:mischa data</code></p>
<p>Verify that the directory now has the correct ownership:</p>
<p><img loading="lazy" src="/steamgames1.png" type="" alt=""  /></p>
<p>Now you can mount your directory, so it is available for use.</p>
<p><code>mount /dev/sdc1 /mnt/data</code></p>
<h1 id="mounting-on-boot">mounting on boot</h1>
<p>For the mount to happen automatically on startup, you’ll need to add it to the /etc/fstab file. We start by finding the UUID of our disk.</p>
<p>Use the following command:</p>
<p><code>ls -al /dev/disk/by-uuid/</code></p>
<p><img loading="lazy" src="/steamgames2.png" type="" alt=""  /></p>
<p>In my case the UUID will be 50d608bc-a7ad-4ff6-bf44-bb6f26efa4f6</p>
<h3 id="etcfstab">/etc/fstab</h3>
<p>open the file in your favorite editor. I like to use vim.</p>
<p><code>sudo vim /etc/fstab</code></p>
<p>Add a new entry to your /etc/fstab file and use the following parameters:</p>
<p><code>UUID=50d608bc-a7ad-4ff6-bf44-bb6f26efa4f6 /mnt/data ext4 defaults 0 0</code></p>
<p><img loading="lazy" src="/steamgames3.png" type="" alt=""  /></p>
<p>Before we go further, verify that we did this correctly by using the following command:</p>
<p><code>findmnt --</code>verify</p>
<p>This will verify the /etc/fstab file. Not meaning to scare you, but an incorrectly configured fstab may lead to an unbootable system.</p>
<p>Now reboot your system and check if your disk is mounted automatically.</p>
<p>It is also a good idea to cd to your mounted directory and touch a file to see if you have write permissions.</p>
<p><img loading="lazy" src="/steamgames4.png" type="" alt=""  /></p>
<h1 id="steam">Steam</h1>
<p>Now it’s time to set things up in Steam. Open Steam and open your settings.</p>
<p><img loading="lazy" src="/steamgames5.png" type="" alt=""  /></p>
<p>go to Downloads –&gt; Steam Library Folders</p>
<p>Click the + button and navigate to your mounted drive.</p>
<p><img loading="lazy" src="/steamgames6.png" type="" alt=""  /></p>
<p>To test, install a game and reboot your system.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Goodbye Windows, Hello Linux! Switching to Linux as my Daily Driver</title>
      <link>https://mischavandenburg.com/goodbye-windows-hello-linux-switching-to-linux-as-my-daily-driver/</link>
      <pubDate>Tue, 26 Apr 2022 06:38:57 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/goodbye-windows-hello-linux-switching-to-linux-as-my-daily-driver/</guid>
      <description>&lt;p&gt;After getting my LPIC-1 certification, my interest in Linux continued to grow. When I started my new job, I performed more sysadmin tasks, such as increasing the size of filesystems or removing backups, and it felt good to put the theory into practice.&lt;/p&gt;
&lt;p&gt;I was still using Windows in my personal setup, and I started running into limitations. Finally, I realized how much I appreciated the freedom and control over my system that Linux gave me. So I decided I wanted to switch to Linux for my daily operating system. But a few things were holding me back. Will I be able to play my favorite games? Will I run into a lot of problems with my sound and microphone? Are all the apps I need for working from home available on Linux? Can I even edit videos on Linux?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>After getting my LPIC-1 certification, my interest in Linux continued to grow. When I started my new job, I performed more sysadmin tasks, such as increasing the size of filesystems or removing backups, and it felt good to put the theory into practice.</p>
<p>I was still using Windows in my personal setup, and I started running into limitations. Finally, I realized how much I appreciated the freedom and control over my system that Linux gave me. So I decided I wanted to switch to Linux for my daily operating system. But a few things were holding me back. Will I be able to play my favorite games? Will I run into a lot of problems with my sound and microphone? Are all the apps I need for working from home available on Linux? Can I even edit videos on Linux?</p>
<h2 id="preparing-to-switch">preparing to switch</h2>
<p>I made a dual boot install of Ubuntu to try things out to answer these questions. I started things off by setting small goals for myself. For example, I need to be able to work from home. Which programs do I need? And I started from there.</p>
<p>I had no problems installing Slack, Zoom, Teams, and all the other programs I needed for my work. I was very surprised by how well all of the external hardware worked. My Bluetooth keyboard and mouse worked immediately without needing to install any drivers. Even my USB webcam worked instantly without any problems.</p>
<p>To put this into perspective, I spent an entire afternoon getting my keyboard to work correctly on my MacBook. It needed a lot of extra drivers. Still, there is a 4-second delay when I press my volume up/down keys when working on my MacBook. All of this works perfectly on my Linux OS without any delays and without any drivers or extra configuration.</p>
<p>I kept my dual boot setup for a while as I was trying out different distros, and I eventually ended up with Manjaro as my distro of choice. I like it because it is based on Arch Linux, and it gives you access to the Arch User Repository (AUR). I want to use Arch eventually, and I figured this might be a good stepping stone.</p>
<h2 id="fate-decided-for-me">fate decided for me</h2>
<p>This dual boot setup continued for a while as I was warming up to the idea of completely abandoning Windows. I set Linux as my default boot option, and after a few weeks, I realized I hadn’t needed to boot into Windows for anything at all. However, I still didn’t feel quite ready to switch completely to Linux.</p>
<p>One evening I wanted to make another fresh install to check out the GNOME version of Manjaro. I was doing a lot of chores at the same time, and it was getting quite late, but I wanted to have the installer running as I was doing other tasks. Probably not my most brilliant move.</p>
<p>You probably know what is coming: in between my chores, I started the installation. In a moment of carelessness, I managed to point the installation to my Windows partition, and it was completely wiped and replaced with a sparkling fresh Linux install.</p>
<p>“Well, I guess I am moving to Linux today!” I thought while I suppressed a hint of panic as I racked my brain to see if I had lost any important files. I knew that most of my important stuff was safely backed up in the cloud. But if I had formatted my Windows drive by choice, rather than by accident, I would have backed up a lot more files.</p>
<h2 id="first-week-without-windows">first week without windows</h2>
<p>A week ago, I lost my complete Windows install, but there hasn’t been a single moment where I regretted making the switch. Fortunately, it also seems that I did not lose anything important.</p>
<p>I am learning so much by forcing myself to use Linux as a daily driver. Most things are correctly configured out of the box. But sometimes, you have to do some work to get the configuration you like.</p>
<p>For instance, after installing Steam, I wanted to have the game files located on a different hard disk because my OS SSD is only 256GB. This required me to format my data SSD to an ext4 filesystem and mount it in a folder. I also needed to add it to my /etc/fstab file to make sure that it mounts automatically when I boot my PC.</p>
<p>These tasks have been great practice for the things I need to do on my servers at work, and they will make me approach these tasks with a little more confidence because I have done them before on my personal setup. This is the great advantage of having Linux as a daily driver if you are becoming a DevOps Engineer or Linux System Administrator.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Yadm: Keep Track of Your Precious Dotfiles</title>
      <link>https://mischavandenburg.com/yadm-keep-track-of-your-precious-dotfiles/</link>
      <pubDate>Sat, 02 Apr 2022 09:55:03 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/yadm-keep-track-of-your-precious-dotfiles/</guid>
      <description>&lt;p&gt;This week I learned about &lt;a href=&#34;https://yadm.io&#34;&gt;yadm: yet another dotfile manager&lt;/a&gt;. It is the perfect way to keep track of all your custom configuration files, known as dotfiles.&lt;/p&gt;
&lt;p&gt;Even if you have only a little bit of experience with Linux, you know that everything is managed in files. All configuration parameters are set or changed in text files stored on the hard disk. These files are usually located in your home directory and are hidden by default. This is indicated by prefixing the file with a period. So the configuration file for the vim editor is .vimrc, and for zshell you use the .zshrc. This is why configuration files are referred to as dotfiles.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This week I learned about <a href="https://yadm.io">yadm: yet another dotfile manager</a>. It is the perfect way to keep track of all your custom configuration files, known as dotfiles.</p>
<p>Even if you have only a little bit of experience with Linux, you know that everything is managed in files. All configuration parameters are set or changed in text files stored on the hard disk. These files are usually located in your home directory and are hidden by default. This is indicated by prefixing the file with a period. So the configuration file for the vim editor is .vimrc, and for zshell you use the .zshrc. This is why configuration files are referred to as dotfiles.</p>
<h3 id="customisation">customisation</h3>
<p>The more I work with Linux, the more I appreciate the ability to customize things. When I first started, I was pretty satisfied with the vanilla experience. You punch your commands into the terminal, and you do your tasks. What more could you need?</p>
<p>This started to change when I began working with senior engineers who built their custom setups over the years. I saw them opening 3 terminal windows in a perfect ratio with beautiful colorschemes or previewing files in a file browser directly in vim so they could split them vertically and edit them side by side.</p>
<p>I wanted to create a similar setup by adding settings and plugins to the .vimrc and .zshrc files. However, before going down this rabbit hole, I asked myself the following question. How can I bring this configuration with me to other machines? What happens if my laptop gets stolen and I lose my precious configuration files?</p>
<h3 id="yet-another-dotfile-manager">yet another dotfile manager</h3>
<p>Enter yadm. I had thought of putting my dotfiles in a GitHub repo, but this brings up a whole set of new challenges where you would need to create symbolic links across your system to have the files in their correct places. Yadm solves this problem.</p>
<p>Yadm turns your home directory ( ~/ ) into a Git repo which can be pushed to a host of your choice. You can add your files one by one, and yadm will track them. The best thing is that you can add the files from all over your system, and yadm will not bother with any of the other files in your home directory.</p>
<h3 id="you-want-git-for-your-dotfiles">you want git for your dotfiles</h3>
<p>Setting up your configuration files in a git repository has a lot of advantages:</p>
<ul>
<li>configuration is saved in multiple places</li>
<li>easily share your configuration across machines</li>
<li>version control</li>
</ul>
<p>Version control is especially useful. You will always be able to trace back that one plugin you used a few years ago, but you cannot remember the name of. And it is fun to watch your configuration grow over time.</p>
<h3 id="setting-up-yadm">setting up yadm</h3>
<p><a href="https://yadm.io/docs/install">Installing yadm</a> is a breeze. For my mac I just used</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install yadm
</span></span></code></pre></div><p>or you can use the apt-get or dnf install equivalents if you are on Linux.</p>
<p><strong>You interact with yadm the same way you interact with git. You simply replace the word git with yadm in the commands.</strong></p>
<p>Then you navigate to your home directory and set up the repository. If you don’t have a repository yet:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm init
</span></span><span class="line"><span class="cl">yadm add &lt;important file&gt;
</span></span><span class="line"><span class="cl">yadm commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">yadm remote add origin &lt;url&gt;
</span></span><span class="line"><span class="cl">yadm push -u origin &lt;<span class="nb">local</span> branch&gt;:&lt;remote branch&gt;
</span></span></code></pre></div><p>Or if you already have a dotfiles repository:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm clone &lt;url&gt;
</span></span><span class="line"><span class="cl">yadm status
</span></span></code></pre></div><p>And that’s it. Now add your configuration files and push them to your hosted repo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm add ~/.vimrc 
</span></span><span class="line"><span class="cl">yadm add ~/.zshrc
</span></span><span class="line"><span class="cl">yadm commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">yadm push
</span></span></code></pre></div><p>You will notice that yadm expects you to add all the files every time you want to make a new commit. Use this command to stage all the files you added previously:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm add -u
</span></span></code></pre></div><h3 id="enjoy-your-synched-customisation">enjoy your synched customisation</h3>
<p>Having your dotfiles in a GitHub repo makes it easy to set up your preferred settings on a new machine or environment. So install yadm and pull your repo, and off you go!</p>
<p>I hope you will enjoy it as much as I do. Crafting a customized setup takes a lot of time and effort, and now that I finally have an excellent solution to keep track of my files, I am ready to dive into the customization rabbit hole.</p>
<p>Download yadm <a href="https://yadm.io">here.</a> Here you will also find all the necessary information to install and configure your yadm.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>LPIC-1 Study Guide</title>
      <link>https://mischavandenburg.com/lpic-1-study-guide/</link>
      <pubDate>Wed, 16 Mar 2022 21:20:19 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/lpic-1-study-guide/</guid>
      <description>&lt;p&gt;I recently obtained my LPIC-1 certification, and in this blog post, I’ll share the strategy and techniques I used to pass this exam and share my thoughts on the certification. Because I am a Linux novice, the exam was a pretty tough grind for me. This article offers a beginner’s perspective on the LPIC-1 certification. Is the LPIC-1 hard to pass? Keep reading to find out.&lt;/p&gt;
&lt;p&gt;Before this certification, I had only a little bit of experience. I deployed LAMP stacks using Ansible and configured VMs to be able to communicate with each other using only the command line. I also did a “Linux Fundamentals” video training. I could navigate the filesystem, edit text files and work in the terminal, but that was about it.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I recently obtained my LPIC-1 certification, and in this blog post, I’ll share the strategy and techniques I used to pass this exam and share my thoughts on the certification. Because I am a Linux novice, the exam was a pretty tough grind for me. This article offers a beginner’s perspective on the LPIC-1 certification. Is the LPIC-1 hard to pass? Keep reading to find out.</p>
<p>Before this certification, I had only a little bit of experience. I deployed LAMP stacks using Ansible and configured VMs to be able to communicate with each other using only the command line. I also did a “Linux Fundamentals” video training. I could navigate the filesystem, edit text files and work in the terminal, but that was about it.</p>
<p><img loading="lazy" src="/hard.jpg" type="" alt=""  /></p>
<h3 id="is-it-hard">Is it hard?</h3>
<p>For a beginner: yes, it was hard! But if you are a Linux administrator with a few years of experience, these exams probably are not very difficult to pass. However, even if you are experienced, be prepared to do a lot of memorization. Even though the requirements on the website seem very basic and straightforward, when you dig into the study resources, you will soon discover that you need to learn a large host of commands and many of their accompanying parameters. For example, you will need to know what grep -H does precisely, the difference between passwd -l, chage -l, and chage -L, the location of the directory that contains all the timezones, and the directory that contains the printer configurations for CUPS.</p>
<h3 id="the-certification">The certification</h3>
<p>The LPIC-1 certificate requires candidates to pass the LPI 101-500 and 102-500 exams. These exams test the candidates on various subjects, such as file management, boot loaders, networking fundamentals, user and group management, file systems and partitioning, and much more.</p>
<p>Each exam has a 600-page syllabus, so to get your LPIC-1 certification, you need to work through 1200 pages and memorize a few hundred commands and parameters. However, if you work as a Linux sysadmin, you’ll probably know many of these commands and concepts.</p>
<h3 id="study-materials">Study Materials</h3>
<p>I attended a 4-day course that covered both exams. However, because of the large amount of information that needs to be covered, the teacher could only address the subjects on a superficial level. Therefore, I would advise you to be suspicious of any courses that promise to prep you for the exams in 4 days if you are a beginner. I estimate that you need at least double that amount to get some proper explanation of the material.</p>
<h4 id="lpi-syllabus">LPI Syllabus</h4>
<p>After finishing the course, it became clear that I needed a lot of studying to pass the exams. Fortunately, LPI has created a syllabus for each exam. These are available for free on the <a href="https://www.lpi.org/our-certifications/lpic-1-overview">LPI.org website.</a></p>
<h4 id="lpi-practice-exams">LPI Practice Exams</h4>
<p>It is crucial to test your knowledge. This is the resource I used:</p>
<p><a href="https://amzn.to/3KHAkCZ">LPIC-1 Linux Professional Institute Certification Practice Tests: Exam 101-500 and Exam 102-500 </a></p>
<p>If you are a member of O’Reilly’s, you can read the book there. It contains around 90 practice questions for every chapter in the LPI syllabus. The questions test your knowledge in detail and are a great way to determine whether you have fully grasped the material.</p>
<p>However, the book was written in 2019 and contains questions about certain subjects that have since been removed from the exams. So if you suddenly encounter questions that do not seem familiar at all, make sure to double-check that it is actually an exam objective.</p>
<p>Lastly, I used <a href="https://www.udemy.com/share/1029gO3@XonS1Jh2QkFmIV_mN-r8Rbx04vCYiyykPhTpewu5iLZQVNIYMVe4z53YFSxp2tly/">these practice exams on Udemy</a>.</p>
<h3 id="memorization">Memorization</h3>
<p>As I have stated before, the exams require you to do a lot of memorization. Fortunately, we have some tools and techniques available to help us with this task.</p>
<p>The primary tool is Anki. If you are not familiar with it, Anki is a very simple and free program that allows you to create flashcards that you can use to study and test your knowledge. The best thing about Anki is that it implements spaced repetition. You can download and learn more about Anki here: <a href="https://apps.ankiweb.net/">https://apps.ankiweb.net</a></p>
<p>Secondly, I am fond of memory techniques. You can remember things much more quickly by visualizing them in your mind or utilizing techniques such as Memory Palaces or the Method of Loci. If you are interested in learning more about memory techniques, I highly recommend Dr. Anthony Metivier’s <a href="https://www.youtube.com/c/AnthonyMetivierMMM/featured">YouTube channel.</a></p>
<p><img loading="lazy" src="/palace.jpg" type="" alt=""  /></p>
<h3 id="strategy">Strategy</h3>
<p>Here is the strategy that I used to pass the exams:</p>
<ul>
<li>Read through a chapter and take notes.</li>
<li>Make Anki flashcards for all the commands and flags that you do not know yet</li>
<li>Do the exercises at the end of the chapter</li>
<li>Do the practice exam for your chapter from the exam book, which should give you a good indication of how well you have grasped the material.</li>
<li>Make flashcards of all the questions that you answered wrong (trust me, there will be quite a few)</li>
<li>Use Anki to test yourself and memorize all of the commands and exam questions</li>
</ul>
<h3 id="tips">Tips:</h3>
<ul>
<li>Do your Anki reviews every day. On some days I was adding more than 100 new cards, which will lead to a lot of reviews in the coming days</li>
<li>Although the syllabus for exam 101 explained things very well, the 102 syllabus sometimes is very meager in its explanations and you might need to supplement with reading man pages, YouTube videos, and other tutorials. For example, I needed to find quite a bit of supplementary material for chapter 109 Networking Fundamentals.</li>
<li>Ask for help if you don’t understand a certain topic</li>
<li>Don’t think you can get away with skipping a topic. You will be tested on absolutely everything that’s in the syllabus, trust me.</li>
<li>Try doing it together with someone else. I was doing it together with my friend and colleague, and it was extremely useful to be able to share things I struggled with and to discuss things with him to understand them better. Thank you for the good times, Gino!</li>
</ul>
<h3 id="my-thoughts-on-the-certification">My thoughts on the certification</h3>
<p>The subject matter is extensive, and I know my way around Linux much better now. Therefore, if I encounter a problem, I am better positioned to assess where the cause might be and then solve the problem from there. I also feel I have a much better grasp of basic networking concepts, which will prove to be very useful in many situations in my work as a DevOps Engineer.</p>
<p>However, there are also a few drawbacks to this certification. I think there is too much emphasis on memorizing commands and their flags. I think it is not necessary to memorize all of the possible parameters of the chage command because, in the real world, I would take a quick look at the man page to find the parameter that I need. The exams force you to memorize many parameters in a short time, and to be honest, you will probably forget about them very quickly anyway.</p>
<p>But overall, I am pleased and grateful to my employer that I was able to obtain this certification, and it has made me hungry for more, and I am very eager to continue my learning in this domain.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
