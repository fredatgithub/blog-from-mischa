<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/linux/</link>
    <description>Recent content in Linux on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to follow symbolic links while searching with Telescope in neovim</title>
      <link>https://mischavandenburg.com/zet/neovim-telescope-follow-symlinks/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/neovim-telescope-follow-symlinks/</guid>
      <description>I use the Obsidian app, but I mostly write and search my notes with neovim. I added my zet directory from this blog repo into the Obsidian vault as a symbolic link, but I soon discovered that these files were not being searched.
Telescope.nvim uses ripgrep (rg) to do the live grepping in its search, and ripgrep does not follow symbolic links by default. You need to pass the -L flag to it.</description>
      <content:encoded><![CDATA[<p>I use the <a href="/zet/articles/obsidian-introduction/">Obsidian</a> app, but I mostly write and search my notes with neovim. I added my zet directory from this blog repo into the Obsidian vault as a symbolic link, but I soon discovered that these files were not being searched.</p>
<p>Telescope.nvim uses ripgrep (rg) to do the live grepping in its search, and ripgrep does not follow symbolic links by default. You need to pass the -L flag to it.</p>
<p>To pass the -L flag, and some other flags, I added the following to my telescope config file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">-- Custom ripgrep configuration:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">telescope</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;telescope&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">telescopeConfig</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;telescope.config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- Clone the default Telescope configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">vimgrep_arguments</span> <span class="o">=</span> <span class="p">{</span> <span class="n">unpack</span><span class="p">(</span><span class="n">telescopeConfig.values</span><span class="p">.</span><span class="n">vimgrep_arguments</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- I want to search in hidden/dot files.</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;--hidden&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">-- I don&#39;t want to search in the `.git` directory.</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;--glob&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;!**/.git/*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- I want to follow symbolic links</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;-L&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">telescope.setup</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">	<span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">-- `hidden = true` is not supported in text grep commands.</span>
</span></span><span class="line"><span class="cl">		<span class="n">vimgrep_arguments</span> <span class="o">=</span> <span class="n">vimgrep_arguments</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="n">pickers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">find_files</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">-- `hidden = true` will still show the inside of `.git/` as it&#39;s not `.gitignore`d.</span>
</span></span><span class="line"><span class="cl">			<span class="n">find_command</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;rg&#34;</span><span class="p">,</span> <span class="s2">&#34;--files&#34;</span><span class="p">,</span> <span class="s2">&#34;--hidden&#34;</span><span class="p">,</span> <span class="s2">&#34;--glob&#34;</span><span class="p">,</span> <span class="s2">&#34;!**/.git/*&#34;</span><span class="p">,</span> <span class="s2">&#34;-L&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>Based on the configuration examples found on the project&rsquo;s GitHub page.</p>
<p><a href="https://github.com/nvim-telescope/telescope.nvim">https://github.com/nvim-telescope/telescope.nvim</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Using &#34;//&#34; syntax as search and replace</title>
      <link>https://mischavandenburg.com/zet/slash-syntax-replace/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/slash-syntax-replace/</guid>
      <description>In this evening&amp;rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:
!#/bin/bash echo -e ${PATH//:/\\n} I could not make heads or tails of all these slashes, since the output clearly indicated that search and replacement was being performed. I&amp;rsquo;m used to the sed / vim syntax: s/foo/bar
After some research I learned that &amp;lsquo;//&amp;rsquo; is a global search and replace syntax of several text processing programs.</description>
      <content:encoded><![CDATA[<p>In this evening&rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">!#/bin/bash
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="si">${</span><span class="nv">PATH</span><span class="p">//:/</span><span class="se">\\</span><span class="nv">n</span><span class="si">}</span>
</span></span></code></pre></div><p>I could not make heads or tails of all these slashes, since the output clearly indicated that search and replacement was being performed. I&rsquo;m used to the sed / vim syntax: <code>s/foo/bar</code></p>
<p>After some research I learned that &lsquo;//&rsquo; is a global search and replace syntax of several text processing programs.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">foo</span><span class="o">=</span><span class="s2">&#34;1234567890&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">foo</span><span class="p">//[0-9]/x</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This replaces all the digits in the $foo variable with &lsquo;x&rsquo;, so the output would be xxxxxxxxxx</p>
<p>To do this with sed, you would do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$foo</span><span class="s2">&#34;</span> <span class="p">|</span> sed <span class="s1">&#39;s/[0-9]/x/g&#39;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>How to install the Openstack CLI on Linux</title>
      <link>https://mischavandenburg.com/zet/install-openstack-cli/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/install-openstack-cli/</guid>
      <description>Make sure to have pip installed.
Run pip install python-openstackclient
Pip will install a binary called &amp;ldquo;openstack&amp;rdquo; in ~/.local/bin
If the openstack command is not available in your session, you might need to add it to your PATH:
export PATH=&amp;quot;$HOME/.local/bin:$PATH&amp;quot;
Add this to your ~/.zshrc or ~/.bashrc to make sure this happens for each shell session.
Don&amp;rsquo;t forget to source your updated ~/.zshrc if you chose to add it:
source ~/.</description>
      <content:encoded><![CDATA[<p>Make sure to have pip installed.</p>
<p>Run <code>pip install python-openstackclient</code></p>
<p>Pip will install a binary called &ldquo;openstack&rdquo; in ~/.local/bin</p>
<p>If the openstack command is not available in your session, you might need to add it to your PATH:</p>
<p><code>export PATH=&quot;$HOME/.local/bin:$PATH&quot;</code></p>
<p>Add this to your ~/.zshrc or ~/.bashrc to make sure this happens for each shell session.</p>
<p>Don&rsquo;t forget to source your updated ~/.zshrc if you chose to add it:</p>
<p><code>source ~/.zshrc</code></p>
<p><a href="https://docs.openstack.org/newton/user-guide/common/cli-install-openstack-command-line-clients.html">https://docs.openstack.org/newton/user-guide/common/cli-install-openstack-command-line-clients.html</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Reset a VM Root Password using the Openstack CLI</title>
      <link>https://mischavandenburg.com/zet/openstack-root-password/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/openstack-root-password/</guid>
      <description> Download the Openstack RC file from the Openstack portal. Click your username in the top right corner to find it. Source the RC file to make the environment variables avaialable to your current session: source ~/my_openstack.sh Find the instance ID of your VM from the portal. Run openstack server set --root-password be3xxxx5-8348-418b-xxxb-c4xxxx575cd You will be prompted for the new password which will be set on the virtual machine. </description>
      <content:encoded><![CDATA[<ol>
<li>Download the Openstack RC file from the Openstack portal. Click your username in the top right corner to find it.</li>
<li>Source the RC file to make the environment variables avaialable to your current session: <code>source ~/my_openstack.sh</code></li>
<li>Find the instance ID of your VM from the portal.</li>
<li>Run <code>openstack server set --root-password be3xxxx5-8348-418b-xxxb-c4xxxx575cd</code></li>
<li>You will be prompted for the new password which will be set on the virtual machine.</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to run installed pip packages as binaries</title>
      <link>https://mischavandenburg.com/zet/run-installed-pip-packages/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/run-installed-pip-packages/</guid>
      <description>When you install a pip package which is meant to be run from the command line as a command, you might find that it is not available to you after installation.
If this happens, it might be that the path is missing from your PATH variable. Therefore, the shell does not source these binaries when initiated, and does not know that these executables exist.
You can find the location of your binaries by running pip show package_name</description>
      <content:encoded><![CDATA[<p>When you install a pip package which is meant to be run from the command line as a command, you might find that it is not available to you after installation.</p>
<p>If this happens, it might be that the path is missing from your PATH variable. Therefore, the shell does not source these binaries when initiated, and does not know that these executables exist.</p>
<p>You can find the location of your binaries by running <code>pip show package_name</code></p>
<p>Usually the binaries will be located in ~/.local/bin on a UNIX based system.</p>
<p>To add this to your path, run:</p>
<p><code>export PATH=&quot;$HOME/.local/bin:$PATH&quot;</code></p>
<p>Add this to your ~/.zshrc or ~/.bashrc to make sure this happens for each shell session.</p>
<p>Don&rsquo;t forget to source your updated ~/.zshrc if you chose to add it:</p>
<p><code>source ~/.zshrc</code></p>
<p><a href="https://stackoverflow.com/questions/29980798/where-does-pip-install-its-packages">https://stackoverflow.com/questions/29980798/where-does-pip-install-its-packages</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Working on the command line is already coding</title>
      <link>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</guid>
      <description>Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.
When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.
I think this is such an interesting point. I&amp;rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line.</description>
      <content:encoded><![CDATA[<p>Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.</p>
<p>When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.</p>
<p>I think this is such an interesting point. I&rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line. However, when I was writing bash scripts, I did consider myself to be coding. There is literally no difference. A bash script is just a string of commands that you would enter manually anyway.</p>
<p><a href="https://rwx.gg/">https://rwx.gg/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Fall in love with sed.</title>
      <link>https://mischavandenburg.com/zet/fall-in-love-with-sed/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/fall-in-love-with-sed/</guid>
      <description>Sed, it&amp;rsquo;s so powerful. I remember I struggled with finding practical uses for it when I did my LPIC-1 certification. But now I find myself using it several times a week. It is so powerful to edit multiple files at a time. I use it for work, but also for making changes to my entire second brain in Obsidian with one command.
Today I needed to update my /articles/ links to /zet/articles/ links because I&amp;rsquo;m restructuring my website.</description>
      <content:encoded><![CDATA[<p>Sed, it&rsquo;s so powerful. I remember I struggled with finding practical uses for it when I did my LPIC-1 certification. But now I find myself using it several times a week. It is so powerful to edit multiple files at a time. I use it for work, but also for making changes to my entire second brain in Obsidian with one command.</p>
<p>Today I needed to update my /articles/ links to /zet/articles/ links because I&rsquo;m restructuring my website. Here is the sed expression that is executed for every markdown file that is found by fd:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/\/articles\//\/zet\/articles\//g&#39;</span> <span class="k">$(</span>fd .md<span class="k">)</span>
</span></span></code></pre></div><p>The result:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">diff --git a/content/zet/move-to-zet.md b/content/zet/move-to-zet.md
</span></span><span class="line"><span class="cl">index 1e37283..3b817e3 <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/content/zet/move-to-zet.md
</span></span><span class="line"><span class="cl">+++ b/content/zet/move-to-zet.md
</span></span><span class="line"><span class="cl">@@ -6,7 +6,7 @@ tags:
</span></span><span class="line"><span class="cl"> - Zettelkasten
</span></span><span class="line"><span class="cl"> ---
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-I<span class="s1">&#39;ve transitioned my note taking system towards a Zettelkasten system. I still use directories for folders and make copious links, but more
</span></span></span><span class="line"><span class="cl"><span class="s1">often than not I put them in the larger generic 00-zettelkasten directory in my [Obsidian](/articles/obsidian-introduction/) vault.
</span></span></span><span class="line"><span class="cl"><span class="s1">+I&#39;</span>ve transitioned my note taking system towards a Zettelkasten system. I still use directories <span class="k">for</span> folders and make copious links, but more
</span></span><span class="line"><span class="cl">often than not I put them in the larger generic 00-zettelkasten directory in my <span class="o">[</span>Obsidian<span class="o">](</span>/zet/articles/obsidian-introduction/<span class="o">)</span> vault.
</span></span></code></pre></div><p>These sites are super useful to help you formulate your expressions:</p>
<p><a href="https://sed.js.org/">https://sed.js.org/</a></p>
<p><a href="https://regex101.com/">https://regex101.com/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How This Blog is Created, Written and Hosted</title>
      <link>https://mischavandenburg.com/zet/articles/how-this-blog-is-created/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/how-this-blog-is-created/</guid>
      <description>As I alluded to in my article about Obsidian, I am very fond of editing my text in neovim. Naturally, if you want to edit in neovim, you need to have your text as local files. I keep all of my personal notes in markdown.
Previously I was using WordPress, but the editing and writing experience became torture which I could not endure any longer. I looked for a different solution that would allow me to edit my files locally instead of in the browser.</description>
      <content:encoded><![CDATA[<p>As I alluded to in my <a href="/zet/articles/obsidian-introduction">article about Obsidian,</a> I am very fond of editing my text in neovim. Naturally, if you want to edit in neovim, you need to have your text as local files. I keep all of my personal notes in markdown.</p>
<p>Previously I was using WordPress, but the editing and writing experience became torture which I could not endure any longer. I looked for a different solution that would allow me to edit my files locally instead of in the browser.</p>
<p>I discovered <a href="https://gohugo.io/">Hugo</a> and I fell in love with it immediately.</p>
<p>Hugo is a static site generator based on markdown files. My entire blog is written in markdown files which are stored <a href="https://github.com/mischavandenburg/blog">in a GitHub repo.</a>. I write my blog posts in vim and when I&rsquo;m done I use Hugo to generate the updated website.</p>
<p>The result is what you see in the &ldquo;public&rdquo; directory in the GitHub repo. This public directory is pushed to a different repo which is hooked up to my hosting provider. My hosting provider uses Plesk, and with Plesk I have the option to connect the GitHub repo to the web server with a webhook. When I push to my hosting repo, the contents are gathered by the webserver and served as public web content.</p>
<p>My complete writing and publishing workflow looks like this:</p>
<ol>
<li>Create a new markdown file</li>
<li>Write the note or article</li>
<li>Save the file and run the &ldquo;hugo&rdquo; command to regenerate the website</li>
<li>Run the &ldquo;publish&rdquo; script. This is a custom script I wrote that takes the contents of the &ldquo;public&rdquo; directory to my hosting repo</li>
<li>Push the newly generated website to the hosting repo</li>
<li>And we&rsquo;re live! 🚀 🎉</li>
</ol>
<p>It is such a smooth and convenient process. I can literally have a new note published to the interet within a few minutes, and it is all done from the command line using my favorite tools.</p>
<p><a href="https://github.com/mischavandenburg/blog">Blog GitHub repo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What Are Containers?</title>
      <link>https://mischavandenburg.com/zet/articles/what-are-containers/</link>
      <pubDate>Sun, 01 Jan 2023 16:17:58 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/what-are-containers/</guid>
      <description>When you learn about DevOps, you will come across the concept of a container early on. This is a &amp;ldquo;Mischa Explains&amp;rdquo; article where I attempt to explain a concept in my own words as simply as possible. I use the Feynman technique and pretend to explain it to a 12-year-old.
Virtualization To understand containers, we need to understand virtualization. Virtualization is the process of creating &amp;ldquo;fake computers&amp;rdquo; or &amp;ldquo;virtual computers&amp;rdquo; on a physical computer.</description>
      <content:encoded><![CDATA[<p>When you learn about DevOps, you will come across the concept of a container early on. This is a &ldquo;Mischa Explains&rdquo; article where I attempt to explain a concept in my own words as simply as possible. I use the Feynman technique and pretend to explain it to a 12-year-old.</p>
<h1 id="virtualization">Virtualization</h1>
<p>To understand containers, we need to understand virtualization. Virtualization is the process of creating &ldquo;fake computers&rdquo; or &ldquo;virtual computers&rdquo; on a physical computer.</p>
<p>On your desk, you have a laptop or a desktop PC. This machine has hardware such as a motherboard, a hard disk, and a video card. To run programs on your computer, it needs an Operating System. Usually, Windows, macOS, or Linux are used.</p>
<p>Let&rsquo;s say you have a computer running Windows, but you want to run a program that can only run on Linux. One solution is to buy another laptop and put it beside your Windows laptop on your desk. So now you have two computers with two different operating systems.</p>
<p>Fortunately, there are other solutions. We can use virtualization to make a Virtual Machine. A virtual machine is created by software to imitate a fully functional running computer inside your current operating system. You can create a virtual machine that runs Linux on your Windows computer. Your Windows computer running the Linux virtual machine is known as the **host.</p>
<p>Now you don&rsquo;t need to buy another computer to run your Linux program. Instead, you can boot up your Linux virtual machine and run your program when needed. If you have a powerful computer, you could run ten or more virtual machines, each of which has its own operating system and custom environment.</p>
<h1 id="containers">Containers</h1>
<p>Every time you create a virtual machine, the virtual machine needs a complete operating system to work. So, first, the software creates a virtual processor, virtual video card, and a virtual network interface. Then, it runs a fully functional operating system on that virtual hardware. This takes up a lot of resources.</p>
<p>Containers are lightweight packages of software. They are designed to do a very specific task, and therefore they only contain the resources they need to do that task. Nothing more.</p>
<p>Containers use the operating system of the physical computer to run. They have a very minimal, lightweight operating system inside them, but it only contains the elements they need to do their specific task. Therefore, containers are very easy to distribute, and you can run them very quickly.</p>
<h1 id="containers-are-like-newspapers">Containers are like newspapers</h1>
<p>Containers are like newspapers. Newspapers have a particular task: providing you with the day&rsquo;s news. You cannot use newspapers to study for your mathematics exam. You use your math book to study for your math exam. If you want to be informed of the day&rsquo;s news, you use a newspaper. This is what I mean by containers having a specific task.</p>
<p>Next, newspapers are printed on a specific kind of paper. When you buy an expensive book, it will have a sturdy and durable cover, and the pages are made of nice thick paper that will last a long time. The pages don&rsquo;t tear very quickly, and when the book gets wet, it can withstand it. This thick cover and high-quality papers are like the operating system of a virtual machine.</p>
<p>Newspapers, on the other hand, are printed on very thin paper. Because they are designed to distribute the news to you effectively, newspapers do not need to be stored forever or do any other tasks. If you used thick, expensive paper for newspapers, they would become costly, and no one would buy them anymore. The paper is optimized to bring the news to you.</p>
<p>In the same way, the container only comes with the components it needs to do its specific task. Therefore, the container is optimized for its purpose. As a result, they can be distributed more quickly and do not take up a lot of resources when running.</p>
<p>There are other benefits to containers, such as improving the ability to autoscale your application, but I will expand on those in a future blog post.</p>
<h1 id="further-study">Further study</h1>
<p>To learn more about containers, you can use the following resources:</p>
<p><a href="https://youtu.be/r6YIlPEC4y4">Containers &amp; Friends from John Savill&rsquo;s DevOps Masterclass</a></p>
<p><a href="https://docs.docker.com/get-started/overview/">Docker Documentation</a></p>
<p><a href="https://youtu.be/3c-iBn73dDE">Docker Tutorial for Beginners</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Book Notes: The Unicorn Project</title>
      <link>https://mischavandenburg.com/zet/articles/unicorn-project/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/unicorn-project/</guid>
      <description>This book is the sequel to the Phoenix project. Both books are set at Parts Unlimited, a fictitious company that supplies car parts to DIY mechanics and repair shops. Phoenix is a new system that Parts Unlimited has worked on for multiple years. It is supposed to handle order processing and communication between manufacturing, stores, and clients. Phoenix will also play a role in sales and marketing. The company has been gathering customer data for years, but it cannot use any of this data yet.</description>
      <content:encoded><![CDATA[<p>
  <img loading="lazy" src="https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/91UM5i4nirL.jpg" alt="Unicorn Project"  /></p>
<p>This book is the sequel to <a href="/zet/articles/phoenix-project">the Phoenix project</a>. Both books are set at Parts Unlimited, a fictitious company that supplies car parts to DIY mechanics and repair shops. Phoenix is a new system that Parts Unlimited has worked on for multiple years. It is supposed to handle order processing and communication between manufacturing, stores, and clients. Phoenix will also play a role in sales and marketing. The company has been gathering customer data for years, but it cannot use any of this data yet. Phoenix will enable it to generate targeted marketing campaigns from the data when it&rsquo;s finished.</p>
<p>But as we saw in the previous book, it is far from finished, and things go wrong all the time. The company is not doing well, the stock prices are falling, and they need an edge over the competition. Phoenix will be their edge, but they&rsquo;ve been working on it for years. Eventually, management decided that Phoenix needed to be deployed in two weeks. But it is far from ready.</p>
<p>The main character in the Unicorn project is Maxine, a senior developer who temporarily transferred to a different department. She had to work on the Phoenix project against her will because of an unfortunate situation that needed a scapegoat. However, Maxine decides to make the best out of it, and she&rsquo;d like to begin with one thing: to get a Phoenix build going on her laptop.</p>
<p>Very quickly, she finds it impossible to run a full build of the Phoenix project due to missing files and other elements. She is appalled and makes it her mission to get the build going, but she meets another hurdle every step of the way. Missing credentials. Missing binaries and libraries. And for each of these hurdles, she must submit a ticket with a different department. Very soon, she has over 20 tickets running with long waiting times. Just to get a build going on her machine so she can work! Dozens of developers were hired to work on the Phoenix project. But when she asks them if they&rsquo;ve managed to get a build going yet, Maxine is horrified to discover that they&rsquo;ve tried for several months but haven&rsquo;t made any progress. Maxine has made more progress in a week.</p>
<blockquote>
<hr>
<p>&ldquo;Everyone around here thinks features are important because they can see them in their app, on the web page, or in the API. But no one seems to realize how important the build process is. Developers cannot be productive without a great build, integration, and test process.&rdquo;</p>
<ul>
<li>Unicorn Project</li>
</ul>
<hr>
</blockquote>
<p>After a few weeks, Maxine receives an invitation to have a drink with a group of people who are very interested in her. When she arrives at the bar, she meets the Rebellion: a group of developers, managers, and people from Operations, who are tired of the old organizational structure and want to make real changes. They think out of the box and experiment with new technologies, even though they are not authorized to do so.</p>
<p>With the Rebellion, Maxine significantly improves the build and deployment process. They recognized that Phoenix actually never was being built in its entirety. Developers were always working on parts of the application. However, after a lot of struggle, they create a build process that enables each developer to become operational on his first day.</p>
<p>This is the first step of a long series of exciting events that lead to Phoenix becoming a success. By the end of the book, they have a completely new development and testing process, and they can deploy changes to production without needing to take the entire application down. This allows them to create targeted marketing campaigns and respond to changes in the market. The first campaign was a huge success and generated the highest sales ever.</p>
<p>Maxine&rsquo;s struggle with the build process was an eye-opening experience for me. It gave me a very practical example of the need for DevOps principles to enable delivering value to customers. It is also something I recognize in my current organization. For example, projects can get stuck on a firewall change that needs to be approved by an external party. By implementing DevOps principles and arranging teams according to the &ldquo;you build it, you run it&rdquo; principle, teams can be responsible for the entire process from idea to production and therefore have a very short release cycle for their application.</p>
<p>I thoroughly enjoyed the first part of the book. However, the second part was less engaging to me. It became long-winded and felt like butter spread over too much bread. The author demonstrates a high level of technical experience and knowledge through his descriptions of processes, deployments, and fictional applications. Although I understand the intention of making Parts Unlimited a believable company, I think it could have been accomplished with much less detail and words.</p>
<p>The second part has more corporate drama, such as temporarily suspended managers without any clear reason. The focus shifts from a development and operations perspective to a managerial perspective. Maybe I will reread the book in a few years and this part will make a lot more sense to me then. The same happened when I reread the Phoenix project. I could not understand some aspects of the book, which became much clearer to me when I revisited it after gaining experience in the field.</p>
<p>I highly recommend this book to anyone working as a developer, DevOps Engineer, or in operations, especially if you are starting your career. The book gave me a lot of insights into &ldquo;the old way of working&rdquo; and a better understanding of the need for DevOps principles in the modern IT landscape. However, make sure to read the Phoenix project first.</p>
<h2 id="the-unicorn-project-a-novel-about-developers-digital-disruption-and-thriving-in-the-age-of-data-by-gene-kim">The Unicorn Project: A Novel about Developers, Digital Disruption, and Thriving in the Age of Data by Gene Kim</h2>
]]></content:encoded>
    </item>
    
    <item>
      <title>How and Why I Started Using Vim</title>
      <link>https://mischavandenburg.com/zet/articles/how-started-vim/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/how-started-vim/</guid>
      <description>If you are just starting your Linux journey, you might have noticed that a few camps exist in the Linux world. Just like in any other area of life, it seems that groups of human beings enjoy dividing themselves instead of living in harmony. There are camps centered around Linux distributions (I use Arch, btw) but also around text editors.
The Beginning The reason why I started to use vim is rather practical.</description>
      <content:encoded><![CDATA[<p>If you are just starting your Linux journey, you might have noticed that a few camps exist in the Linux world. Just like in any other area of life, it seems that groups of human beings enjoy dividing themselves instead of living in harmony. There are camps centered around Linux distributions (I use Arch, btw) but also around text editors.</p>
<h2 id="the-beginning">The Beginning</h2>
<p>The reason why I started to use vim is rather practical. During the first part of my traineeship, I had access to subscriptions on AWS and Azure to experiment with virtual machines. This was a perfect place to learn to work with Ansible. Many of the labs involved setting up a few virtual machines, and I destroyed many VMs when I made some big mistakes in the configuration.</p>
<p>I was constantly working on new environments, and quickly it became very tiring to set everything up to connect remotely with Visual Studio Code every time.</p>
<p>So I just started to edit the text files on the virtual machines with the included editor, which happened to be vim.</p>
<h2 id="obsession-in-its-infancy">Obsession in its Infancy</h2>
<p>When you first use vim, it is a rather disorienting experience. But in every tutorial, I was told it would be difficult in the beginning but much faster and more effective in the end. I found this very appealing because I like to do things the hard way and challenge myself.</p>
<p>I discovered that there were people out there who did all of their text editing and coding in vim. I met programmers who refuse to use anything else and people who write entire books in vim. So there had to be something to it.</p>
<p>It also fitted very well with my intention of working on the command line as much as possible and moving away from GUI applications whenever possible. I like to move in this direction because I love the idea of controlling your entire workflow with your keyboard instead of using your mouse, and vim fits perfectly into this picture.</p>
<h2 id="what-i-like-after-nine-months">What I like after Nine Months</h2>
<p>At this point, I&rsquo;ve been using vim as my primary text editor for about nine months. In my current job, I work a lot with yaml files stored in private git repositories.</p>
<p>I only work with these files from the command line, and I don&rsquo;t have any other code editor installed. I use ripgrep and fzf (fuzzy file finder) to search through the files, and I use neovim to edit them. When I need to search for files from within vim, I use the awesome Telescope plugin.</p>
<p>In these months, I&rsquo;ve picked up a few tricks, and I am starting to see the power of vim. The best thing I like about it is that I don&rsquo;t have to leave my terminal window to do the tasks I need to do. Instead, I can search through the files I need to work with, open them, make adjustments, and commit them to the repository. Then I enter the command to run the ansible playbook, and it all happens in the same window, and I don&rsquo;t have to lift my fingers from the keyboard.</p>
<h4 id="keyboard-shortcuts">Keyboard Shortcuts</h4>
<p>Now that I am gaining more experience with vim, I&rsquo;m picking up more advanced usages that significantly improve my workflow. For example, &ldquo;da(&rdquo; meaning &ldquo;delete around parentheses&rdquo; to quickly delete the text between two parentheses. Or &ldquo;da&lt;&rdquo; to very quickly delete HTML tags. Another great feature is the visual block mode, where I can add comment tags to many lines simultaneously, for example.</p>
<h4 id="searching-and-navigation">Searching and Navigation</h4>
<p>Navigating large text files has become incredibly quick since I started using vim. Of course, it takes some getting used to, but it is a lovely experience to open a file, press / to search and enter the keyword and immediately arrive at the point I need to be—no scrolling with the mouse and no need to lift my hands from the keyboard.</p>
<p>I also love the ability to jump from sentence to sentence using ) or paragraphs using }.</p>
<h4 id="multiple-files">Multiple Files</h4>
<p>It takes a little while to get used to, but when you get into it, it is effortless to open up two files at a time if you need information from both. Often I need data from 4 or more files, and opening them quickly with keyboard commands has significantly improved my workflow speed.</p>
<h4 id="customization">Customization</h4>
<p>One of the things I enjoy most about vim is the ability to customize it exactly to my needs. I&rsquo;m completely in charge of the plugins which are loaded into vim and which colors it uses, and this appeals a lot to me. However, it can be rather overwhelming in the beginning. To be honest, it is still overwhelming after ten months. It can be tough to get an idea of where to start, which plugins you need, and which settings you need to change.</p>
<p>I just started with the base install of vim and started from there. Every time I required a particular functionality, I searched around to see if a plugin was available. Very often, someone out there had the same problem as you and created a plugin for it. For example, I recently installed a plugin for using emojis in vim 😄</p>
<h2 id="how-to-get-started">How to Get Started</h2>
<p>The short answer is to simply start using vim for all of your text editing, whether it be coding or writing for pleasure. It is a cliche to say, but it will be hard in the beginning, but I promise you it will pay off in the end.</p>
<p>The second thing I&rsquo;d recommend is to run vimtutor on a Linux machine. Do this once a day for a couple of weeks, and you&rsquo;ll know how to edit text files on any Linux system for the rest of your life, which is a precious skill.</p>
<p>Finally, don&rsquo;t spend too much time reading about all the available plugins. Your needs will become apparent to you as you start to use vim for all of your tasks, and you can search for plugins to address those needs. This way, you start with a minimal editor, which you&rsquo;ll build according to your needs.</p>
<h1 id="good-luck">Good Luck!</h1>
]]></content:encoded>
    </item>
    
    <item>
      <title>Building my Own OS: Linux as a Creative Activity</title>
      <link>https://mischavandenburg.com/zet/articles/linux-creativity/</link>
      <pubDate>Sat, 10 Sep 2022 12:22:28 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/linux-creativity/</guid>
      <description>NOTE: In this article, I use a rather broad definition of “Operating System.” I do not intend to appear as if I wrote and compiled my own Linux kernel, nor do I understand the inner workings of the kernel written in C. Instead, with “building my OS from scratch,” I intend to convey that I used a minimal Linux distribution as a starting point and started building from there.
introduction I started using GNU/Linux as a daily driver about six months ago, and I have not regretted the decision ever since.</description>
      <content:encoded><![CDATA[<p><em>NOTE: In this article, I use a rather broad definition of “Operating System.” I do not intend to appear as if I wrote and compiled my own Linux kernel, nor do I understand the inner workings of the kernel written in C. Instead, with “building my OS from scratch,” I intend to convey that I used a minimal Linux distribution as a starting point and started building from there.</em></p>
<h2 id="introduction">introduction</h2>
<p>I started using GNU/Linux as a daily driver about six months ago, and I have not regretted the decision ever since. There has not been a single use case where I needed to use Windows for anything at all.</p>
<p>As I was getting more used to daily driving Linux, I noticed how much I enjoyed the ability to customize my operating system and workflow. Finally, after spending a weekend going down the customization rabbit hole, I had a good-looking terminal and customized neovim to perform as I needed it.</p>
<p>Not much later, I came across Arch Linux and the idea of building your own operating system from the ground up. I was instantly intrigued and knew I wanted to do the same. A few months have passed since I first came across Arch Linux, and now I am writing this blog post in neovim on my custom OS that I created from scratch. The font, the spacing, the colors, everything is exactly how I like it, and I love using it.</p>
<p>When you first install Arch Linux, all you get is a black screen with a blinking cursor. However, the experience of creating a fully functional graphical environment from “nothing” has been extremely satisfying, and I learned so much about GNU/Linux in the process. I also realized that this could be seen as a creative activity, like a painter creating his masterpiece from a blank canvas or a sculptor carefully chipping away at a block of marble.</p>
<h2 id="not-just-graphics">not just graphics</h2>
<p>When I say customization, I am not just referring to the visual aspects of the operating system. The things going on “under the hood” must also be carefully configured when you use a minimal distro such as Arch Linux.</p>
<p>Arch Linux comes with very few packages preinstalled, and every time you wish to add something to your system, you need to install it and enable the service in systemd. For example, after I did the installation and created my user account, I needed to run a command with root privileges. To my great surprise, even the “sudo” command was unavailable and needed to be installed.</p>
<p>This is the aspect I learned most from. Whenever I desired a certain functionality from my operating system, I needed to install and enable it. This has given me a much better understanding of the processes and daemons running on my system. It has also given me a greater appreciation of all the elements needed to provide a working environment.</p>
<h2 id="graphic-violence">graphic violence</h2>
<p>When you create an Arch Linux installation USB and boot it up, you are greeted with a command line and nothing else.</p>
<p><img loading="lazy" src="/creative1.png" type="" alt=""  /></p>
<p>When you install something more beginner-friendly, such as Ubuntu or Manjaro KDE, your installation will include a graphical desktop environment. But on Arch Linux, you must install and configure this yourself. Furthermore, to be able to render a graphical environment, you will also need to install and configure a display server such as Xorg.</p>
<p>When I started on my journey, I intended to create something that used minimal resources with a minimal look. Having used GNOME on Manjaro for a few months, I was very satisfied, but I wanted to try a tiling window manager to shave down even more resource usage. After some research, I ended up with the Awesome Window Manager. Here are some screenshots of the final result:</p>
<p><img loading="lazy" src="/creative2.png" type="" alt=""  /></p>
<p>This is what my desktop looks like when I boot up.</p>
<p><img loading="lazy" src="/creative3.png" type="" alt=""  />
Here I’m editing my window manager configuration file, while I have a browser open and keep an eye on my system resources</p>
<p><img loading="lazy" src="/creative4.png" type="" alt=""  /></p>
<p>my music listening setup, using mpd + ncmpcpp, cava and sptlrx. the lyrics are shown in real time as the music is played.</p>
<h2 id="creativity">creativity</h2>
<p><a href="https://dictionary.cambridge.org/dictionary/english">The Cambridge Dictionary</a> defines creativity as “the ability to produce original and unusual ideas, or <strong>to make something new or imaginative</strong>.”</p>
<p>When you embark on a journey, such as creating your operating system, you will probably start with a particular intention or a goal that you will work towards. With this goal in mind, you can start searching for the tools and color schemes you need to create the system that you have in mind. The result is a unique combination of tools, colors, fonts, and programs specifically tailored to your needs and wants and chosen by you.</p>
<p>Is this any different from a painter starting with a blank canvas or a musician starting with a fragment of a melody, ending up with a complete symphony? Entering commands into a computer terminal might not strike everybody as a creative activity. Still, I have found that it is a very effective and satisfying way of expressing myself and creating something I love to use daily. As an IT professional, I spend most of my time behind my computer. Doesn’t it make sense to put effort into building something customized to your needs?</p>
<h4 id="resources">resources</h4>
<p>If you want to start building your own OS, I recommend these resources:</p>
<p><a href="https://archlinux.org/">Arch Linux</a></p>
<p><a href="https://wiki.archlinux.org/">Arch Wiki</a></p>
<p><a href="https://www.reddit.com/r/unixporn/">r/unixporn – a subreddit about customization</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Upgrade Java and Jenkins on Ubuntu 18.04</title>
      <link>https://mischavandenburg.com/how-to-upgrade-java-and-jenkins-on-ubuntu-18-04/</link>
      <pubDate>Tue, 19 Jul 2022 18:01:26 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/how-to-upgrade-java-and-jenkins-on-ubuntu-18-04/</guid>
      <description>Last week I upgraded Jenkins to the latest version on the server infrastructure at work. Starting with the Jenkins 2.357 release, Java 11 or Java 17 will be required to run Jenkins. Also, the upcoming LTS release will require Java 11.
This means that I also needed to update Java on our Jenkins servers. Here are the steps that I did to perform the Jenkins and Java upgrade.
SSH into the server and stop the service.</description>
      <content:encoded><![CDATA[<p>Last week I upgraded Jenkins to the latest version on the server infrastructure at work. Starting with the Jenkins 2.357 release, Java 11 or Java 17 <a href="https://www.jenkins.io/blog/2022/06/28/require-java-11/">will be required to run Jenkins</a>. Also, the upcoming LTS release will require Java 11.</p>
<p>This means that I also needed to update Java on our Jenkins servers. Here are the steps that I did to perform the Jenkins and Java upgrade.</p>
<p>SSH into the server and stop the service. Then get the latest upgrades for your server, which is good practice:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">service jenkins stop
</span></span><span class="line"><span class="cl">apt-get update
</span></span><span class="line"><span class="cl">apt-get upgrade
</span></span></code></pre></div><p>Depending on your setup, the apt-get upgrade command might upgrade Jenkins to the latest version that does not require Java 11+. In my case, that was 3.346.</p>
<p><strong>When you get a question about updating your current config file, take the default option. This option keeps your current configuration.</strong></p>
<p>However, if your Jenkins is installed from a binary or another source, you might need to upgrade Jenkins to 3.346 using the Jenkins.war file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /usr/share/jenkins
</span></span><span class="line"><span class="cl">mv jenkins.war jenkins.war.old
</span></span><span class="line"><span class="cl">wget https://updates.jenkins-ci.org/latest/jenkins.war
</span></span><span class="line"><span class="cl">service jenkins start
</span></span></code></pre></div><p>When you start Jenkins, it will be updated to the latest version that does not require Java 11 or higher. You will notice that there will be a new folder called migrate in /usr/share/jenkins , and the jenkins.war is now located in /usr/share/java</p>
<p>This is where I got confused because it did not patch to the latest version, only up to 3.346 and the jenkins.war file was no longer being updated from the /usr/share/jenkins folder.</p>
<p>The reason is that this update moves the .war file to the /usr/share/java directory.</p>
<h1 id="java">java</h1>
<p>To get Jenkins to the latest version, we need to install or update Java and check if it has worked:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt-get install default-jre
</span></span><span class="line"><span class="cl">java -version
</span></span></code></pre></div><p>Now that you have updated the java version, you are ready to update Jenkins to the latest version.</p>
<p>Notice that we use the /usr/share/java folder now, instead of /usr/share/jenkins</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">service jenkins stop
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/share/java
</span></span><span class="line"><span class="cl">mv jenkins.war jenkins.war.old
</span></span><span class="line"><span class="cl">wget https://updates.jenkins-ci.org/latest/jenkins.war
</span></span><span class="line"><span class="cl">service jenkins start
</span></span></code></pre></div><h1 id="nodes">nodes</h1>
<p>When I accessed the Jenkins GUI, everything seemed fine, and my version was up to 3.358.</p>
<p>However, I noticed that the build nodes were all offline. When inspecting the logs, I saw the following error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">java.io.EOFException
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream<span class="nv">$PeekInputStream</span>.readFully<span class="o">(</span>ObjectInputStream.java:2905<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream<span class="nv">$BlockDataInputStream</span>.readShort<span class="o">(</span>ObjectInputStream.java:3400<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream.readStreamHeader<span class="o">(</span>ObjectInputStream.java:936<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at java.base/java.io.ObjectInputStream.&lt;init&gt;<span class="o">(</span>ObjectInputStream.java:379<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.ObjectInputStreamEx.&lt;init&gt;<span class="o">(</span>ObjectInputStreamEx.java:49<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.Command.readFrom<span class="o">(</span>Command.java:142<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.Command.readFrom<span class="o">(</span>Command.java:128<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.AbstractSynchronousByteArrayCommandTransport.read<span class="o">(</span>AbstractSynchronousByteArrayCommandTransport.java:35<span class="o">)</span>
</span></span><span class="line"><span class="cl">	at hudson.remoting.SynchronousCommandTransport<span class="nv">$ReaderThread</span>.run<span class="o">(</span>SynchronousCommandTransport.java:61<span class="o">)</span>
</span></span><span class="line"><span class="cl">Caused: java.io.IOException: Unexpected termination of the channel
</span></span><span class="line"><span class="cl">	at hudson.remoting.SynchronousCommandTransport<span class="nv">$ReaderThread</span>.run<span class="o">(</span>SynchronousCommandTransport.java:75<span class="o">)</span>
</span></span></code></pre></div><p>Observing that the error had something to do with Java, I ssh’d into the build nodes and updated Java there as well with the same command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt-get install default-jre
</span></span></code></pre></div><p>After updating Java on the build node, head back to the GUI on the master node and restart the build node.</p>
<p>It should now be online again.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How To Move Steam Game Files To a Separate Hard Drive on Linux</title>
      <link>https://mischavandenburg.com/how-to-move-your-steam-game-files-to-a-separate-hard-drive-on-linux/</link>
      <pubDate>Thu, 26 May 2022 09:03:44 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/how-to-move-your-steam-game-files-to-a-separate-hard-drive-on-linux/</guid>
      <description>I have installed my OS on a 240GB SSD, and I prefer to keep my data on a different disk to leave enough space to work with. I wanted to move my steam game files to a separate hard drive on Linux. I’ll show you what I did to make this happen in this article. I use Manjaro GNOME.
First, you need a correctly partitioned hard drive.
To wipe your drive clean and have a single partition on it, we’ll use GParted.</description>
      <content:encoded><![CDATA[<p>I have installed my OS on a 240GB SSD, and I prefer to keep my data on a different disk to leave enough space to work with. I wanted to move my steam game files to a separate hard drive on Linux. I’ll show you what I did to make this happen in this article. I use Manjaro GNOME.</p>
<p>First, you need a correctly partitioned hard drive.</p>
<p>To wipe your drive clean and have a single partition on it, we’ll use GParted.</p>
<p><img loading="lazy" src="/gparted1.png" type="" alt=""  />
Select your disk in the upper right corner.</p>
<p>Then go to Device and select Create Partition Table:</p>
<p><img loading="lazy" src="/parted2.png" type="" alt=""  /></p>
<p>Follow the wizard and use an ext4 filesystem. NTFS can cause problems because Steam cannot read it properly.</p>
<h1 id="mounting">mounting</h1>
<p>To use a disk or a partition in Linux, it needs to be mounted.</p>
<p>List your devices and identify the one you wish to mount by using the “lsblk” command.</p>
<p>In my case, I wish to mount the drive sdc1</p>
<p><img loading="lazy" src="/lsblk.png" type="" alt=""  /></p>
<p>On Linux, all filesystems need to be mounted before they can be used. I wanted my whole disk to be available in the directory /mnt/data</p>
<p>Before mounting, I created the directory.</p>
<p><code>cd /mnt</code></p>
<p><code>sudo mkdir data</code></p>
<p>When you make the directory by using sudo, the directory owner will be the root user. This means that you cannot access the directory and write to it from your own user.</p>
<p>Use this command to change the ownership of the directory. Replace “mischa” with your username.</p>
<p><code>sudo chmod mischa:mischa data</code></p>
<p>Verify that the directory now has the correct ownership:</p>
<p><img loading="lazy" src="/steamgames1.png" type="" alt=""  /></p>
<p>Now you can mount your directory, so it is available for use.</p>
<p><code>mount /dev/sdc1 /mnt/data</code></p>
<h1 id="mounting-on-boot">mounting on boot</h1>
<p>For the mount to happen automatically on startup, you’ll need to add it to the /etc/fstab file. We start by finding the UUID of our disk.</p>
<p>Use the following command:</p>
<p><code>ls -al /dev/disk/by-uuid/</code></p>
<p><img loading="lazy" src="/steamgames2.png" type="" alt=""  /></p>
<p>In my case the UUID will be 50d608bc-a7ad-4ff6-bf44-bb6f26efa4f6</p>
<h3 id="etcfstab">/etc/fstab</h3>
<p>open the file in your favorite editor. I like to use vim.</p>
<p><code>sudo vim /etc/fstab</code></p>
<p>Add a new entry to your /etc/fstab file and use the following parameters:</p>
<p><code>UUID=50d608bc-a7ad-4ff6-bf44-bb6f26efa4f6 /mnt/data ext4 defaults 0 0</code></p>
<p><img loading="lazy" src="/steamgames3.png" type="" alt=""  /></p>
<p>Before we go further, verify that we did this correctly by using the following command:</p>
<p><code>findmnt --</code>verify</p>
<p>This will verify the /etc/fstab file. Not meaning to scare you, but an incorrectly configured fstab may lead to an unbootable system.</p>
<p>Now reboot your system and check if your disk is mounted automatically.</p>
<p>It is also a good idea to cd to your mounted directory and touch a file to see if you have write permissions.</p>
<p><img loading="lazy" src="/steamgames4.png" type="" alt=""  /></p>
<h1 id="steam">Steam</h1>
<p>Now it’s time to set things up in Steam. Open Steam and open your settings.</p>
<p><img loading="lazy" src="/steamgames5.png" type="" alt=""  /></p>
<p>go to Downloads –&gt; Steam Library Folders</p>
<p>Click the + button and navigate to your mounted drive.</p>
<p><img loading="lazy" src="/steamgames6.png" type="" alt=""  /></p>
<p>To test, install a game and reboot your system.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Goodbye Windows, Hello Linux! Switching to Linux as my Daily Driver</title>
      <link>https://mischavandenburg.com/goodbye-windows-hello-linux-switching-to-linux-as-my-daily-driver/</link>
      <pubDate>Tue, 26 Apr 2022 06:38:57 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/goodbye-windows-hello-linux-switching-to-linux-as-my-daily-driver/</guid>
      <description>After getting my LPIC-1 certification, my interest in Linux continued to grow. When I started my new job, I performed more sysadmin tasks, such as increasing the size of filesystems or removing backups, and it felt good to put the theory into practice.
I was still using Windows in my personal setup, and I started running into limitations. Finally, I realized how much I appreciated the freedom and control over my system that Linux gave me.</description>
      <content:encoded><![CDATA[<p>After getting my LPIC-1 certification, my interest in Linux continued to grow. When I started my new job, I performed more sysadmin tasks, such as increasing the size of filesystems or removing backups, and it felt good to put the theory into practice.</p>
<p>I was still using Windows in my personal setup, and I started running into limitations. Finally, I realized how much I appreciated the freedom and control over my system that Linux gave me. So I decided I wanted to switch to Linux for my daily operating system. But a few things were holding me back. Will I be able to play my favorite games? Will I run into a lot of problems with my sound and microphone? Are all the apps I need for working from home available on Linux? Can I even edit videos on Linux?</p>
<h2 id="preparing-to-switch">preparing to switch</h2>
<p>I made a dual boot install of Ubuntu to try things out to answer these questions. I started things off by setting small goals for myself. For example, I need to be able to work from home. Which programs do I need? And I started from there.</p>
<p>I had no problems installing Slack, Zoom, Teams, and all the other programs I needed for my work. I was very surprised by how well all of the external hardware worked. My Bluetooth keyboard and mouse worked immediately without needing to install any drivers. Even my USB webcam worked instantly without any problems.</p>
<p>To put this into perspective, I spent an entire afternoon getting my keyboard to work correctly on my MacBook. It needed a lot of extra drivers. Still, there is a 4-second delay when I press my volume up/down keys when working on my MacBook. All of this works perfectly on my Linux OS without any delays and without any drivers or extra configuration.</p>
<p>I kept my dual boot setup for a while as I was trying out different distros, and I eventually ended up with Manjaro as my distro of choice. I like it because it is based on Arch Linux, and it gives you access to the Arch User Repository (AUR). I want to use Arch eventually, and I figured this might be a good stepping stone.</p>
<h2 id="fate-decided-for-me">fate decided for me</h2>
<p>This dual boot setup continued for a while as I was warming up to the idea of completely abandoning Windows. I set Linux as my default boot option, and after a few weeks, I realized I hadn’t needed to boot into Windows for anything at all. However, I still didn’t feel quite ready to switch completely to Linux.</p>
<p>One evening I wanted to make another fresh install to check out the GNOME version of Manjaro. I was doing a lot of chores at the same time, and it was getting quite late, but I wanted to have the installer running as I was doing other tasks. Probably not my most brilliant move.</p>
<p>You probably know what is coming: in between my chores, I started the installation. In a moment of carelessness, I managed to point the installation to my Windows partition, and it was completely wiped and replaced with a sparkling fresh Linux install.</p>
<p>“Well, I guess I am moving to Linux today!” I thought while I suppressed a hint of panic as I racked my brain to see if I had lost any important files. I knew that most of my important stuff was safely backed up in the cloud. But if I had formatted my Windows drive by choice, rather than by accident, I would have backed up a lot more files.</p>
<h2 id="first-week-without-windows">first week without windows</h2>
<p>A week ago, I lost my complete Windows install, but there hasn’t been a single moment where I regretted making the switch. Fortunately, it also seems that I did not lose anything important.</p>
<p>I am learning so much by forcing myself to use Linux as a daily driver. Most things are correctly configured out of the box. But sometimes, you have to do some work to get the configuration you like.</p>
<p>For instance, after installing Steam, I wanted to have the game files located on a different hard disk because my OS SSD is only 256GB. This required me to format my data SSD to an ext4 filesystem and mount it in a folder. I also needed to add it to my /etc/fstab file to make sure that it mounts automatically when I boot my PC.</p>
<p>These tasks have been great practice for the things I need to do on my servers at work, and they will make me approach these tasks with a little more confidence because I have done them before on my personal setup. This is the great advantage of having Linux as a daily driver if you are becoming a DevOps Engineer or Linux System Administrator.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Yadm: Keep Track of Your Precious Dotfiles</title>
      <link>https://mischavandenburg.com/yadm-keep-track-of-your-precious-dotfiles/</link>
      <pubDate>Sat, 02 Apr 2022 09:55:03 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/yadm-keep-track-of-your-precious-dotfiles/</guid>
      <description>This week I learned about yadm: yet another dotfile manager. It is the perfect way to keep track of all your custom configuration files, known as dotfiles.
Even if you have only a little bit of experience with Linux, you know that everything is managed in files. All configuration parameters are set or changed in text files stored on the hard disk. These files are usually located in your home directory and are hidden by default.</description>
      <content:encoded><![CDATA[<p>This week I learned about <a href="https://yadm.io">yadm: yet another dotfile manager</a>. It is the perfect way to keep track of all your custom configuration files, known as dotfiles.</p>
<p>Even if you have only a little bit of experience with Linux, you know that everything is managed in files. All configuration parameters are set or changed in text files stored on the hard disk. These files are usually located in your home directory and are hidden by default. This is indicated by prefixing the file with a period. So the configuration file for the vim editor is .vimrc, and for zshell you use the .zshrc. This is why configuration files are referred to as dotfiles.</p>
<h3 id="customisation">customisation</h3>
<p>The more I work with Linux, the more I appreciate the ability to customize things. When I first started, I was pretty satisfied with the vanilla experience. You punch your commands into the terminal, and you do your tasks. What more could you need?</p>
<p>This started to change when I began working with senior engineers who built their custom setups over the years. I saw them opening 3 terminal windows in a perfect ratio with beautiful colorschemes or previewing files in a file browser directly in vim so they could split them vertically and edit them side by side.</p>
<p>I wanted to create a similar setup by adding settings and plugins to the .vimrc and .zshrc files. However, before going down this rabbit hole, I asked myself the following question. How can I bring this configuration with me to other machines? What happens if my laptop gets stolen and I lose my precious configuration files?</p>
<h3 id="yet-another-dotfile-manager">yet another dotfile manager</h3>
<p>Enter yadm. I had thought of putting my dotfiles in a GitHub repo, but this brings up a whole set of new challenges where you would need to create symbolic links across your system to have the files in their correct places. Yadm solves this problem.</p>
<p>Yadm turns your home directory ( ~/ ) into a Git repo which can be pushed to a host of your choice. You can add your files one by one, and yadm will track them. The best thing is that you can add the files from all over your system, and yadm will not bother with any of the other files in your home directory.</p>
<h3 id="you-want-git-for-your-dotfiles">you want git for your dotfiles</h3>
<p>Setting up your configuration files in a git repository has a lot of advantages:</p>
<ul>
<li>configuration is saved in multiple places</li>
<li>easily share your configuration across machines</li>
<li>version control</li>
</ul>
<p>Version control is especially useful. You will always be able to trace back that one plugin you used a few years ago, but you cannot remember the name of. And it is fun to watch your configuration grow over time.</p>
<h3 id="setting-up-yadm">setting up yadm</h3>
<p><a href="https://yadm.io/docs/install">Installing yadm</a> is a breeze. For my mac I just used</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install yadm
</span></span></code></pre></div><p>or you can use the apt-get or dnf install equivalents if you are on Linux.</p>
<p><strong>You interact with yadm the same way you interact with git. You simply replace the word git with yadm in the commands.</strong></p>
<p>Then you navigate to your home directory and set up the repository. If you don’t have a repository yet:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm init
</span></span><span class="line"><span class="cl">yadm add &lt;important file&gt;
</span></span><span class="line"><span class="cl">yadm commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">yadm remote add origin &lt;url&gt;
</span></span><span class="line"><span class="cl">yadm push -u origin &lt;<span class="nb">local</span> branch&gt;:&lt;remote branch&gt;
</span></span></code></pre></div><p>Or if you already have a dotfiles repository:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm clone &lt;url&gt;
</span></span><span class="line"><span class="cl">yadm status
</span></span></code></pre></div><p>And that’s it. Now add your configuration files and push them to your hosted repo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm add ~/.vimrc 
</span></span><span class="line"><span class="cl">yadm add ~/.zshrc
</span></span><span class="line"><span class="cl">yadm commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">yadm push
</span></span></code></pre></div><p>You will notice that yadm expects you to add all the files every time you want to make a new commit. Use this command to stage all the files you added previously:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yadm add -u
</span></span></code></pre></div><h3 id="enjoy-your-synched-customisation">enjoy your synched customisation</h3>
<p>Having your dotfiles in a GitHub repo makes it easy to set up your preferred settings on a new machine or environment. So install yadm and pull your repo, and off you go!</p>
<p>I hope you will enjoy it as much as I do. Crafting a customized setup takes a lot of time and effort, and now that I finally have an excellent solution to keep track of my files, I am ready to dive into the customization rabbit hole.</p>
<p>Download yadm <a href="https://yadm.io">here.</a> Here you will also find all the necessary information to install and configure your yadm.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>LPIC-1 Study Guide</title>
      <link>https://mischavandenburg.com/lpic-1-study-guide/</link>
      <pubDate>Wed, 16 Mar 2022 21:20:19 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/lpic-1-study-guide/</guid>
      <description>I recently obtained my LPIC-1 certification, and in this blog post, I’ll share the strategy and techniques I used to pass this exam and share my thoughts on the certification. Because I am a Linux novice, the exam was a pretty tough grind for me. This article offers a beginner’s perspective on the LPIC-1 certification. Is the LPIC-1 hard to pass? Keep reading to find out.
Before this certification, I had only a little bit of experience.</description>
      <content:encoded><![CDATA[<p>I recently obtained my LPIC-1 certification, and in this blog post, I’ll share the strategy and techniques I used to pass this exam and share my thoughts on the certification. Because I am a Linux novice, the exam was a pretty tough grind for me. This article offers a beginner’s perspective on the LPIC-1 certification. Is the LPIC-1 hard to pass? Keep reading to find out.</p>
<p>Before this certification, I had only a little bit of experience. I deployed LAMP stacks using Ansible and configured VMs to be able to communicate with each other using only the command line. I also did a “Linux Fundamentals” video training. I could navigate the filesystem, edit text files and work in the terminal, but that was about it.</p>
<p><img loading="lazy" src="/hard.jpg" type="" alt=""  /></p>
<h3 id="is-it-hard">Is it hard?</h3>
<p>For a beginner: yes, it was hard! But if you are a Linux administrator with a few years of experience, these exams probably are not very difficult to pass. However, even if you are experienced, be prepared to do a lot of memorization. Even though the requirements on the website seem very basic and straightforward, when you dig into the study resources, you will soon discover that you need to learn a large host of commands and many of their accompanying parameters. For example, you will need to know what grep -H does precisely, the difference between passwd -l, chage -l, and chage -L, the location of the directory that contains all the timezones, and the directory that contains the printer configurations for CUPS.</p>
<h3 id="the-certification">The certification</h3>
<p>The LPIC-1 certificate requires candidates to pass the LPI 101-500 and 102-500 exams. These exams test the candidates on various subjects, such as file management, boot loaders, networking fundamentals, user and group management, file systems and partitioning, and much more.</p>
<p>Each exam has a 600-page syllabus, so to get your LPIC-1 certification, you need to work through 1200 pages and memorize a few hundred commands and parameters. However, if you work as a Linux sysadmin, you’ll probably know many of these commands and concepts.</p>
<h3 id="study-materials">Study Materials</h3>
<p>I attended a 4-day course that covered both exams. However, because of the large amount of information that needs to be covered, the teacher could only address the subjects on a superficial level. Therefore, I would advise you to be suspicious of any courses that promise to prep you for the exams in 4 days if you are a beginner. I estimate that you need at least double that amount to get some proper explanation of the material.</p>
<h4 id="lpi-syllabus">LPI Syllabus</h4>
<p>After finishing the course, it became clear that I needed a lot of studying to pass the exams. Fortunately, LPI has created a syllabus for each exam. These are available for free on the <a href="https://www.lpi.org/our-certifications/lpic-1-overview">LPI.org website.</a></p>
<h4 id="lpi-practice-exams">LPI Practice Exams</h4>
<p>It is crucial to test your knowledge. This is the resource I used:</p>
<p><a href="https://amzn.to/3KHAkCZ">LPIC-1 Linux Professional Institute Certification Practice Tests: Exam 101-500 and Exam 102-500 </a></p>
<p>If you are a member of O’Reilly’s, you can read the book there. It contains around 90 practice questions for every chapter in the LPI syllabus. The questions test your knowledge in detail and are a great way to determine whether you have fully grasped the material.</p>
<p>However, the book was written in 2019 and contains questions about certain subjects that have since been removed from the exams. So if you suddenly encounter questions that do not seem familiar at all, make sure to double-check that it is actually an exam objective.</p>
<p>Lastly, I used <a href="https://www.udemy.com/share/1029gO3@XonS1Jh2QkFmIV_mN-r8Rbx04vCYiyykPhTpewu5iLZQVNIYMVe4z53YFSxp2tly/">these practice exams on Udemy</a>.</p>
<h3 id="memorization">Memorization</h3>
<p>As I have stated before, the exams require you to do a lot of memorization. Fortunately, we have some tools and techniques available to help us with this task.</p>
<p>The primary tool is Anki. If you are not familiar with it, Anki is a very simple and free program that allows you to create flashcards that you can use to study and test your knowledge. The best thing about Anki is that it implements spaced repetition. You can download and learn more about Anki here: <a href="https://apps.ankiweb.net/">https://apps.ankiweb.net</a></p>
<p>Secondly, I am fond of memory techniques. You can remember things much more quickly by visualizing them in your mind or utilizing techniques such as Memory Palaces or the Method of Loci. If you are interested in learning more about memory techniques, I highly recommend Dr. Anthony Metivier’s <a href="https://www.youtube.com/c/AnthonyMetivierMMM/featured">YouTube channel.</a></p>
<p><img loading="lazy" src="/palace.jpg" type="" alt=""  /></p>
<h3 id="strategy">Strategy</h3>
<p>Here is the strategy that I used to pass the exams:</p>
<ul>
<li>Read through a chapter and take notes.</li>
<li>Make Anki flashcards for all the commands and flags that you do not know yet</li>
<li>Do the exercises at the end of the chapter</li>
<li>Do the practice exam for your chapter from the exam book, which should give you a good indication of how well you have grasped the material.</li>
<li>Make flashcards of all the questions that you answered wrong (trust me, there will be quite a few)</li>
<li>Use Anki to test yourself and memorize all of the commands and exam questions</li>
</ul>
<h3 id="tips">Tips:</h3>
<ul>
<li>Do your Anki reviews every day. On some days I was adding more than 100 new cards, which will lead to a lot of reviews in the coming days</li>
<li>Although the syllabus for exam 101 explained things very well, the 102 syllabus sometimes is very meager in its explanations and you might need to supplement with reading man pages, YouTube videos, and other tutorials. For example, I needed to find quite a bit of supplementary material for chapter 109 Networking Fundamentals.</li>
<li>Ask for help if you don’t understand a certain topic</li>
<li>Don’t think you can get away with skipping a topic. You will be tested on absolutely everything that’s in the syllabus, trust me.</li>
<li>Try doing it together with someone else. I was doing it together with my friend and colleague, and it was extremely useful to be able to share things I struggled with and to discuss things with him to understand them better. Thank you for the good times, Gino!</li>
</ul>
<h3 id="my-thoughts-on-the-certification">My thoughts on the certification</h3>
<p>The subject matter is extensive, and I know my way around Linux much better now. Therefore, if I encounter a problem, I am better positioned to assess where the cause might be and then solve the problem from there. I also feel I have a much better grasp of basic networking concepts, which will prove to be very useful in many situations in my work as a DevOps Engineer.</p>
<p>However, there are also a few drawbacks to this certification. I think there is too much emphasis on memorizing commands and their flags. I think it is not necessary to memorize all of the possible parameters of the chage command because, in the real world, I would take a quick look at the man page to find the parameter that I need. The exams force you to memorize many parameters in a short time, and to be honest, you will probably forget about them very quickly anyway.</p>
<p>But overall, I am pleased and grateful to my employer that I was able to obtain this certification, and it has made me hungry for more, and I am very eager to continue my learning in this domain.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
