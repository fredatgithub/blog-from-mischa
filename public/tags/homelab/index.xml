<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Homelab on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/homelab/</link>
    <description>Recent content in Homelab on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/homelab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Video: Learning Flux and Installing To Homelab</title>
      <link>https://mischavandenburg.com/zet/video-homelab-learning-flux/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-homelab-learning-flux/</guid>
      <description>In this video I set up Flux running in a local cluster on my MacBook by following the getting started guide. Then I learn about how to structure the repo according to Flux methodology. I implement this structure in my homelab repo and deploy flux to my homelab cluster. Then I manage to configure Grafana and the Weave UI to be accessbible via ingress using a custom fake domain.</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/BtuqzsyztBc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>In this video I set up Flux running in a local cluster on my MacBook by following the getting started guide. Then I learn about how to structure the repo according to Flux methodology. I implement this structure in my homelab repo and deploy flux to my homelab cluster. Then I manage to configure Grafana and the Weave UI to be accessbible via ingress using a custom fake domain.</p>
<p>Notes:</p>
<ul>
<li>
<p>kustomization resources live in the cluster</p>
</li>
<li>
<p>source resources also live in the cluster</p>
</li>
<li>
<p>To suspend updates for a kustomization, run the command flux suspend kustomization <!-- raw HTML omitted -->.</p>
</li>
<li>
<p>To resume updates run the command flux resume kustomization <!-- raw HTML omitted -->.</p>
</li>
<li>
<p>use <code>flux reconcile source git podinfo</code> to force a sync, nn waiting</p>
</li>
<li>
<p>love the fact that helm releases are still accessible and visible on the cluster</p>
</li>
<li>
<p>flux is just managing helm for you based on code</p>
</li>
<li>
<p>love the fact that weave dashboard is also part of the cluster manifests</p>
</li>
<li>
<p>learned about Kubernetes controllers</p>
</li>
<li>
<p>an operator is a controller</p>
</li>
<li>
<p>basically everything that enables CRD&rsquo;s to run is a controller</p>
</li>
</ul>
<p>&ldquo;A kubernetes controller is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state&rdquo;</p>
<h2 id="sources">Sources</h2>
<blockquote>
<p>A Source defines the origin of a repository containing the desired state of the system and the requirements to obtain it (e.g. credentials, version selectors). For example, the latest 1.x tag available from a Git repository over SSH.</p>
</blockquote>
<blockquote>
<p>All sources are specified as Custom Resources in a Kubernetes cluster, examples of sources are GitRepository, OCIRepository, HelmRepository and Bucket resources.</p>
</blockquote>
<p><a href="https://fluxcd.io/flux/concepts/#sources">https://fluxcd.io/flux/concepts/#sources</a></p>
<h2 id="weave-ui">Weave UI</h2>
<p>Follow this guide</p>
<p><a href="https://docs.gitops.weave.works/docs/installation/weave-gitops/">https://docs.gitops.weave.works/docs/installation/weave-gitops/</a></p>
<ul>
<li>sources are located in the clusters directory in a monorepo structure</li>
</ul>
<h2 id="repo">Repo</h2>
<p>Decided to fully commit to Flux and their practices.</p>
<p>Set up the repo according to this guide:</p>
<p><a href="https://fluxcd.io/flux/guides/repository-structure/">https://fluxcd.io/flux/guides/repository-structure/</a></p>
<p>And following this example:</p>
<p><a href="https://github.com/fluxcd/flux2-kustomize-helm-example">https://github.com/fluxcd/flux2-kustomize-helm-example</a></p>
<h2 id="links">Links:</h2>
<p>202312261612</p>
<p><a href="https://kubernetes.io/docs/concepts/architecture/controller/">https://kubernetes.io/docs/concepts/architecture/controller/</a></p>
<p><a href="https://youtu.be/BtuqzsyztBc">https://youtu.be/BtuqzsyztBc</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Designed The Network For My Homelab</title>
      <link>https://mischavandenburg.com/zet/homelab-network-design/</link>
      <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/homelab-network-design/</guid>
      <description>My ISP router only allowed me to assign 200 IP addresses and it didn&amp;rsquo;t have any possibility to create VLANS, so it was time for an upgrade to my setup.
Now that I&amp;rsquo;m hosting several clusters in my homelab and exposing things to the internet I can justify to spend the money on this hardware and the complexity of dividing up my home network into VLANS.
I bought a Unifi Express gateway and the Unifi Lite 8 PoE managed switch.</description>
      <content:encoded><![CDATA[<p>My ISP router only allowed me to assign 200 IP addresses and it didn&rsquo;t have any possibility to create VLANS, so it was time for an upgrade to my setup.</p>
<p>Now that I&rsquo;m hosting several clusters in my homelab and exposing things to the internet I can justify to spend the money on this hardware and the complexity of dividing up my home network into VLANS.</p>
<p>I bought a Unifi Express gateway and the Unifi Lite 8 PoE managed switch.</p>
<p>The gateway will function as the main portal to the internet and the WiFi access point. The switch will be located in my pantry where all the devices for my homelab are currently.</p>
<p><img loading="lazy" src="/home-network-design.png" type="" alt=""  /></p>
<h1 id="naming-strategy">Naming Strategy</h1>
<p>I&rsquo;m also going to have some fun with the naming strategy. I love Nordic mythology so I picked that as a theme.</p>
<h2 id="network-name">Network Name:</h2>
<ul>
<li><strong>Asgard</strong>: A reference to the home of the gods in Norse mythology, symbolizing a powerful and central network.</li>
</ul>
<h3 id="vlan-naming-strategy">VLAN Naming Strategy:</h3>
<ol>
<li><strong>Production Kubernetes Cluster</strong>: <code>Valhalla</code> - Named after the majestic hall where heroes reside, representing the strength and importance of the production environment.</li>
<li><strong>Staging Kubernetes Cluster</strong>: <code>Midgard</code> - Midgard, the world of humans in Norse mythology, can symbolize a testing ground that&rsquo;s closer to the &lsquo;real world&rsquo; scenarios.</li>
<li><strong>Main VLAN (Work &amp; Personal Devices)</strong>: <code>Yggdrasil</code> - Named after the great tree that connects all the worlds, symbolizing the connectivity and central role of this VLAN in the network.</li>
<li><strong>IoT VLAN</strong>: <code>Niflheim</code> - The realm of fog and mist, a metaphor for the mysterious and ubiquitous nature of IoT devices.</li>
<li><strong>Guest Network VLAN</strong>: <code>Jotunheim</code> - Inspired by the realm of giants in Norse mythology, this guest network embodies the vastness and mystery of Jotunheim. It&rsquo;s a separate, secure space for visitors, representing the outer layers of my realm.</li>
</ol>
<p><img loading="lazy" src="/jotunheim.png" type="" alt=""  /></p>
<h2 id="why-unifi">Why UniFi?</h2>
<ul>
<li>a colleague of mine has it and is very satisfied with it</li>
<li>saw a few videos of Techno Tim and was very impressed by his setup</li>
<li>looks like a very easy way to manage the network</li>
<li>provides insight into traffic flow</li>
<li>beautiful dashboard and UI</li>
<li>I like ecosystems with good documentation</li>
<li>allows expanding within the same ecosystem</li>
</ul>
<h2 id="links">Links:</h2>
<p>202401130601</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Homelab E2 - Setting Up Monitoring &#43; Studying k3s Networking  &amp; Configuring Ingress</title>
      <link>https://mischavandenburg.com/zet/video-homelab-3-k3s-networking/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-homelab-3-k3s-networking/</guid>
      <description>In this video I installed Prometheus and Grafana using helm and studied k3s networking.
My goal was to make Grafana approachable via ingress using a fake domain and after a bit of tinkering it worked.
installed prometheus and grafana with kube-prometheus-stack helm chart reflected on why I use k3s gained understanding of k3s loadbalancing solution configured /etc/hosts file to resolve to fake domain configured k3s ingress to use fake local domain struggled with ingress but figured it out in the end successfully made grafana UI available on fake local domain grafana.</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/JjIB65CVXAo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>In this video I installed Prometheus and Grafana using helm and studied k3s networking.</p>
<p>My goal was to make Grafana approachable via ingress using a fake domain and after a bit of tinkering it worked.</p>
<ul>
<li>installed prometheus and grafana with kube-prometheus-stack helm chart</li>
<li>reflected on why I use k3s</li>
<li>gained understanding of k3s loadbalancing solution</li>
<li>configured /etc/hosts file to resolve to fake domain</li>
<li>configured k3s ingress to use fake local domain</li>
<li>struggled with ingress but figured it out in the end</li>
<li>successfully made grafana UI available on fake local domain grafana.homelab.nl</li>
</ul>
<h2 id="links">Links:</h2>
<p>202312261012</p>
<p><a href="https://youtu.be/JjIB65CVXAo">https://youtu.be/JjIB65CVXAo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Homelab Episode 1</title>
      <link>https://mischavandenburg.com/zet/homelab-episode-1/</link>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/homelab-episode-1/</guid>
      <description>This is the first video of my homelab series.
I set up the repo for my project and do the initial installation of k3s on an old laptop I had lying around. I had a k8s cluster installed on there with kubeadm which I needed to clean up first.
Links: 202312301912
https://youtu.be/X40gNPZ2xP4
[[homelab]]</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/X40gNPZ2xP4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>This is the first video of my homelab series.</p>
<p>I set up the repo for my project and do the initial installation of k3s on an old laptop I had lying around. I had a k8s cluster installed on there with kubeadm which I needed to clean up first.</p>
<h2 id="links">Links:</h2>
<p>202312301912</p>
<p><a href="https://youtu.be/X40gNPZ2xP4">https://youtu.be/X40gNPZ2xP4</a></p>
<p>[[homelab]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Discovered a simple CLI to backup and upload Grafana dashboards</title>
      <link>https://mischavandenburg.com/zet/grafana-gdg-backup-cli/</link>
      <pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/grafana-gdg-backup-cli/</guid>
      <description>This is a super useful tool to list, download and upload Grafana dashboards as json.
Currently using this to occasionally take extra-extra backups of my Grafana creations
https://software.es.net/gdg/
Links: 202312301612</description>
      <content:encoded><![CDATA[<p>This is a super useful tool to list, download and upload Grafana dashboards as json.</p>
<p>Currently using this to occasionally take extra-extra backups of my Grafana creations</p>
<p><a href="https://software.es.net/gdg/">https://software.es.net/gdg/</a></p>
<h2 id="links">Links:</h2>
<p>202312301612</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Homelab Secret Management With GitOps and Azure Key Vault</title>
      <link>https://mischavandenburg.com/zet/handling-secrets-kubernetes/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/handling-secrets-kubernetes/</guid>
      <description>In this blog post, I want to share with you how I set up secrets management for my home lab. I use my home lab to explore new technologies, but I also try to keep it in line with the practices I would use when setting up environments for clients. I focus on Microsoft Azure and the ecosystem they provide for cloud native applications. Secrets management is an important aspect of any cloud-native application, as it allows you to securely store and access sensitive information such as passwords, tokens and certificates.</description>
      <content:encoded><![CDATA[<p>In this blog post, I want to share with you how I set up secrets management for my <a href="https://github.com/mischavandenburg/homelab/">home lab</a>. I use my home lab to explore new technologies, but I also try to keep it in line with the practices I would use when setting up environments for clients. I focus on Microsoft Azure and the ecosystem they provide for cloud native applications. Secrets management is an important aspect of any cloud-native application, as it allows you to securely store and access sensitive information such as passwords, tokens and certificates.</p>
<p>Since Flux is the integrated solution for GitOps in Azure Kubernetes Service I also adopted it for my home lab. Flux supports and recommends encrypting secrets in git using SOPS, which is a tool that uses asymmetric encryption to protect secrets. This means that you can store encrypted secrets in your git repository and only decrypt them when they are applied to the cluster. This sounds like a convenient and secure way to manage secrets, right?</p>
<p>Well, not quite. After doing some research, I decided to use a different approach: storing my secrets in Azure Key Vault and syncing them to my cluster with the Azure Key Vault Provider. This is the recommended best practice by Microsoft, as explained in this article:</p>
<blockquote>
<p>TLDR: Referencing secrets in an external key vault is the recommended approach. It is easier to orchestrate secret rotation and more scalable with multiple clusters and/or teams.</p>
</blockquote>
<p><a href="https://microsoft.github.io/code-with-engineering-playbook/continuous-delivery/gitops/secret-management/secret-management-gitops/">https://microsoft.github.io/code-with-engineering-playbook/continuous-delivery/gitops/secret-management/secret-management-gitops/</a></p>
<p>SOPS has some drawbacks that made me choose the Azure Key Vault route for my home lab. First of all, SOPS requires you to encrypt each secret value manually in the command line, which can be tedious and error-prone. Secondly, SOPS relies on a single encryption key that is stored in your local machine or in a cloud KMS. If you lose this key, you will lose access to all your encrypted secrets in your Git repo. Thirdly, SOPS does not provide a backup or recovery mechanism for your secrets, nor does it offer fine-grained access control or auditing capabilities.</p>
<p>Here are some of the reasons why I chose this approach over SOPS:</p>
<ul>
<li>Secrets are stored in an external source, which means that they are not exposed in git, even if encrypted.</li>
<li>Azure Key Vault provides backup and recovery features, such as soft delete and restore, which can help in case of accidental deletion or corruption of secrets.</li>
<li>Azure Key Vault allows fine-grained authentication and authorization to the vaults, using Entra ID identities and policies. This means that I can control who can access or modify my secrets, and audit their actions.</li>
<li>I don&rsquo;t need to encrypt or decrypt values in the command line, which can be error-prone or leak information. I can use the Azure CLI or the Azure Portal to manage my secrets in the vault.</li>
<li>If I lose my encryption key, all my encrypted secrets in git are useless with SOPS. With Azure Key Vault, I can still access my secrets using my Entra ID or recover them from backup.</li>
<li>This approach mimics a solution that I would use for an enterprise production environment</li>
</ul>
<p>However, this does not mean that I will not use SOPS at all. Sometimes Helm charts or other configurations need values to be hardcoded due to incorrect implementation. This is where SOPS truly shines. You can safely check in your secret values to source code. Additionally, the SOPS keys can also be stored in Azure Key Vault. Tools should be used where they are most useful, so I&rsquo;m not saying I won&rsquo;t use SOPS at all, but I&rsquo;m choosing Azure Key Vaults and the accompanying CSI Store provider for my main solution.</p>
<h1 id="azure-key-vault-provider">Azure Key Vault Provider</h1>
<p>To sync my secrets from Azure Key Vault to my AKS cluster, I used the Azure Key Vault Provider for Secrets Store CSI Driver. This is an open source project that enables you to mount secrets from external sources (such as Azure Key Vault) as volumes in your pods using the Container Storage Interface (CSI) specification.</p>
<p>I followed <a href="https://azure.github.io/secrets-store-csi-driver-provider-azure/docs/">the provider documentation</a> to install the provider in my local cluster using a Flux HelmRelease.</p>
<p>With the provider installed I can use the following configuration to sync a secret named grafana-admin-password from my Key Vault and make it available as a volume and environment variable in an example busybox pod:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">secrets-store.csi.x-k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">SecretProviderClass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">azure-kv-secrets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">provider</span><span class="p">:</span><span class="w"> </span><span class="l">azure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keyvaultName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mischa-homelab-k8s&#34;</span><span class="w"> </span><span class="c"># the name of the KeyVault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">objects</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      array:
</span></span></span><span class="line"><span class="cl"><span class="sd">        - |
</span></span></span><span class="line"><span class="cl"><span class="sd">          objectName: grafana-admin-password
</span></span></span><span class="line"><span class="cl"><span class="sd">          objectType: secret              # object types: secret, key, or cert</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tenantId</span><span class="p">:</span><span class="w"> </span><span class="l">6ddecc48-41b1-48de-bfde-2efd29fae9c7</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">secretObjects</span><span class="p">:</span><span class="w"> </span><span class="c"># [OPTIONAL] SecretObjects defines the desired state of synced Kubernetes secret objects</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w"> </span><span class="c"># data field to populate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">objectName</span><span class="p">:</span><span class="w"> </span><span class="l">grafana-admin-password</span><span class="w"> </span><span class="c"># name of the mounted content to sync; this could be the object name or the object alias</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">grafana-custom-secret</span><span class="w"> </span><span class="c"># name of the Kubernetes secret object</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w"> </span><span class="c"># type of Kubernetes secret object (for example, Opaque, kubernetes.io/tls)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">busybox-secrets-store-inline</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.k8s.io/e2e-test-images/busybox:1.29-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;/bin/sleep&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;10000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">secrets-store01-inline</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/mnt/secrets-store&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">SECRET_USERNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">grafana-custom-secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">secrets-store01-inline</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">csi</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="l">secrets-store.csi.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumeAttributes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">secretProviderClass</span><span class="p">:</span><span class="w"> </span><span class="l">azure-kv-secrets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">nodePublishSecretRef</span><span class="p">:</span><span class="w"> </span><span class="c"># Only required when using service principal mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">secrets-store-creds</span><span class="w"> </span><span class="c"># Only required when using service principal mode. The name of the Kubernetes secret that contains the service principal credentials to access keyvault.</span><span class="w">
</span></span></span></code></pre></div><p>I hope you found this blog post useful and informative. If you have any questions or feedback, please feel free to leave a comment below or contact me on Twitter @mischa_vdburg</p>
<h2 id="links">Links:</h2>
<p>202312290912</p>
<p><a href="https://microsoft.github.io/code-with-engineering-playbook/continuous-delivery/gitops/secret-management/secret-management-gitops/">https://microsoft.github.io/code-with-engineering-playbook/continuous-delivery/gitops/secret-management/secret-management-gitops/</a></p>
<p><a href="https://github.com/mischavandenburg/homelab/">https://github.com/mischavandenburg/homelab/</a></p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/key-vault/">Azure Key Vault documentation</a></li>
<li><a href="https://fluxcd.io/docs/">Flux documentation</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/aks/csi-secrets-store-driver">Azure Key Vault Provider for Secrets Store CSI Driver documentation</a></li>
</ul>
<p><a href="https://azure.github.io/secrets-store-csi-driver-provider-azure/docs/">https://azure.github.io/secrets-store-csi-driver-provider-azure/docs/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: How To Install Prometheus &amp; Grafana In Your Homelab</title>
      <link>https://mischavandenburg.com/zet/video-install-prometheus-grafana-homelab/</link>
      <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-install-prometheus-grafana-homelab/</guid>
      <description>In this video I&amp;rsquo;ll be installing Prometheus and Grafana in a Kubernetes cluster running in Rancher Desktop on my MacBook.
There are many options available out there but this is the easiest one I found to get up and running quickly.
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm repo update helm install prometheus-stack prometheus-community/kube-prometheus-stack --namespace=prometheus-stack --create-namespace
helm show values prometheus-community/kube-prometheus-stack &amp;gt; prometheus-default-values.yaml
Opening the Grafana UI k port-forward svc/prometheus-stack-grafana 3000:80</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/3AINqaBwOYs" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>In this video I&rsquo;ll be installing Prometheus and Grafana in a Kubernetes cluster running in Rancher Desktop on my MacBook.</p>
<p>There are many options available out there but this is the easiest one I found to get up and running quickly.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
</span></span><span class="line"><span class="cl">helm repo update
</span></span></code></pre></div><p><code>helm install prometheus-stack prometheus-community/kube-prometheus-stack --namespace=prometheus-stack --create-namespace</code></p>
<p><code>helm show values prometheus-community/kube-prometheus-stack &gt; prometheus-default-values.yaml</code></p>
<h2 id="opening-the-grafana-ui">Opening the Grafana UI</h2>
<p><code>k port-forward svc/prometheus-stack-grafana 3000:80</code></p>
<p>Then you can open it by entering <code>localhost:3000</code> in your browser.</p>
<p>The default credentials are admin:prom-operator</p>
<h2 id="links">Links:</h2>
<p>202312250812</p>
<p><a href="https://youtu.be/3AINqaBwOYs?si=maN1rfbg4pzBc3xI">https://youtu.be/3AINqaBwOYs?si=maN1rfbg4pzBc3xI</a></p>
<p><a href="https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#configuration">https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#configuration</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Starting My Homelab</title>
      <link>https://mischavandenburg.com/zet/starting-my-homelab/</link>
      <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/starting-my-homelab/</guid>
      <description>This week I started a project which I&amp;rsquo;ve been putting off for too long. I finally started my homelab. Over the past year I&amp;rsquo;ve been collecting hardware here and there, and I&amp;rsquo;ve had the intention to start up a proper Kubernetes cluster at home. I got inspired by Rob Muhlenstein&amp;rsquo;s Homelab Init playlist on YouTube which I&amp;rsquo;m working on.
There are a few reasons why I haven&amp;rsquo;t started up until now:</description>
      <content:encoded><![CDATA[<p>This week I started a project which I&rsquo;ve been putting off for too long. I finally started my homelab. Over the past year I&rsquo;ve been collecting hardware here and there, and I&rsquo;ve had the intention to start up a proper Kubernetes cluster at home. I got inspired by Rob Muhlenstein&rsquo;s <a href="https://www.youtube.com/playlist?list=PLrK9UeDMcQLpjUGg5z9Z6Un-axVx06-2J">Homelab Init</a> playlist on YouTube which I&rsquo;m working on.</p>
<p>There are a few reasons why I haven&rsquo;t started up until now:</p>
<ul>
<li>Focused on switching jobs and certifications</li>
<li>Not knowing what to run on the cluster</li>
<li>High electricity costs</li>
</ul>
<p>Now that I found a new job with a great employer, I&rsquo;ve changed my focus towards doing more hands-on learning in my free time by learning Go and diving deeper into Cloud Native technology. Energy prices have come down in the meantime as well.</p>
<p>I&rsquo;ve reached a stage in my Go learning journey where I&rsquo;m actually able to start making small deployable applications, and I want an environment where I can do that without high costs or without fearing to break something. I want to learn more about databases on Kubernetes, and I want to start writing small microservices and API&rsquo;s that are able to query these databases.</p>
<p>My lab is going to be my playground, where I can deploy whatever I want and learn the technologies that interest me at that particular moment.</p>
<h1 id="hardware-parts">Hardware: Parts</h1>
<p>For some reason the Raspberry Pi has become synonymous with homelabs. I get that it&rsquo;s fun to run a cluster on something that is not much larger than a 1kg pack of sugar. But I never really caught on to that whole scene yet. Maybe it&rsquo;s because I&rsquo;m a bit late to the party and the Pi&rsquo;s have been scarce and very expensive lately?</p>
<p>In any case, I&rsquo;ve been thankfully accepting old computers that friends were going to get rid of, and I&rsquo;ve been keeping some of my own old hardware as well. I have enough motherboards and other parts to assemble around 3 nodes, which will probably have around 8GB RAM each, but possibilities to attach storage.</p>
<p>This is also what has been keeping me back for a while I think. There is quite a bit of work that I need to do to get these machines going, and probably I&rsquo;ll have to purchase a couple of other parts. However, I also have some functional hardware.</p>
<h2 id="gaming-desktop">Gaming Desktop</h2>
<p>I have an old gaming desktop with 16GB RAM, an Intel 6700K Skylake, 1070 video card and a couple of TB of storage.</p>
<p>This has been my Arch Linux desktop for the past year, but now that I switched to my new MacBook, I&rsquo;m not using it as much. I want to keep it as it is right now, but I could run a few Virtual Machines on there, and maybe consider turning it into a ProxMox server.</p>
<h2 id="old-laptops">Old Laptops</h2>
<p>I have two old laptops. One Asus with 4GB of RAM and a Thinkpad T430 with 8GB RAM. The Thinkpad is actually surprisingly powerful. As a weekend project I installed Arch on it and I fitted it with a refurbished keyboard, and it is a very pleasant machine to work with. However, now that I have a very powerful laptop that I use as a desktop and portable device, it has become redundant.</p>
<h1 id="old-laptops-as-raspberri-pis">Old Laptops as Raspberri Pi&rsquo;s</h1>
<p>Having these two old laptops lying around, it occurred to me that these machines were basically Raspberri Pi&rsquo;s with a large form factor and a higher power usage. Why would I need to spend hundreds of euros on these smaller computers if I could just use these laptops as a starting point for my lab?</p>
<p>Using laptops has the following advantages:</p>
<ul>
<li>No additional costs</li>
<li>No building needed</li>
<li>Easy to install Linux on them</li>
<li>Built-in screen and keyboard for quick access when SSH does not work out</li>
<li>Built-in batteries to handle short power disruptions (rare but possible)</li>
<li>Can get going very quickly</li>
</ul>
<h1 id="choices-and-goals">Choices and Goals</h1>
<h2 id="kubernetes">Kubernetes</h2>
<p>The first goal is to get a Kubernetes cluster running. I will do bare metal kubeadm installs, and later I want to learn more about Talos. Fortunately I feel very comfortable installing Kubernetes with kubeadm. I did plenty of practice for my CKA, and I recently installed it on free Oracle VM&rsquo;s. I&rsquo;ve experimented a bit with K9S earlier, but I want to learn how to maintain on-prem Kubernetes.</p>
<p>My goals is to learn to maintain production-grade clusters properly.</p>
<h2 id="linux">Linux</h2>
<p>Naturally I&rsquo;ll be using Linux as my base OS. After some consideration I chose to use Ubuntu Server 22. Some notes on that choice:</p>
<ul>
<li>I already have years of Ubuntu Server experience</li>
<li>Good to keep building on what I have</li>
<li>Working with managed Kubernetes on my day job requires me to keep Linux admin skills fresh</li>
<li>Still the <a href="https://www.enterpriseappstoday.com/stats/linux-statistics.html">most popular Linux distro</a></li>
<li>Google uses Ubuntu Server</li>
<li>Well documented and plenty of questions on StackOverflow</li>
</ul>
<h2 id="infrastructure-as-code--gitops">Infrastructure as Code &amp; GitOps</h2>
<p>Initially I&rsquo;ll configure the servers by hand, but I want to have the server configuration as code as Ansible playbooks eventually. However, I&rsquo;ll be using ArgoCD for all of my deployments on Kubernetes itself, so the server configuration is only a very small part of the setup. Just get Kubernetes running and do the rest with ArgoCD.</p>
<p>Perhaps I will expand with larger servers that run multiple VM&rsquo;s. Then it will be very relevant to start provisioning these with Ansible.</p>
<h2 id="networking">Networking</h2>
<p>I want to learn more about networking and use static IP addresses for my servers. I need to figure out how my home network works exactly. Surprisingly, I&rsquo;ve never taken the effort to actually know how the devices on my network get their IP addresses and how they communicate, even though I&rsquo;ve learned plenty about it for my day job and do networking in an enterprise environment daily.</p>
<p>For Kubernetes I&rsquo;ll use Flannel to start out with, but I want to learn more about Cilium, Istio and other service mesh implementations.</p>
<p>Another goal is to host my own DNS server for internal name resolution, probably CoreDNS.</p>
<h2 id="deployment">Deployment</h2>
<p>I want to host my own container registry (Harbor) and use Tekton pipelines to for CI/CD, and I&rsquo;m playing with the thought to host my own GitLab instance as well.</p>
<h1 id="lets-go">Let&rsquo;s Go!</h1>
<p>Another realization was that I don&rsquo;t need to have everything figured out before I begin. The beauty of cluster computing is that you can add to it as you go. I can start with a small cluster of two nodes and build it out as my needs grow. I don&rsquo;t expect to need more than a few GB of RAM in the foreseeable future, so these two laptops will be plenty to get going.</p>
<p><img loading="lazy" src="/cluster-laptops.png" type="" alt=""  /></p>
<h2 id="links">Links:</h2>
<p>2023041213</p>
<p>[[homelab]]</p>
<p>[[homelab-network]]</p>
<p>[[linux]]</p>
<p>[[homelab-ubuntu-server]]</p>
<p>[[Kubernetes]]</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
