<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/go/</link>
    <description>Recent content in Go on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 26 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go - Reading from Standard Input Provided by User</title>
      <link>https://mischavandenburg.com/zet/go-reading-stdinput-cmdline/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-reading-stdinput-cmdline/</guid>
      <description>I&amp;rsquo;m working through the &amp;ldquo;greet&amp;rdquo; challenge by rwxrob. It is amazing how such a relatively simple and small challenge can lead down to so many rabbit holes.
The program should take input from the user and print it out. I worked through the challenge together with Rob in his video but I&amp;rsquo;m going to talk (write) myself through these functions to fully understand what&amp;rsquo;s going on.
We have the following function in main.</description>
      <content:encoded><![CDATA[<p>I&rsquo;m working through the &ldquo;greet&rdquo; <a href="https://rwx.gg/lang/cha/">challenge</a> by rwxrob. It is amazing how such a relatively simple and small challenge can lead down to so many rabbit holes.</p>
<p>The program should take input from the user and print it out. I worked through the challenge together with Rob <a href="https://www.youtube.com/watch?v=WMH5ENF_Xvo">in his video</a> but I&rsquo;m going to talk (write) myself through these functions to fully understand what&rsquo;s going on.</p>
<p>We have the following function in main.go:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">name</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello there, what&#39;s your name?&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">internal</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">greet</span><span class="p">.</span><span class="nf">Hi</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>If the number of arguments passed to the program is greater than 1, we set <code>name</code> to a joined string created from the provided arguments. Args[0] would be the path to the program, so we don&rsquo;t want that to be included. As a result, <code>greet mischa</code> will pass <code>mischa</code> to the greet.Hi() function, as defined in greet.go, and print out <code>Hello, mischa</code>.</p>
<p>However, if no arguments are passed to the greet program, discovered in case <code>name</code> is empty, we ask the user for input. We capture the input by <code>os.Stdin</code> and pass it to the <code>ReadLine()</code> function, which is located at internal/readline.go.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// ReadLine takes any io.Reader and returns a trimmed string (initial
</span></span></span><span class="line"><span class="cl"><span class="c1">// and trailing white space) or an empty string and error if any error
</span></span></span><span class="line"><span class="cl"><span class="c1">// is encountered.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadLine</span><span class="p">(</span><span class="nx">in</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">in</span><span class="p">).</span><span class="nf">ReadString</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ReadLine has a parameter <code>in</code> of type io.Reader, which is an interface. Next, we determine that ReadLine should return two values of type string and error. I&rsquo;m saving to learn about interfaces for another day, I&rsquo;m just going to work through this function now.</p>
<p>We assign the output of <code>bufio.NewReader(in).ReadString('\n')</code> to two new variables named <code>out</code> and <code>err</code> using the &ldquo;walrus operator&rdquo; <code>:=</code> which detects the types automatically. We can do it like this because ReadString returns (string, error).</p>
<p>We take the <code>in</code> argument of type <code>io.Reader</code> which was passed to the ReadLine function, which in this case is the <code>io.Stdin</code> that came from our main function, and pass it on to <code>bufio.NewReader(in)</code>. Then we are able to read the string until the newline character <code>\n</code> in the string, and trim off the whitespace from the beginning and the end of the string by calling TrimSpace on the <code>out</code> variable.</p>
<p>Then we return the trimmed string back to our original main function, which will pass it on to the <code>Hi()</code> function.</p>
<p>However, if the <code>bufio.NewReader(in).ReadString('\n')</code> should return an error, it is caught by this code in the main function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span></code></pre></div><p>This is a standard way of handling errors in Go. If the error is anything else than nil, we will print the error and end the function with the return keyword.</p>
<h1 id="thoughts">Thoughts</h1>
<p>I&rsquo;m really glad I took the time to talk / write myself through this program. I think I&rsquo;m going to make a habit of this as I&rsquo;m learning Go. It made everything much clearer when I sat down and traced the arguments from function to function and describing every step in my own words.</p>
<p>I&rsquo;ll post this note in the YouTube comments, maybe somebody will find it useful as well.</p>
<h1 id="links">Links:</h1>
<p>This page goes a lot deeper in what stdin and stdout actually do in this context. Very interesting reading:</p>
<p><a href="https://stackoverflow.com/questions/12363030/read-from-initial-stdin-in-go">https://stackoverflow.com/questions/12363030/read-from-initial-stdin-in-go</a></p>
<p>The code in my repo:</p>
<p><a href="https://github.com/mischavandenburg/go/tree/main/rwxrob/boost2022/challenges/greet">https://github.com/mischavandenburg/go/tree/main/rwxrob/boost2022/challenges/greet</a></p>
<p>[[go]]</p>
<p>[[go-rwxrob]]</p>
<p>[[coding]]</p>
<p>[[functions]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Go - Skillstak Beginner Boost Week 17 and 18 Notes</title>
      <link>https://mischavandenburg.com/zet/go-rwxrob-boost-week-17-18/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-rwxrob-boost-week-17-18/</guid>
      <description>Beginner Boost Week 17 and 18 Notes Link to video
Don&amp;rsquo;t forget to set GOBIN=~/.local/bin, GOPRIVATE, CGO_ENABLED=0 Go Testing - Example Tests func ExampleFoo() { foo() // Output: // Foo } The ExampleFoo indicates the test here. It needs to match the name exactly after Example. But it is capitalized.
It runs that function and will compare the output to what is specified.
It says &amp;ldquo;see if the program generates this output in std out&amp;rdquo;.</description>
      <content:encoded><![CDATA[<h1 id="beginner-boost-week-17-and-18-notes">Beginner Boost Week 17 and 18 Notes</h1>
<p><a href="https://www.youtube.com/watch?v=WMH5ENF_Xvo">Link to video</a></p>
<ul>
<li>Don&rsquo;t forget to set <code>GOBIN=~/.local/bin</code>, <code>GOPRIVATE</code>, <code>CGO_ENABLED=0</code></li>
</ul>
<h1 id="go-testing---example-tests">Go Testing - Example Tests</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ExampleFoo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Output:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Foo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The ExampleFoo indicates the test here. It needs to match the name exactly after Example. But it is capitalized.</p>
<p>It runs that function and will compare the output to what is specified.</p>
<p>It says &ldquo;see if the program generates this output in std out&rdquo;.</p>
<p>These are called example tests.</p>
<p>To export a function the first letter should be a capital. Everything that has a capital as first letter is exported.</p>
<p>When you are writing example tests you are providing readable automatic documentation to your end users.</p>
<p>You can use <code>// Unordered Output</code> if you don&rsquo;t care about the order.</p>
<h2 id="printf">Printf</h2>
<p>use <code>printf %q</code> to see all of the characters. <code>%q</code> escapes all of the invisible characters. So you can see \r or \n for example. This is the only way to check for empty values in Example tests.</p>
<h1 id="how-to-learn-go">How to Learn Go</h1>
<p>Don&rsquo;t go to the books. Stay with the spec, write your own projects, and find one or two or 10 Go projects and study the crap out of them.</p>
<p>Study the code bases. Kind is a good codebase.</p>
<p>Read the Go codebase!</p>
<p><a href="https://youtu.be/9hEnzD-bNy4?t=8467">https://youtu.be/9hEnzD-bNy4?t=8467</a></p>
<p>Read other people&rsquo;s code and see if your code looks like that.</p>
<p>&ldquo;Good artists copy, great artists steal.&rdquo; - quote accredited to Steve Jobs but it has its origin in T.S. Eliot and even further back.</p>
<p><strong>Start with the tests! Read the tests first.</strong></p>
<h1 id="searching-go-documentation">Searching Go Documentation</h1>
<p>Always search for golang when searching on the net. Preferably text based searching.</p>
<p>Then you use <code>go doc os.Stderr</code> - for example.</p>
<h1 id="variable-names">Variable Names</h1>
<p>Long variable names are frowned upon in the Go community. They should be as short as they need to be.</p>
<p>If using in a tight scope, a single letter is fine. In a block two or three characters is more than enough. It distracts from reading the code if they have very long names.</p>
<p>The more remote the variable is, the more descriptive it should be.</p>
<h1 id="the-art-of-coding">The Art of Coding</h1>
<ul>
<li>breaking everything down into small 1 task functions</li>
<li>don&rsquo;t repeat yourself</li>
</ul>
<p>See <a href="#stuttering">stuttering</a></p>
<h1 id="top-level-libraries">Top Level Libraries</h1>
<p>It&rsquo;s not common to make a single utility at a top-level GitHub repo.</p>
<p>It&rsquo;s very likely that you are going to want to reuse code somewhere.</p>
<p>You should start thinking of things as composition. &ldquo;How is this code going to be used by other people&rdquo;.</p>
<p>Go is different than bash: you will use this code elsewhere.</p>
<ul>
<li>What is the function of what I&rsquo;m creating?</li>
<li>Create these as small composable blocks</li>
<li>So you can use them later</li>
</ul>
<h1 id="example-based-testing">Example Based Testing</h1>
<p><a href="https://pkg.go.dev/testing">https://pkg.go.dev/testing</a></p>
<blockquote>
<p>The package also runs and verifies example code. Example functions may include a
concluding line comment that begins with &ldquo;Output:&rdquo; and is compared with the
standard output of the function when the tests are run. (The comparison ignores
leading and trailing space.) These are examples of an example:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ExampleHello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Output: hello
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ExampleSalutations</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;hello, and&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;goodbye&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Output:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// hello, and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// goodbye
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h1 id="searching-information">Searching Information</h1>
<p>Being able to look up information quickly and taking notes about them is just as important as the coding itself.</p>
<h1 id="packages-or-libraries">Packages or Libraries</h1>
<p>You can either have a command, which will be a main package, or you can have an importable library named <!-- raw HTML omitted -->.go. Should have any other name besides main.</p>
<p>You rarely want your top level of your module to be a package.</p>
<p>Convention: cmd directory.</p>
<p>This is specifically for separate commands.</p>
<h2 id="stuttering">Stuttering</h2>
<p><code>greet.Greet()</code> is called stuttering in go. Don&rsquo;t do this.</p>
<h1 id="modules">Modules</h1>
<p>A module can be defined as &ldquo;a GitHub repo with a go.mod&rdquo; in it.</p>
<p>&ldquo;A collection of Go packages stored in a file tree with a go.mod file at its root&rdquo;</p>
<p>The go.mod contains the import path of the module.</p>
<h2 id="what-module-does-greet-belong-to">What Module Does Greet Belong To?</h2>
<p>In the case of our greet command, it belongs to the greet module located at:</p>
<p><code>github.com/mischavandenburg/go/rwxrob/boost2022/challenges/greet</code></p>
<p>Greet has a main package which is part of the greet module.</p>
<p>Now we will add another command with another main package to this module.</p>
<h1 id="cli">CLI</h1>
<p>Stuff that has to do with interacting with the user on the command line should never be in the package library. The package library should be written to be solid no matter what.</p>
<p>The &ldquo;name&rdquo; for our greet program should be able to come to anywhere.</p>
<h1 id="avoid-interactive-input">Avoid Interactive Input</h1>
<p>You generally want to avoid interactive input. Prefer arguments, env variables or file inputs.</p>
<p>If you call your program from another script it will stall if it waits for interactive input.</p>
<p>A good example is forgetting &ldquo;-y&rdquo; when running apt-get.</p>
<p>An interactive story game is a different use case than a CLI tool.</p>
<p>UNIX filters are specifically designed to read input and generate an output based on the input. Here it is expected behaviour to stall if no input is given.</p>
<h1 id="runes">Runes</h1>
<p>A rune is a single Unicode point.</p>
<p>The same people who created Go, created the Unicode standard.</p>
<p>Go has the best Unicode support.</p>
<h1 id="writing-documentation">Writing Documentation</h1>
<p>Convention is to always start with the name of the thing you are documenting. When documenting a function, always start with the function name. For example <code>// ReadLine reads from standard input</code></p>
<p>Use <code>go doc --all</code> to see a print of all the documentation in your package.</p>
<p>The same goes for packages. Always start with &ldquo;Package internal does bla bla&rdquo;</p>
<h1 id="links">Links</h1>
<p>202303261403</p>
<p><a href="https://www.youtube.com/watch?v=WMH5ENF_Xvo">https://www.youtube.com/watch?v=WMH5ENF_Xvo</a></p>
<p>[[go]]</p>
<p>[[coding]]</p>
<p>[[rwxrob]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is the difference between a Go module and a package?</title>
      <link>https://mischavandenburg.com/zet/package-module-go/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/package-module-go/</guid>
      <description>A module is generally associated with a single git repo.
You can have a module with multiple packages, and each package would get its own subdirectory.
You should always name your main file main.go
creating a module Use the go mod init {{your path here}} command to initiate a module.
multiple modules I was running into some trouble with this because I want to have one big repo where I will store all my go projects.</description>
      <content:encoded><![CDATA[<p>A module is generally associated with a single git repo.</p>
<p>You can have a module with multiple packages, and each package would get its own subdirectory.</p>
<p>You should always name your main file main.go</p>
<h2 id="creating-a-module">creating a module</h2>
<p>Use the <code>go mod init {{your path here}}</code> command to initiate a module.</p>
<h2 id="multiple-modules">multiple modules</h2>
<p>I was running into some trouble with this because I want to have one big repo where I will store all my go projects.</p>
<p>My gopls LSP in Neovim would start throwing errors when I added multiple projects in my repo.</p>
<p>The fix is to create a separate directory for each project. For example:</p>
<p>/go/hello/main.go</p>
<p>/go/hi/main.go</p>
<p>Hello and Hi are each separate projects.</p>
<p>Now I enter each of these directories and run <code>go mod init hello</code></p>
<p>I&rsquo;m sure this isn&rsquo;t good practice for production code, but it serves its purpose to collect all my learning code in one place.</p>
<p><a href="https://www.youtube.com/watch?v=9hEnzD-bNy4">https://www.youtube.com/watch?v=9hEnzD-bNy4</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to continuously run a Go file while coding in the terminal</title>
      <link>https://mischavandenburg.com/zet/running-go-on-change/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/running-go-on-change/</guid>
      <description>I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.
You can use this command in a split window to keep running a Go file. It will update when you save the file.
entr -c bash -c &amp;quot;go run main.go&amp;quot; &amp;lt;&amp;lt;&amp;lt; main.go
Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:</description>
      <content:encoded><![CDATA[<p>I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.</p>
<p>You can use this command in a split window to keep running a Go file. It will update when you save the file.</p>
<p><code>entr -c bash -c &quot;go run main.go&quot; &lt;&lt;&lt; main.go</code></p>
<p>Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:</p>
<p><code>find src/ | entr -s 'make'</code></p>
<p>Super handy to see the outcome of your code changes in real time.</p>
<p>To run all the files in the directory, use the following:</p>
<p><code>entr -c bash -c &quot;go run . &quot; &lt; &lt;(find .)</code></p>
<p>I picked this up while going through Rob&rsquo;s Beginner Boost of 2022:</p>
<p><a href="https://youtu.be/kwrN3jbv4sE">https://youtu.be/kwrN3jbv4sE</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Learning Go Day 1: Notes</title>
      <link>https://mischavandenburg.com/zet/go-day-1/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-day-1/</guid>
      <description>The CTO of my new company recommended the Udemy course &amp;ldquo;Go: The Complete Developer&amp;rsquo;s Guide (Golang)&amp;rdquo;. I started today and here are some notes I made.
Hello World in Go We start by writing a Hello World and studying all the elements.
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World!&amp;#34;) } How do we run code? go run main.go runs the program go build main.go compiles it to an executable</description>
      <content:encoded><![CDATA[<p>The CTO of my new company recommended the Udemy course &ldquo;Go: The Complete Developer&rsquo;s Guide (Golang)&rdquo;. I started today and here are some notes I made.</p>
<h1 id="hello-world-in-go">Hello World in Go</h1>
<p>We start by writing a Hello World and studying all the elements.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="how-do-we-run-code">How do we run code?</h3>
<p><code>go run main.go</code> runs the program
<code>go build main.go</code> compiles it to an executable</p>
<h3 id="what-does-package-main-mean">What does package main mean?</h3>
<p><code>package main</code></p>
<p>A package is a collection of common source code files.</p>
<p>One app is a package. If you have multiple files in a folder, such as helper.go or support.go, they should have <code>package main</code> to indicate that they belong to package main.</p>
<p>*Why do we call it main?</p>
<p>There are two types of packages.</p>
<ul>
<li>executable
<ul>
<li>generates file that can be run</li>
</ul>
</li>
<li>reusable
<ul>
<li>used as &ldquo;helpers&rdquo;</li>
<li>reusable logic</li>
</ul>
</li>
</ul>
<p>When you call the package <code>main</code>, you are telling the compiler it needs to be compiled as an executable. If it  has a different name, it won&rsquo;t generate an executable. Main is sacred.</p>
<p>Any other name is a reusable or dependency type package (helper code).</p>
<p>Another important point is that whenever you create an executable package, it must always have a func called &lsquo;main&rsquo;.</p>
<h3 id="what-does-import-fmt-mean">What does import fmt mean?</h3>
<p>The import statement is used to give our package access to code written in another package.  You are saying &ldquo;give access to all code in fmt&rdquo;. Fmt is a standard library package included in Go. Short for format. Used to print out information to the terminal.</p>
<p>Other packages included in the standard library of go are debug, math, encoding, crypto, io.</p>
<p>golang.org/pkg for documentation on standard library packages for Go.</p>
<p>A lot of learning go is learning the standard packages and how they work.</p>
<h3 id="organizing-the-maingo-file">Organizing the main.go file</h3>
<p>It is the same for every go file, just like the code example at the top of the page. Package main, import fmt, and func main.</p>
<h1 id="variable-declarations">variable declarations</h1>
<p><code>var card string = &quot;Ace of Spades&quot;</code></p>
<p>var: we are about to create a new variable</p>
<p>card: name</p>
<p>string = telling the go compiler that only strings will be assigned to this variable</p>
<h3 id="alternatively">Alternatively:</h3>
<p><code>card := &quot;Ace of Spades&quot;</code></p>
<p>Here you are relying on the compiler to figure out what type it is.</p>
<p>Compiler will infer the type.</p>
<p>We only use this := assignment for <strong>new variables</strong></p>
<p>If you want to assign a value to a variable after it is declared, you just do <code>card = &quot;Five of Diamonds&quot;</code></p>
<h3 id="go-types">Go types</h3>
<p>Go is  a statically typed language.</p>
<p>Javascript, python are dynamically typed language. We don&rsquo;t care what value is assigned to a variable.</p>
<p>You always a assign a type to a variable in Go.</p>
<p>Basic go types:</p>
<ul>
<li>bool</li>
<li>string</li>
<li>into</li>
<li>float64 : a number with a decimal after it.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>I started to learn Go!</title>
      <link>https://mischavandenburg.com/zet/start-learning-go/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/start-learning-go/</guid>
      <description>For month&amp;rsquo;s I considered to learn Go, and today I finally started.
I doubted for a long time, because I figured it would be better to dive deeper into Python. However, when I reflected on it, I realized I&amp;rsquo;m able to do the things I want to do in Python. I can create scripts to manipulate data, and I can string different tools and libraries together if I need to. So how deep do I actually need to go as a DevOps Engineer?</description>
      <content:encoded><![CDATA[<p>For month&rsquo;s I considered to learn Go, and today I finally started.</p>
<p>I doubted for a long time, because I figured it would be better to dive deeper into Python. However, when I reflected on it, I realized I&rsquo;m able to do the things I want to do in Python. I can create scripts to manipulate data, and I can string different tools and libraries together if I need to. So how deep do I actually need to go as a DevOps Engineer?</p>
<p>The breakthrough came when I discovered this website: <a href="https://goodfirstissue.dev/language/go">Good First Issue</a>. It&rsquo;s a collection of issues in open source projects which are suitable for people who are starting out. Scrolling through the available projects for Python and Go, I noticed I got a lot more energy from the things I saw in the Go list: Grafana, ArgoCD, Kubernetes. I probably have a long way to go before I can make any meaningful contributions, but my goal is to be able to contribute to open source in the future.</p>
<p>Additionally, I&rsquo;m going to focus my career in the direction of Kubernetes and CNCF, where Go is mostly used.</p>
<p>I have a week off before I start my new job so I&rsquo;m going to spend a few hours a day to get a good start, and when I&rsquo;m working full time again, my plan is to spend at least one pomodoro (25 minutes) a day on Go. Small increments will add up to something big over time.</p>
<p>I created <a href="https://github.com/mischavandenburg/go">a new GitHub repo</a> where I&rsquo;ll be uploading all my practice code and projects.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
