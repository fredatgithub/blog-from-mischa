<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Coding on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/coding/</link>
    <description>Recent content in Coding on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 27 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing Pod Disruption Budgets</title>
      <link>https://mischavandenburg.com/zet/implementing-poddisruptionbudgets/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/implementing-poddisruptionbudgets/</guid>
      <description>When I was doing the first round of AKS cluster upgrades at my current client, I noticed we were running a lot of pods with only 1 replica. I always try to lift my clients to the next level by leveraging Cloud Native technologies as much as possible. I&amp;rsquo;m therefore starting a project to always run applications with multiple replicas.
However, running multiple replicas is not the only necessary improvement here.</description>
      <content:encoded><![CDATA[<p>When I was doing the first round of AKS cluster upgrades at my current client, I noticed we were running a lot of pods with only 1 replica. I always try to lift my clients to the next level by leveraging Cloud Native technologies as much as possible. I&rsquo;m therefore starting a project to always run applications with multiple replicas.</p>
<p>However, running multiple replicas is not the only necessary improvement here. Even though a pod is running with multiple replicas, that does not mean that Kubernetes will always keep them alive. When you do an AKS cluster upgrade, nodes are drained one by one and the pods are moved to a node with the higher k8s version. Technically, when draining a node, Kubernetes could kill both of the pods at the same time if they are running on the same node.</p>
<p>To prevent this we use <a href="https://kubernetes.io/docs/tasks/run-application/configure-pdb/">pod disruption budgets</a></p>
<h1 id="helm">Helm</h1>
<p>We&rsquo;re using a Helm chart to deploy with ArgoCD. I&rsquo;m adding this to the templates directory:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">policy/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PodDisruptionBudget</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pyramid-backend-pdb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">minAvailable</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tier</span><span class="p">:</span><span class="w"> </span><span class="l">backend</span><span class="w">
</span></span></span></code></pre></div><p>I&rsquo;m selecing all the pods that have the label &ldquo;tier: backend&rdquo;.</p>
<p>To verify that I&rsquo;m targeting the right pods, I run:</p>
<p><code>kubectl get pods -l tier=backend</code></p>
<p>Currently my deployment has only two replicas:</p>
<pre tabindex="0"><code>(ins)$ k get deploy
NAME                         READY   UP-TO-DATE   AVAILABLE   AGE
pyramid-deployment-backend   1/1     1            1           297d
</code></pre><p>So when I check my PDB it will show no allowed disruptions.</p>
<pre tabindex="0"><code>(ins)$ k get pdb
NAME                  MIN AVAILABLE   MAX UNAVAILABLE   ALLOWED DISRUPTIONS   AGE
pyramid-backend-pdb   1               N/A               0                     13m
</code></pre><p>This is good, this is the expected behaviour. Kubernetes will now prevent me from draining the node because there are no allowed disruptions.</p>
<p>Then I scale up the deployment:</p>
<pre tabindex="0"><code>(ins)$ k scale deploy --replicas=2 pyramid-deployment-backend
deployment.apps/pyramid-deployment-backend scaled
</code></pre><p>And then I get an allowed disruption of 1:</p>
<pre tabindex="0"><code>(ins)$ k get pdb
NAME                  MIN AVAILABLE   MAX UNAVAILABLE   ALLOWED DISRUPTIONS   AGE
pyramid-backend-pdb   1               N/A               1                     15m
</code></pre><p>With this configuration, Kubernetes will never kill all of the pods simultaneously in case a node needs to be drained. It will make sure that one of the pods keeps running when it is rescheduling pods for an upgrade.</p>
<h2 id="links">Links:</h2>
<p><a href="https://kubernetes.io/docs/tasks/run-application/configure-pdb/">https://kubernetes.io/docs/tasks/run-application/configure-pdb/</a></p>
<p>202311271411</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Test Driven Development for Bicep is In The Works!</title>
      <link>https://mischavandenburg.com/zet/bicep-testing-assertions/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/bicep-testing-assertions/</guid>
      <description>During the Bicep Community Call of July 2023 I was introduced to the new experimental testing framework that the Bicep team is working on. After learning the fundamentals of the Go programming language I saw the value of test driven software development, and it will be an advantageous improvement if we can start applying this methodology to Infrastructure as Code as well.
Test driven software development is a software development practice that involves writing unit tests before writing the actual code, and then refactoring the code to pass the tests.</description>
      <content:encoded><![CDATA[<p>During the <a href="https://youtu.be/UuwhLi-Xe2U">Bicep Community Call of July 2023</a> I was introduced to the new experimental testing framework that the Bicep team is working on. After learning the fundamentals of the Go programming language I saw the value of test driven software development, and it will be an advantageous improvement if we can start applying this methodology to Infrastructure as Code as well.</p>
<p>Test driven software development is a software development practice that involves writing unit tests before writing the actual code, and then refactoring the code to pass the tests. Some of the advantages of test driven software development are:</p>
<ul>
<li>It improves the code quality and design by making it more modular, maintainable, and extensible.</li>
<li>It reduces the number of bugs and defects by catching them early in the development process.</li>
<li>It enhances the documentation of the code by providing a clear specification of what each function or module does.</li>
<li>It increases the productivity and efficiency of the developers by providing immediate feedback and reducing debugging time.</li>
<li>It ensures high test coverage and makes it easier to add new features or refactor the code in the future.</li>
</ul>
<h1 id="enabling-the-bicep-testing-framework">Enabling the Bicep testing framework</h1>
<p>To make the &ldquo;test&rdquo; keyword available in your Bicep editor, you need to enable some experimental features.</p>
<p>If you&rsquo;re using VScode, open or generate your bicepconfig.json file and add the following code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;experimentalFeaturesEnabled&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;testFramework&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;asserts&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Now the &ldquo;test&rdquo; keyword should work.</p>
<p>For more information, check out this link:</p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-config">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-config</a></p>
<h1 id="asserts">Asserts</h1>
<p>The assert keyword will be used to verify output prior to deployment.</p>
<p>Let&rsquo;s say I have this very simple key vault template:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">location</span><span class="w"> </span><span class="nv">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">kv</span><span class="w"> </span><span class="s">&#39;Microsoft.KeyVault/vaults@2023-02-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;mischa-key-vault-138&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;standard&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">family</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;A&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">tenantId</span><span class="p">:</span><span class="w"> </span><span class="nf">subscription</span><span class="p">().</span><span class="nv">tenantId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">enableRbacAuthorization</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">assert</span><span class="w"> </span><span class="nv">kvSKU</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nv">kv</span><span class="p">.</span><span class="nv">sku</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#39;standard&#39;</span><span class="w">
</span></span></span></code></pre></div><p>In this example, the assertion would run before the actual deployment happens, and if the assertion fails, the deployment is stopped. This is of course a rather silly example, but you hopefully get the idea.</p>
<p>Why is this useful? When you are running larger deployments from files that contain a lot of resources, sometimes the deployment will fail halfway through the template because there was some unexpected error, and a lot of time is wasted waiting for the preceding resources to be deployed. In the future we can hopefully use assertions to make sure the output will be as expected at compile time.</p>
<h1 id="unit-tests-in-bicep">Unit Tests in Bicep</h1>
<p>Unit tests are a type of software testing where individual units or components of a software are tested to verify that they work as expected. A unit can be a function, a method, a module, or an object. In the Bicep testing framework, we can run unit tests on resources as well. Unit tests are usually written and run by the developers during the coding phase of the software development process. Unit tests help to improve the quality, design, and documentation of the code, as well as to catch bugs and defects early.</p>
<p>Now I&rsquo;ll provide an example of a unit test in Bicep. Let&rsquo;s say we have this Bicep template for an AKS cluster:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;Name of the AKS cluster&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">clusterName</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;Prefix for deployment&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">prefix</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">aksCluster</span><span class="w"> </span><span class="s">&#39;Microsoft.ContainerService/managedClusters@2023-03-02-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;</span><span class="si">${</span><span class="nv">prefix</span><span class="si">}</span><span class="s">-</span><span class="si">${</span><span class="nv">clusterName</span><span class="si">}</span><span class="s">&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span></code></pre></div><p>To use a simple example, let&rsquo;s say I want to make sure that my cluster name will be as expected. I would write a unit test as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="nv">test</span><span class="w"> </span><span class="nv">testAKS</span><span class="w"> </span><span class="s">&#39;aks.bicep&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">clusterName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;coffee&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">prefix</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;prod&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">assert</span><span class="w"> </span><span class="nv">assertClusterName</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nv">testAKS</span><span class="p">.</span><span class="nv">resources</span><span class="p">.</span><span class="nv">aksCluster</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#39;prod-coffee&#39;</span><span class="w">
</span></span></span></code></pre></div><p>When I run this test.bicep file, it will take the aks.bicep file and feed the &lsquo;coffee&rsquo; and &lsquo;prod&rsquo; parameters to it. My aks.bicep file will create the string from the parameters and output the name. Then, I use the &ldquo;assert&rdquo; keyword to verify that the string is composed according to my expectations.</p>
<p>Note: at the time of writing 2023-08-03, the &ldquo;assert&rdquo; keyword was still not available in Bicep 0.20.4, but there might be a problem with my local configuration which I&rsquo;ve asked the team about.</p>
<h3 id="2023-08-08-update">2023-08-08 update:</h3>
<p>I&rsquo;ve been in touch with the Bicep team and they responded as follows:</p>
<blockquote>
<p>?Regarding your ability to access &ldquo;test&rdquo; but not &ldquo;assert&rdquo;, both key words are still only in a demo phase and not yet intended for customer use. Please hold off on trying them out for now. We will be in touch with folks who have indicated interest through the form and/or on a Community Call when there is a preview available. Thank you for your patience and sorry for any confusion.</p>
</blockquote>
<p>I guess I was a little eager with testing the keywords so soon! 😀 🚀</p>
<h1 id="conclusion">Conclusion</h1>
<p>I believe it will be a great development to apply test driven software development to Infrastructure as Code by implementing a test framework into Bicep. When I&rsquo;m able to use this approach, I would begin with writing all of the tests for the template that I have in mind, and then I can continue to write the Bicep template itself. By using the tests I can become much more productive because I can speed up my development by using tests without having to do what-if deployments which can be rather slow and involve a lot of waiting.</p>
<p>It is great to see how the Bicep language is maturing and how it continues to introduce new features that make the lives of developers easier. I was really stoked about the new .bicepparam files, but I&rsquo;m even more excited by the new testing framework.</p>
<p>However, please note that this is still an experimental feature. I haven&rsquo;t found much other information, and I&rsquo;m not part of the Bicep development community (yet). There might be a chance that this feature isn&rsquo;t implemented at all in the end. That being said, I would love to participate in this community and perhaps I&rsquo;d be able to provide some costumer feedback, and I&rsquo;m currently looking into this and I&rsquo;ve reached out to a few acquaintances.</p>
<h2 id="links">Links:</h2>
<p>202308030808</p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-config">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-config</a></p>
<p><a href="https://youtu.be/UuwhLi-Xe2U">https://youtu.be/UuwhLi-Xe2U</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Deploying MkDocs To Azure Using With Azure DevOps</title>
      <link>https://mischavandenburg.com/zet/video-mkdocs-azure-webapp/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-mkdocs-azure-webapp/</guid>
      <description>In this video, I will walk you through the following steps:
Set up a repo in Azure DevOps with MkDocs files Set up a Static Web App in Azure portal and link it to the repo Configure the Azure DevOps pipeline for MkDocs deployment Configure a custom theme for the website Demonstrate the pull request workflow for updating the docs By the end of this video, you will have a fully functional MkDocs site hosted on Azure Static Web Apps.</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/_-D1Qz6jtEU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>In this video, I will walk you through the following steps:</p>
<ul>
<li>Set up a repo in Azure DevOps with MkDocs files</li>
<li>Set up a Static Web App in Azure portal and link it to the repo</li>
<li>Configure the Azure DevOps pipeline for MkDocs deployment</li>
<li>Configure a custom theme for the website</li>
<li>Demonstrate the pull request workflow for updating the docs</li>
</ul>
<p>By the end of this video, you will have a fully functional MkDocs site hosted on Azure Static Web Apps. You will also learn how to use Azure DevOps and Static Web Apps to collaborate on your documentation projects.</p>
<p>MkDocs is a tool that lets you create beautiful documentation websites from plain text files. You can write your docs in Markdown, a simple and easy-to-use markup language, and MkDocs will convert them into a static HTML site. You can also customize the look and feel of your site with themes and plugins.</p>
<p>Azure Static Web Apps is a service that hosts static web content and serverless APIs. It automatically builds and deploys your web app from a GitHub or Azure DevOps repository. It also provides features such as authentication, authorization, custom domains, and SSL certificates.</p>
<p>Timestamps:</p>
<p>0:00 Intro
0:40 What is MkDocs?
2:00 Set up the repo
5:00 Create web app
9:25 Configure the pipeline
11:30 Adding a few documents
15:25 Adding a custom theme
18:00 Adding docs with a pull request
21:30 Outro</p>
<h2 id="links">Links:</h2>
<p>202307281307</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Deploying AKS Cluster With Azure CNI Using Bicep</title>
      <link>https://mischavandenburg.com/zet/video-deploy-aks-with-azure-cni/</link>
      <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-deploy-aks-with-azure-cni/</guid>
      <description>In this video, I will show you how to use Bicep to deploy a Kubernetes cluster with custom network settings using the Azure CNI.
Azure CNI allows pods to be assigned IP addresses from Azure VNets which allows them to communicate with Azure resources directly through peered networks.
I use Neovim and the Azure CLI for my coding and deployment.
You will learn how to:
Implement dev/test prefix to create multiple clusters with the same template Plan a VNet range for an Azure CNI cluster and be mindful of overlaps Deploy a VNet and subnet for the cluster using Bicep Deploy a cluster with Azure CNI enabled and configure the maximum number of pods per node Validate your Bicep template and troubleshoot errors Explore the results of your deployment in the Azure portal Understand the limitations of Azure CNI and why VNet peering is not supported in my configuration due to overlaps This video is suitable for anyone who wants to learn more about Azure CNI and how to use it in their Kubernetes deployments.</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/_U3HichIJ0Q" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>In this video, I will show you how to use Bicep to deploy a Kubernetes cluster with custom network settings using the Azure CNI.</p>
<p>Azure CNI allows pods to be assigned IP addresses from Azure VNets which allows them to communicate with Azure resources directly through peered networks.</p>
<p>I use Neovim and the Azure CLI for my coding and deployment.</p>
<p>You will learn how to:</p>
<ul>
<li>Implement dev/test prefix to create multiple clusters with the same template</li>
<li>Plan a VNet range for an Azure CNI cluster and be mindful of overlaps</li>
<li>Deploy a VNet and subnet for the cluster using Bicep</li>
<li>Deploy a cluster with Azure CNI enabled and configure the maximum number of pods per node</li>
<li>Validate your Bicep template and troubleshoot errors</li>
<li>Explore the results of your deployment in the Azure portal</li>
<li>Understand the limitations of Azure CNI and why VNet peering is not supported in my configuration due to overlaps</li>
</ul>
<p>This video is suitable for anyone who wants to learn more about Azure CNI and how to use it in their Kubernetes deployments.</p>
<h1 id="excalidraw">Excalidraw</h1>
<p><img loading="lazy" src="/excni.png" type="" alt=""  /></p>
<h1 id="bullet-points">Bullet Points</h1>
<ul>
<li>Introduction to Azure CNI</li>
<li>Implement dev/test prefix</li>
<li>Deploy VNET and one subnet for the cluster</li>
<li>Deploy cluster with Azure CNI enabled</li>
</ul>
<h1 id="vnet-planning">VNet planning</h1>
<p>VNet cidr: 10.108.0.0/16</p>
<p>Subnet cidr:</p>
<p>10.108.0.0/16 - 65,536 addresses</p>
<p>Service cidr 10.0.0.0/16
DNS service ip addres 10.0.0.10</p>
<h2 id="links">Links:</h2>
<p>202307071807</p>
<p><a href="https://youtu.be/_U3HichIJ0Q">https://youtu.be/_U3HichIJ0Q</a></p>
<p><a href="https://learn.microsoft.com/en-us/azure/aks/configure-azure-cni">https://learn.microsoft.com/en-us/azure/aks/configure-azure-cni</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Wrote A Script To Delete All Resource Groups In An Azure Subscription</title>
      <link>https://mischavandenburg.com/zet/script-delete-all-resource-groups/</link>
      <pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/script-delete-all-resource-groups/</guid>
      <description>In the Azure portal you can&amp;rsquo;t select multiple resource groups for deletion.
I have a sponsored subscription to play around in which I sometimes wish to clean completely.
I wrote this script to delete all resource groups using bash.
#!/bin/bash # script to delete all resource groups in a subscription using Azure CLI # get the current subscription name to confirm subscription=$(az account show --query name -o tsv) echo &amp;#34;Use this script with caution!</description>
      <content:encoded><![CDATA[<p>In the Azure portal you can&rsquo;t select multiple resource groups for deletion.</p>
<p>I have a sponsored subscription to play around in which I sometimes wish to clean completely.</p>
<p>I wrote this script to delete all resource groups using bash.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># script to delete all resource groups in a subscription using Azure CLI</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get the current subscription name to confirm</span>
</span></span><span class="line"><span class="cl"><span class="nv">subscription</span><span class="o">=</span><span class="k">$(</span>az account show --query name -o tsv<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Use this script with caution!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;You are about to delete all resource groups in the subscription: </span><span class="nv">$subscription</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prompt for confirmation</span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> -p <span class="s2">&#34;Are you sure? (y/n) &#34;</span> will_delete
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="nv">$will_delete</span> <span class="o">==</span> <span class="o">[</span>Yy<span class="o">]</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">	<span class="nb">echo</span> <span class="s2">&#34;Deleting resource groups...&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nv">groups</span><span class="o">=</span><span class="k">$(</span>az group list --query <span class="s2">&#34;[].name&#34;</span> -o tsv<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"># Loop through each group name and delete it</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> group in <span class="nv">$groups</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">		az group delete --name <span class="s2">&#34;</span><span class="nv">$group</span><span class="s2">&#34;</span> --yes --no-wait
</span></span><span class="line"><span class="cl">	<span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">echo</span> <span class="s2">&#34;All resource groups have been deleted.&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nb">exit</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Exiting without deleting any resource groups.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Probably wise.&#34;</span>
</span></span></code></pre></div><h2 id="links">Links:</h2>
<p>202307081507</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How To Generate Random Strings In Bicep</title>
      <link>https://mischavandenburg.com/zet/bicep-random-strings/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/bicep-random-strings/</guid>
      <description>In this video I explain how to generate random strings in Bicep and demonstrate a couple of deployments.
I use the uniqueString function combined with the utcNow function. But the caveat is that you can only use it as a default value for a parameter, as follows:
param keyVaultName string = &#39;key-vault-${uniqueString(resourceGroup().id, utcNow())}&#39;
uniqueString() doesn&amp;rsquo;t really generate a unique string. It is a hash function which generates a 13 character string based on the input you give it.</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/n9MRNnAJjZY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>In this video I explain how to generate random strings in Bicep and demonstrate a couple of deployments.</p>
<p>I use the uniqueString function combined with the utcNow function. But the caveat is that you can only use it as a default value for a parameter, as follows:</p>
<p><code>param keyVaultName string = 'key-vault-${uniqueString(resourceGroup().id, utcNow())}'</code></p>
<p><code>uniqueString()</code> doesn&rsquo;t really generate a unique string. It is a hash function which generates a 13 character string based on the input you give it. so <code>uniqueString('coffee')</code> will always have the same output.</p>
<p>To generate a truly unique string, you pass in the <code>utcNow()</code> function which generates a UNIX timestamp. However, Bicep does not allow you to use this function everywhere. It may only be used as a default value for a parameter.</p>
<h2 id="links">Links:</h2>
<p>202307022107</p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-functions-string#uniquestring">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-functions-string#uniquestring</a></p>
<p>[[bicep]]
[[coding]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Finishing Pipeline Setup  &amp; Working on KeyVault Template - Azure Kubernetes Lab Series</title>
      <link>https://mischavandenburg.com/zet/video-finish-pipeline-setup-aks-series/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-finish-pipeline-setup-aks-series/</guid>
      <description>Finish deploying keyvault using pipeline Get the random name generation to work Lessons Learned Subscriptions need to be registered with resource providers, apparently https://learn.microsoft.com/en-us/azure/azure-resource-manager/troubleshooting/error-register-resource-provider?tabs=azure-cli
acccesPolicies are mandatory on KeyVaults, but not when RBAC is enabled Assign contributor role to Azure DevOps service connection to be able to create resource groups from pipeline Achieved Setting up connection between pipeline and Azure subscription Assign correct rights to the service connection so it is allowed to deploy new resource groups (and other resources) Learned about provider registrations Made progress on creating unique names for resources Successfully deployed new resource group and key vault from the pipeline Next time: Look into random string creation with utcNow</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/eooZ3OHl5Mc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<ul>
<li>Finish deploying keyvault using pipeline</li>
<li>Get the random name generation to work</li>
</ul>
<h1 id="lessons-learned">Lessons Learned</h1>
<ul>
<li>Subscriptions need to be registered with resource providers, apparently</li>
</ul>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/troubleshooting/error-register-resource-provider?tabs=azure-cli">https://learn.microsoft.com/en-us/azure/azure-resource-manager/troubleshooting/error-register-resource-provider?tabs=azure-cli</a></p>
<ul>
<li>acccesPolicies are mandatory on KeyVaults, but not when RBAC is enabled</li>
<li>Assign contributor role to Azure DevOps service connection to be able to create resource groups from pipeline</li>
</ul>
<h1 id="achieved">Achieved</h1>
<ul>
<li>Setting up connection between pipeline and Azure subscription</li>
<li>Assign correct rights to the service connection so it is allowed to deploy new resource groups (and other resources)</li>
<li>Learned about provider registrations</li>
<li>Made progress on creating unique names for resources</li>
<li>Successfully deployed new resource group and key vault from the pipeline</li>
</ul>
<h1 id="next-time">Next time:</h1>
<p>Look into random string creation with utcNow</p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-functions-date#utcnow">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-functions-date#utcnow</a></p>
<p>or newGuid</p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-functions-string#newguid">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-functions-string#newguid</a></p>
<p>Links:</p>
<p>202306281806</p>
<h2 id="links">Links:</h2>
<p>202306302206</p>
<p><a href="https://youtu.be/eooZ3OHl5Mc">https://youtu.be/eooZ3OHl5Mc</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Setting Up A Simple Azure Pipeline To Deploy A Keyvault</title>
      <link>https://mischavandenburg.com/zet/video-aks-lab-pipeline-first-setup/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-aks-lab-pipeline-first-setup/</guid>
      <description>Write KeyVault template Write pipeline code set up Azure DevOps pipeline Lessons Learned Always make sure to use az deployment group instead of az group deployment Because it has older Bicep version and will be deprecated Make sure to be in correct Directory to be able to sync subscriptions for service connection Links: 202306302206
https://youtu.be/WnA8V3uq7P8</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/WnA8V3uq7P8" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<ul>
<li>Write KeyVault template</li>
<li>Write pipeline code</li>
<li>set up Azure DevOps pipeline</li>
</ul>
<h1 id="lessons-learned">Lessons Learned</h1>
<ul>
<li>Always make sure to use <code>az deployment group</code> instead of <code>az group deployment</code></li>
<li>Because it has older Bicep version and will be deprecated</li>
<li>Make sure to be in correct Directory to be able to sync subscriptions for service connection</li>
</ul>
<h2 id="links">Links:</h2>
<p>202306302206</p>
<p><a href="https://youtu.be/WnA8V3uq7P8">https://youtu.be/WnA8V3uq7P8</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Deploying an AKS Cluster with Bicep, GitHub Copilot and Neovim</title>
      <link>https://mischavandenburg.com/zet/video-deploying-aks-cluster-bicep-github-copilot/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-deploying-aks-cluster-bicep-github-copilot/</guid>
      <description>Inspired by a GitHub Copilot demonstration I witnessed at Microsoft, I wanted to see how quickly I could deploy an AKS cluster from Neovim with Bicep using Copilot. I wasn&amp;rsquo;t disappointed!
Links: 202306271706
https://www.youtube.com/watch?v=l0B65FUfNBU
[[aks]] [[kubernetes]] [[neovim]] [[bicep]] [[coding]]</description>
      <content:encoded><![CDATA[<p>Inspired by a GitHub Copilot demonstration I witnessed at Microsoft, I wanted to see how quickly I could deploy an AKS cluster from Neovim with Bicep using Copilot. I wasn&rsquo;t disappointed!</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/l0B65FUfNBU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="links">Links:</h2>
<p>202306271706</p>
<p><a href="https://www.youtube.com/watch?v=l0B65FUfNBU">https://www.youtube.com/watch?v=l0B65FUfNBU</a></p>
<p>[[aks]]
[[kubernetes]]
[[neovim]]
[[bicep]]
[[coding]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Introducing New Bicep Parameter Files - .bicepparam - No more JSON!</title>
      <link>https://mischavandenburg.com/zet/video-bicep-bicepparam/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-bicep-bicepparam/</guid>
      <description>The new parameter files use bicep style formatting instead of JSON, and they will make the lives of Cloud Engineers a lot easier. They have the following advantages:
More readable and editor friendly Cleaner and less lines of code VSCode integration Quickly convert from JSON or template file using VSCode In this video I introduce these new files. I go over the new formatting, and I also introduce the new features in VSCode for the .</description>
      <content:encoded><![CDATA[<p>The new parameter files use bicep style formatting instead of JSON, and they will make the lives of Cloud Engineers a lot easier. They have the following advantages:</p>
<ul>
<li>More readable and editor friendly</li>
<li>Cleaner and less lines of code</li>
<li>VSCode integration</li>
<li>Quickly convert from JSON or template file using VSCode</li>
</ul>
<p>In this video I introduce these new files. I go over the new formatting, and I also introduce the new features in VSCode for the .bicepparam files.</p>
<p>Yes, you read that right, you&rsquo;ll be seeing a hardcore vim user switch to VSCode for this particular task!</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/6Gav1JpGAzo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="links">Links:</h2>
<p>202306271706</p>
<p><a href="https://youtu.be/6Gav1JpGAzo">https://youtu.be/6Gav1JpGAzo</a></p>
<p><a href="https://github.com/Azure/bicep/releases/tag/v0.18.4">https://github.com/Azure/bicep/releases/tag/v0.18.4</a></p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files?tabs=Bicep">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files?tabs=Bicep</a></p>
<p><a href="https://github.com/mischavandenburg/lab/tree/main/bicep/keyvault-parameters">https://github.com/mischavandenburg/lab/tree/main/bicep/keyvault-parameters</a></p>
<p>[[AKS]]
[[bicep]]
[[coding]]
[[kubernetes]]
[[azure]]
[[neovim]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How To Get The Id Of An Existing Subnet In Bicep</title>
      <link>https://mischavandenburg.com/zet/bicep-getting-subnet-id/</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/bicep-getting-subnet-id/</guid>
      <description>Did a refactor of some of our Bicep template code for our AKS clusters today.
Before, we were using a rather complicated line of code using string interpolation.
var vnetSubnetId = &amp;#39;${resourceId(vnetResourceGroupName, &amp;#39;Microsoft.Network/virtualNetworks&amp;#39;, vnetName)}/subnets/${vnetSubnetName}&amp;#39; This was hard to read and the Bicep linter gave the following warning in my editor and during deployment:
WARNING: D:\a\1\a\drop\Generic-templates\containers\azure-kubernetes-service\v4.0\templates\aks.bicep(117,7) : Warning use-resource-id-functions: If property &amp;ldquo;vnetSubnetID&amp;rdquo; represents a resource ID, it must use a symbolic resource reference, be a parameter or start with one of these functions: extensionResourceId, guid, if, reference, resourceId, subscription, subscriptionResourceId, tenantResourceId.</description>
      <content:encoded><![CDATA[<p>Did a refactor of some of our Bicep template code for our AKS clusters today.</p>
<p>Before, we were using a rather complicated line of code using string interpolation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span><span class="nv">vnetSubnetId</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="s">&#39;</span><span class="si">${</span><span class="nf">resourceId</span><span class="p">(</span><span class="nv">vnetResourceGroupName</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;Microsoft.Network/virtualNetworks&#39;</span><span class="p">,</span><span class="w"> </span><span class="nv">vnetName</span><span class="p">)</span><span class="si">}</span><span class="s">/subnets/</span><span class="si">${</span><span class="nv">vnetSubnetName</span><span class="si">}</span><span class="s">&#39;</span><span class="w">
</span></span></span></code></pre></div><p>This was hard to read and the Bicep linter gave the following warning in my editor and during deployment:</p>
<p>WARNING: D:\a\1\a\drop\Generic-templates\containers\azure-kubernetes-service\v4.0\templates\aks.bicep(117,7) : Warning use-resource-id-functions: If property &ldquo;vnetSubnetID&rdquo; represents a resource ID, it must use a symbolic resource reference, be a parameter or start with one of these functions: extensionResourceId, guid, if, reference, resourceId, subscription, subscriptionResourceId, tenantResourceId. Found nonconforming expression at vnetSubnetID -&gt; vnetSubnetId [https://aka.ms/bicep/linter/use-resource-id-functions]</p>
<h2 id="using-existing-resources">Using Existing Resources</h2>
<p>After some experimentation I managed to fix it as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;Virtual Network name&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">vnetName</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;Virtual Network resource group name&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">vnetResourceGroupName</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;Virtual Network subnet name&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">vnetSubnetName</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Import the existing vnet and subnet to get the subnet id for deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">vnet</span><span class="w"> </span><span class="s">&#39;Microsoft.Network/virtualNetworks@2022-11-01&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">vnetName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">scope</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">(</span><span class="nv">vnetResourceGroupName</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">subnet</span><span class="w"> </span><span class="s">&#39;Microsoft.Network/virtualNetworks/subnets@2022-11-01&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">vnetSubnetName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">parent</span><span class="p">:</span><span class="w"> </span><span class="nv">vnet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Interestingly, subnets are not actually a resource in Azure. When you open a Resource Group, it will not be listed under resources. However, they do get a resource id. This posed a challenge, but I solved it by importing the existing VNet as well and setting it as the parent of the subnet.</p>
<p>Now I can access the subnet id by using <code>subnet.id</code>. I need this later when deploying the AKS cluster itself.</p>
<h2 id="links">Links:</h2>
<p>202306231206</p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/existing-resource">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/existing-resource</a></p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/linter-rule-use-resource-id-functions">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/linter-rule-use-resource-id-functions</a></p>
<p>[[bicep]]
[[coding]]
[[azure]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: How I Write &amp; Publish My Blog Using Neovim &amp; Hugo From The Command Line</title>
      <link>https://mischavandenburg.com/zet/blogging-from-command-line/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/blogging-from-command-line/</guid>
      <description>I show my workflow to publish my Hugo blog from the command line using neovim and bash
Links: 202305091705</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/bzkrmkGDQJA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>I show my workflow to publish my Hugo blog from the command line using neovim and bash</p>
<h2 id="links">Links:</h2>
<p>202305091705</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Creating A Command To Change Fontsize in Alacritty</title>
      <link>https://mischavandenburg.com/zet/video-custom-fontsize-command/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-custom-fontsize-command/</guid>
      <description>Links: 202305070805
https://youtu.be/Q8dxoqqMHAg</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Q8dxoqqMHAg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="links">Links:</h2>
<p>202305070805</p>
<p><a href="https://youtu.be/Q8dxoqqMHAg">https://youtu.be/Q8dxoqqMHAg</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>The Ups And Downs Of A Devops Engineer</title>
      <link>https://mischavandenburg.com/zet/ups-and-downs-of-devops-engineer/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/ups-and-downs-of-devops-engineer/</guid>
      <description>Next winter I&amp;rsquo;ll be entering my third year as a DevOps Engineer. When you first break into this field there is an overwhelming amount of things to learn. Frankly, this will always be the case. But I&amp;rsquo;m reaching a point where I have gained experience with most of the main areas and tooling, and I can start seeing the relations between them and how they compare to one another.
Just like any other job or activity, there are things that you like and that suit you well, and there are things that you don&amp;rsquo;t like.</description>
      <content:encoded><![CDATA[<p>Next winter I&rsquo;ll be entering my third year as a DevOps Engineer. When you first break into this field there is an overwhelming amount of things to learn. Frankly, this will always be the case. But I&rsquo;m reaching a point where I have gained experience with most of the main areas and tooling, and I can start seeing the relations between them and how they compare to one another.</p>
<p>Just like any other job or activity, there are things that you like and that suit you well, and there are things that you don&rsquo;t like. And now the first phases of overwhelm are confidently behind me, I&rsquo;m starting to learn the things I prefer doing over others.</p>
<p>Being a DevOps Engineer does not mean you get to write code all day. I&rsquo;m currently working in an organization where we&rsquo;re not working fully DevOps yet. Rather than deploying many times in small increments, we are still using patching windows. Managing infrastructure in this way means you&rsquo;ll need to communicate with teams to schedule the patching and submit changes to the approval board. It can involve a lot of emailing and talking back and forth. And sometimes things go wrong and everything needs to be rescheduled again. Although it is valuable experience, and I certainly have the communication skills to handle these kinds of situations, I&rsquo;m learning that I lean more towards the dev side of things.</p>
<p>Today was a fun day at work. I&rsquo;ve been working on a PR for a while whenever I wasn&rsquo;t required to work on tickets. The PR involved refactoring a Bicep template for our Azure Key Vault deployments, which were using parameter files with a lot of repeated code. After getting a lot of good feedback on my code changes, and submitting it for review multiple times, it was finally approved and I could get to work.</p>
<p>I used bash, jq and vim to clean up the parameter files for each workload and submitted PRs. My colleague, who helped me with the PR&rsquo;s, was standing by and ready to approve them as soon as I submitted them. Some pipelines ran into some trouble and required a few more PR&rsquo;s to fix, and there was a bit of pressure because we needed to get the pipelines working before any other changes needed to be deployed the next day.</p>
<p>By working together like this we managed to clean up 2850 lines of code in one day and it was a great feeling to get this job done. I had been working on this for a couple of weeks and it&rsquo;s so satisfying to move that ticket status to &ldquo;done&rdquo;.</p>
<p>I really enjoy the coding! And I really enjoy working with Infrastructure as Code! Somehow it really gives me a lot of pleasure knowing that the code I&rsquo;m writing will be transformed to running infrastructure after it is submitted. I love writing programs in my free time as well, but there is just something magical seeing your parameter file being turned into a functional Kubernetes cluster or Key Vault.</p>
<p>Working as a DevOps Engineer, I&rsquo;m generally having so much fun. I really enjoyed myself when I was learning jq and used scripts to change hundreds of lines of code at a time and submitting them as a PR. And some days, the work is less enjoyable, but it is all part of the job. It all serves to deliver value to the end customer, and if I can have fun most of the time while delivering value, I know I&rsquo;m in the right place.</p>
<p>In any case, there hasn&rsquo;t been a second during these past two years where I regretted my choice of becoming a DevOps Engineer. I love my job, I found my passion in my work, and I&rsquo;m so excited for the future. Cloud computing is never standing still, Kubernetes is starting to become more and more popular, and my skills grow with every day that passes.</p>
<p>I&rsquo;m a happy camper.</p>
<h2 id="links">Links:</h2>
<p>202305042005</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Structs In Go - Similar To Classes In Python?</title>
      <link>https://mischavandenburg.com/zet/go-struct-python-class/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-struct-python-class/</guid>
      <description>The Tour of Go is very clear:
Go does not have classes.
One benefit of learning multiple programming languages is that each language provides you with a set of “pegs” that you can use to refer to other languages. As I learned about structs in Go, I hung them to the “Python classes” peg and used that as a reference point. Using these reference points can help you to understand the object of study by looking at their differences and similarities.</description>
      <content:encoded><![CDATA[<p>The Tour of Go is very clear:</p>
<blockquote>
<p>Go does not have classes.</p>
</blockquote>
<p>One benefit of learning multiple programming languages is that each language provides you with a set of “pegs” that you can use to refer to other languages. As I learned about structs in Go, I hung them to the “Python classes” peg and used that as a reference point. Using these reference points can help you to understand the object of study by looking at their differences and similarities.</p>
<p>Even though Go does not have classes, my understanding of Python classes did help me to understand structs much more quickly.</p>
<h1 id="go-structs">Go Structs</h1>
<p>A struct is a collection of fields, and they are accessed using a dot.</p>
<p>Each data field in a struct has its own type, either user defined or built in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nx">name</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl"> <span class="nx">address</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">person1</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&#34;Mischa&#34;</span><span class="p">,</span> <span class="s">&#34;Amsterdam&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">address</span><span class="p">)</span>
</span></span></code></pre></div><p>When creating a struct, you can use the <code>Name:</code> syntax to set the values. Otherwise, you need to populate the fields in order.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Computer</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">os</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="nx">ram</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">macBook</span> <span class="o">:=</span> <span class="nx">Computer</span><span class="p">{</span><span class="nx">os</span><span class="p">:</span> <span class="s">&#34;MacOs&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">macBook</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">thinkPad</span> <span class="o">:=</span> <span class="nx">Computer</span><span class="p">{</span><span class="s">&#34;Arch Linux&#34;</span><span class="p">,</span> <span class="mi">16</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">thinkPad</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This produces the output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="p">{</span><span class="nx">MacOs</span> <span class="mi">0</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="nx">Arch</span> <span class="nx">Linux</span> <span class="mi">16</span><span class="p">}</span>
</span></span></code></pre></div><p>In the first line, the ram is 0 because I only set the <code>os</code> field, and unset fields get a <code>0</code> value by default.</p>
<h1 id="struct-methods">Struct Methods</h1>
<p>Classes in Python can contain methods. What about Go structs?</p>
<p>Structs can have methods, but they are not contained in the struct definition, like you would see in Python. Methods are defined on types, and the type does not need to be a struct. Therefore, methods are defined after you create the struct.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Computer</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">os</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="nx">ram</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Computer</span><span class="p">)</span> <span class="nf">doubleRam</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;If you would double your ram, you would have %v GB of ram.&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">ram</span>  <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">macBook</span> <span class="o">:=</span> <span class="nx">Computer</span><span class="p">{</span><span class="s">&#34;MacOs&#34;</span><span class="p">,</span> <span class="mi">32</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">macBook</span><span class="p">.</span><span class="nf">doubleRam</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Output:</p>
<p><code>If you would double your ram, you would have 64 GB of ram.</code></p>
<p>In this example, <code>doubleRam()</code> is my method of the <code>Computer</code> type. Methods take a special receiver argument, written between the <code>func</code> keyword and the method name. The <code>doubleRam</code> method has a receiver of type <code>Computer</code>, named <code>c</code>.</p>
<h1 id="struct-literal">Struct Literal</h1>
<p>A struct literal is a struct which has its contents defined in the source code itself. The opposite would be to generate the contents of the struct through computation or reading memory during the execution of the program.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In conclusion, here are the similarities and differences that stood out to me in this morning&rsquo;s study of Go structs.</p>
<h2 id="similarities">Similarities</h2>
<ul>
<li>Both can have fields to hold values of different types</li>
<li>Both can have methods</li>
</ul>
<h2 id="differences">Differences</h2>
<ul>
<li>Go structs are used for data structures, classes in Python are used for OOP</li>
<li>Go struct fields have static types</li>
<li>Methods are defined separately from the struct definition</li>
</ul>
<h1 id="links">Links:</h1>
<p>202304100704</p>
<p>[[go]]</p>
<p>[[data-types]]</p>
<p><a href="https://go.dev/tour/moretypes/2">https://go.dev/tour/moretypes/2</a></p>
<p><a href="https://go.dev/tour/methods/1">https://go.dev/tour/methods/1</a></p>
<p><a href="https://articles.wesionary.team/map-vs-struct-in-golang-when-to-use-b0b66446627a">https://articles.wesionary.team/map-vs-struct-in-golang-when-to-use-b0b66446627a</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Use The %q Verb When Debugging In Go</title>
      <link>https://mischavandenburg.com/zet/go-use-q-for-debugging/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-use-q-for-debugging/</guid>
      <description>I&amp;rsquo;m working on my twitter CLI and as I was writing a function to format the tweet I remembered something I picked up last week. After a quick search in my notes I remembered to use the %q with printf.
slice := []string{feed.Items[0].Title, feed.Items[0].Link} result := strings.Join(slice, &amp;#34;\n&amp;#34;) fmt.Printf(&amp;#34;Testing printf %q&amp;#34;, result) This is very useful when formatting output. Now I can actually see whether it is inserting the new line characters correctly:</description>
      <content:encoded><![CDATA[<p>I&rsquo;m working on my twitter CLI and as I was writing a function to format the tweet I remembered something I picked up last week. After a quick search in my notes I remembered to use the <code>%q</code> with printf.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">slice</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">feed</span><span class="p">.</span><span class="nx">Items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Title</span><span class="p">,</span> <span class="nx">feed</span><span class="p">.</span><span class="nx">Items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Link</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">result</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">slice</span><span class="p">,</span> <span class="s">&#34;\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Testing printf %q&#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
</span></span></code></pre></div><p>This is very useful when formatting output. Now I can actually see whether it is inserting the new line characters correctly:</p>
<p><code>Testing printf &quot;I Made My First Tweet Using My Go Program\nhttps://mischavandenburg.com/zet/go-first-tweet/&quot;I Made My First Tweet Using My Go Program</code></p>
<p>This can be harder to see when printing the variable using <code>fmt.Println</code> or using the <code>%v</code> verb with <code>Printf</code>.</p>
<h2 id="links">Links:</h2>
<p>202304091304</p>
<p>[[go]]</p>
<p>[[coding]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>I Made My First Tweet Using My Go Program</title>
      <link>https://mischavandenburg.com/zet/go-first-tweet/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-first-tweet/</guid>
      <description>I spent the evening learning about the Twitter API. It was not as straight forward as I thought. My goal was to do this project using only the standard library, and I hoped to get away with a few simple curls, but since the API requires OAuth 1 to create tweets, I had to revise my strategy.
After struggling with Postman for a few hours to get the correct environment variables set up I managed to make my first tweet through Postman.</description>
      <content:encoded><![CDATA[<p>I spent the evening learning about the Twitter API. It was not as straight forward as I thought. My goal was to do this project using only the standard library, and I hoped to get away with a few simple curls, but since the API requires OAuth 1 to create tweets, I had to revise my strategy.</p>
<p>After struggling with Postman for a few hours to get the correct environment variables set up I managed to make my first tweet through Postman. Turns out that Twitter made some big changes in the free tier of their API, and it took me quite a while to figure out that the functions that are used as examples in the API documentation are not accessible to free accounts anymore.</p>
<p>When I realized I would not get away with a simple curl I looked into libraries, but many were deprecated. Eventually I discovered <a href="https://github.com/michimani/gotwi">gotwi</a> and it didn&rsquo;t take long to make my first tweet using Go.</p>
<p><img loading="lazy" src="/tweet.png" type="" alt=""  /></p>
<p>It feels like cheating, but looking at the complexity of the library, it looks like I would be stuck in the weeds for quite a while if I wanted to figure all of this out by myself.</p>
<p>There is still enough to figure out in this project, such as curling my RSS feed and creating a tweet out of that, and wrapping it in a CLI, so in the end I&rsquo;m glad I found a working library.</p>
<p>Here&rsquo;s the program I used to make my first tweet. It is a modified example from the gotwi GitHub readme.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/michimani/gotwi&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/michimani/gotwi/tweet/managetweet&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/michimani/gotwi/tweet/managetweet/types&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gotwi</span><span class="p">.</span><span class="nx">NewClientInput</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AuthenticationMethod</span><span class="p">:</span> <span class="nx">gotwi</span><span class="p">.</span><span class="nx">AuthenMethodOAuth1UserContext</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">OAuthToken</span><span class="p">:</span>           <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;TWITTER_ACCESS_TOKEN&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">OAuthTokenSecret</span><span class="p">:</span>     <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;TWITTER_ACCESS_TOKEN_SECRET&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">gotwi</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="nx">in</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">types</span><span class="p">.</span><span class="nx">CreateInput</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Text</span><span class="p">:</span> <span class="nx">gotwi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;Hello World! This time I&#39;m using os.Getenv in my Go program to load the credentials.\n#go #coding #study #learning&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">managetweet</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[%s] %s\n&#34;</span><span class="p">,</span> <span class="nx">gotwi</span><span class="p">.</span><span class="nf">StringValue</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Data</span><span class="p">.</span><span class="nx">ID</span><span class="p">),</span> <span class="nx">gotwi</span><span class="p">.</span><span class="nf">StringValue</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Data</span><span class="p">.</span><span class="nx">Text</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="links">Links:</h2>
<p>202304082104</p>
<p><a href="https://github.com/michimani/gotwi">https://github.com/michimani/gotwi</a></p>
<p><a href="https://mischavandenburg.com/zet/go-twitter-cli-project/">https://mischavandenburg.com/zet/go-twitter-cli-project/</a></p>
<p>[[go]]</p>
<p>[[go-twitter-cli-project]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Outlining My First Go Project</title>
      <link>https://mischavandenburg.com/zet/go-twitter-cli-project/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-twitter-cli-project/</guid>
      <description>When learning a programming language it is important to start building things quickly and to begin applying the theory. I have a tendency to dive into the books and lose myself in the theory, where I should be getting hands on experience.
Over the past few months I&amp;rsquo;ve generated a bunch of ideas for projects that I want to write, and I selected my first project today.
https://github.com/mischavandenburg/twitter-cli
https://twitter.com/mischa_vdburg
Twitter CLI Programs should solve a problem.</description>
      <content:encoded><![CDATA[<p>When learning a programming language it is important to start building things quickly and to begin applying the theory. I have a tendency to dive into the books and lose myself in the theory, where I should be getting hands on experience.</p>
<p>Over the past few months I&rsquo;ve generated a bunch of ideas for projects that I want to write, and I selected my first project today.</p>
<p><a href="https://github.com/mischavandenburg/twitter-cli">https://github.com/mischavandenburg/twitter-cli</a></p>
<p><a href="https://twitter.com/mischa_vdburg">https://twitter.com/mischa_vdburg</a></p>
<h1 id="twitter-cli">Twitter CLI</h1>
<p>Programs should solve a problem. My problem has to do with Twitter. I recently created a Twitter account, and I want to make a tweet whenever I publish something new on my website. I&rsquo;m currently doing this by hand, and that needs to stop, obviously.</p>
<p>There are bots out there for this, but I want to build it myself. I&rsquo;ve created the following user stories for my project.</p>
<h2 id="user-story-1">User Story 1</h2>
<blockquote>
<p>As a user, I need a command that I can run from a bash shell that will post the standard input to my Twitter account</p>
</blockquote>
<h2 id="user-story-2">User Story 2</h2>
<blockquote>
<p>As a user, I need a command that I can run from a bash shell that will take the latest post from the RSS feed generated by my blog and post it to Twitter</p>
</blockquote>
<h2 id="concepts">Concepts</h2>
<p>By writing this program I&rsquo;ll need to figure out the following problems in Go:</p>
<ul>
<li>Taking input from the command line</li>
<li>Authenticating to the Twitter API</li>
<li>Making a POST request to the Twitter API</li>
<li>Curling an RSS feed</li>
<li>Looping over / reading XML / HTML data</li>
<li>Transforming that data to a suitable format to post to Twitter</li>
</ul>
<h1 id="expansion">Expansion</h1>
<p>This will be a good start for my project and will keep me busy for a while. When I solved the previous problems I can use the result and expand further. Some thoughts about further expansion:</p>
<h2 id="rss-feeds">RSS Feeds</h2>
<p>I can use the skills I learn to start crawling Reddit feeds and filter them for keywords. I can automatically generate a curated selection from Reddit which will be easier to consume and will save me time by only serving me content that I might think is interesting to me, based on keywords.</p>
<h2 id="database">Database</h2>
<p>I want to learn more about using databases on Kubernetes and how to interact with databases using Go. For this I&rsquo;d like to store my RSS feed into a database and keep track of information in the database. I could track whether an article has been posted to Twitter and when.</p>
<h2 id="bot">Bot</h2>
<p>Rather than posting my latest blog post to Twitter by manually running a command, I should have a bot scanning my blog and posting to Twitter when it detects a new article. Or I could trigger the bot whenever I make a push to my blog repo.</p>
<p>In any case, I want to have an application running on a server. I&rsquo;m making plans to start up a proper home lab and this will be a perfect use case to start running on my home Kubernetes cluster.</p>
<h2 id="links">Links:</h2>
<p>202304081304</p>
<p><a href="https://github.com/mischavandenburg/twitter-cli">https://github.com/mischavandenburg/twitter-cli</a></p>
<p><a href="https://twitter.com/mischa_vdburg">https://twitter.com/mischa_vdburg</a></p>
<p>[[go]]</p>
<p>[[go-twitter-cli-project]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Exercise Stimulates Creativity And Motivation</title>
      <link>https://mischavandenburg.com/zet/exercise-stimulates-creativity-and-motivation/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/exercise-stimulates-creativity-and-motivation/</guid>
      <description>I noticed multiple times now that during my workouts my mind is generating lots of new ideas for coding projects or blog posts. It is a well known fact that walking stimulates areas in the brain that which will in turn stimulate creativity. But I&amp;rsquo;m noticing that it starts to happen with strength workouts as well.
Although I don&amp;rsquo;t struggle with the motivation to get myself to the gym, I sometimes feel &amp;ldquo;guilty&amp;rdquo; for not spending that time on coding or studying.</description>
      <content:encoded><![CDATA[<p>I noticed multiple times now that during my workouts my mind is generating lots of new ideas for coding projects or blog posts. It is a well known fact that walking stimulates areas in the brain that which will in turn stimulate creativity. But I&rsquo;m noticing that it starts to happen with strength workouts as well.</p>
<p>Although I don&rsquo;t struggle with the motivation to get myself to the gym, I sometimes feel &ldquo;guilty&rdquo; for not spending that time on coding or studying. I&rsquo;m realizing now that this is a very irrational train of thought.</p>
<p>Exercise actually stimulates my creativity and will help generating new ideas or help me understand concepts better in the unconscious. It is also massively beneficial for health and general well being. When general well-being is enhanced I&rsquo;ll also be able to focus better and absorb information more quickly.</p>
<p>I should re-frame my thinking and actually put exercise as priority number 1. Exercise time is never wasted time. It indirectly contributes to my productivity and coding endeavours as well.</p>
<h2 id="links">Links:</h2>
<p>202304011104</p>
<p>[[exercise]]</p>
<p>[[health]]</p>
<p>[[focus]]</p>
<p>[[productivity]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Generating Markdown Headings with YYYY-MM-DD Date Format Using Bash</title>
      <link>https://mischavandenburg.com/zet/generate-markdown-headings-date/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/generate-markdown-headings-date/</guid>
      <description>A couple of weeks ago I created a simple bash script to generate a date in format YYY-MM-DD to use with the magic !! wands in vim.
Just now I wanted to expand this with being able to create a markdown header with this date.
#!/bin/bash # Gendate generates the date in YYY-MM-DD format # Can be called with arguments h and number to generate a markdown heading # For example: &amp;#39;gendate h 3&amp;#39; will generate &amp;#39;### 2023-03-29&amp;#39; header=&amp;#34;&amp;#34; date=$(date +&amp;#34;%Y-%m-%d&amp;#34;) if [[ $# -gt 0 ]]; then # handling wrong arguments if [[ $# -eq 1 || &amp;#34;$1&amp;#34; !</description>
      <content:encoded><![CDATA[<p>A couple of weeks ago I created a simple bash script to generate a date in format YYY-MM-DD to use with the magic !! wands in vim.</p>
<p>Just now I wanted to expand this with being able to create a markdown header with this date.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Gendate generates the date in YYY-MM-DD format</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Can be called with arguments h and number to generate a markdown heading</span>
</span></span><span class="line"><span class="cl"><span class="c1"># For example: &#39;gendate h 3&#39; will generate &#39;### 2023-03-29&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">header</span><span class="o">=</span><span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">date</span><span class="o">=</span><span class="k">$(</span>date +<span class="s2">&#34;%Y-%m-%d&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="nv">$#</span> -gt <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># handling wrong arguments</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$#</span> -eq <span class="m">1</span> <span class="o">||</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;h&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;Usage: gendate h 2 to generate with markdown heading ##&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># format markdown heading if arguments h, n are given</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$#</span> -eq <span class="m">2</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> <span class="nv">$2</span><span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">            <span class="nv">header</span><span class="o">+=</span><span class="s2">&#34;#&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">done</span>
</span></span><span class="line"><span class="cl">        <span class="nv">header</span><span class="o">+=</span><span class="s2">&#34; &#34;</span><span class="nv">$date</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$header</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># if no arguments given, generate the date</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$date</span><span class="s2">&#34;</span>
</span></span></code></pre></div><h2 id="links">Links:</h2>
<p>202304011104</p>
<p><a href="https://github.com/mischavandenburg/dotfiles/tree/main/scripts">https://github.com/mischavandenburg/dotfiles/tree/main/scripts</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>I Wrote My First Go Program Today</title>
      <link>https://mischavandenburg.com/zet/my-first-go-program/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/my-first-go-program/</guid>
      <description>I&amp;rsquo;m still at the beginning of my Go learning journey, but I worked through a few tutorials and guides by now. I&amp;rsquo;ve gathered lots of ideas for programs that I want to write, big and small, but I have to start somewhere.
The best thing to do is to write little programs that solve a problem that you have.
One problem I needed to solve was converting sentences to title case in vim.</description>
      <content:encoded><![CDATA[<p>I&rsquo;m still at the beginning of my Go learning journey, but I worked through a few tutorials and guides by now. I&rsquo;ve gathered lots of ideas for programs that I want to write, big and small, but I have to start somewhere.</p>
<p>The best thing to do is to write little programs that solve a problem that you have.</p>
<p>One problem I needed to solve was converting sentences to title case in vim. There are plugins for this, or elaborate macros, but I thought this was a nice opportunity to write my first program from scratch. You can view the program here: <a href="https://github.com/mischavandenburg/go/tree/main/projects/title">my go repo</a>.</p>
<h1 id="title">Title</h1>
<p>Converting a string to title case is fairly easy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Package title converts a string to title case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">title</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Make</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Title</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This function takes a string as an argument and uses the Title function from the strings package to convert it. I use printf to format the output and to add a new line character.</p>
<h1 id="challenge">Challenge</h1>
<p>The challenge lies in taking input from Stdin. I solved this by reusing the things I learned from the greet challenge. I described how to read from standard input in go in <a href="/zet/go-reading-stdinput-cmdline">this article</a>.</p>
<p>Here is the code for the title command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/mischavandenburg/go/projects/title&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/mischavandenburg/go/projects/title/internal&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">x</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">x</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">x</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">internal</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">title</span><span class="p">.</span><span class="nf">Make</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This main function checks if arguments are given to the program from the command line, and uses these arguments if they are given. If there are no arguments, it will expect input to be piped to it. It takes either the input from the arguments or from standard input and calls the <code>Make()</code> function that I described above.</p>
<p>This main function uses a Readline function to extract the string from standard input:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">internal</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;bufio&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ReadLine takes anything of type io.Reader and returns a trimmed string (initial
</span></span></span><span class="line"><span class="cl"><span class="c1">// and trailing white space) or an empty string and error if any error
</span></span></span><span class="line"><span class="cl"><span class="c1">// is encountered.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadLine</span><span class="p">(</span><span class="nx">in</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">in</span><span class="p">).</span><span class="nf">ReadString</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>For a more detailed explanation of this function read <a href="/zet/go-reading-stdinput-cmdline">this article</a> I wrote.</p>
<h1 id="usage">Usage</h1>
<p>I wrote the program so I can call it with a sentence as an argument:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mischa@mac-beast:~
</span></span><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)</span>$ title hello world, this is my sentence in title <span class="k">case</span>
</span></span><span class="line"><span class="cl">Hello World, This Is My Sentence In Title Case
</span></span></code></pre></div><p>But the main use case is to use it as a <a href="https://www.geeksforgeeks.org/pipes-and-filters-in-linux-unix/">UNIX filter</a> inside of vim. A UNIX filter is a program that takes standard input, performs some operation on the input, and prints it to standard output.</p>
<p>Now, when I&rsquo;m working inside of vim, I can convert the current line to title case by typing the following command:</p>
<p><code>!!title</code></p>
<p>The <code>!!</code> command sends the specified amount of lines to the command you specify. Exclamation marks truly are magic wands! I highly recommend reading <a href="https://rwx.gg/tools/editors/vi/how/magic/">this article</a> by rwxrob to learn more about them.</p>
<h2 id="links">Links:</h2>
<p>202303280803</p>
<p><a href="https://github.com/mischavandenburg/go/tree/main/projects/title">https://github.com/mischavandenburg/go/tree/main/projects/title</a></p>
<p><a href="https://rwx.gg/tools/editors/vi/how/magic/">https://rwx.gg/tools/editors/vi/how/magic/</a></p>
<p><a href="/zet/go-reading-stdinput-cmdline">Reading from standard input in Go</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Go - Reading from Standard Input Provided by User</title>
      <link>https://mischavandenburg.com/zet/go-reading-stdinput-cmdline/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-reading-stdinput-cmdline/</guid>
      <description>I&amp;rsquo;m working through the &amp;ldquo;greet&amp;rdquo; challenge by rwxrob. It is amazing how such a relatively simple and small challenge can lead down to so many rabbit holes.
The program should take input from the user and print it out. I worked through the challenge together with Rob in his video but I&amp;rsquo;m going to talk (write) myself through these functions to fully understand what&amp;rsquo;s going on.
We have the following function in main.</description>
      <content:encoded><![CDATA[<p>I&rsquo;m working through the &ldquo;greet&rdquo; <a href="https://rwx.gg/lang/cha/">challenge</a> by rwxrob. It is amazing how such a relatively simple and small challenge can lead down to so many rabbit holes.</p>
<p>The program should take input from the user and print it out. I worked through the challenge together with Rob <a href="https://www.youtube.com/watch?v=WMH5ENF_Xvo">in his video</a> but I&rsquo;m going to talk (write) myself through these functions to fully understand what&rsquo;s going on.</p>
<p>We have the following function in main.go:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">name</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello there, what&#39;s your name?&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">internal</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">greet</span><span class="p">.</span><span class="nf">Hi</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>If the number of arguments passed to the program is greater than 1, we set <code>name</code> to a joined string created from the provided arguments. Args[0] would be the path to the program, so we don&rsquo;t want that to be included. As a result, <code>greet mischa</code> will pass <code>mischa</code> to the greet.Hi() function, as defined in greet.go, and print out <code>Hello, mischa</code>.</p>
<p>However, if no arguments are passed to the greet program, discovered in case <code>name</code> is empty, we ask the user for input. We capture the input by <code>os.Stdin</code> and pass it to the <code>ReadLine()</code> function, which is located at internal/readline.go.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// ReadLine takes any io.Reader and returns a trimmed string (initial
</span></span></span><span class="line"><span class="cl"><span class="c1">// and trailing white space) or an empty string and error if any error
</span></span></span><span class="line"><span class="cl"><span class="c1">// is encountered.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadLine</span><span class="p">(</span><span class="nx">in</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">in</span><span class="p">).</span><span class="nf">ReadString</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ReadLine has a parameter <code>in</code> of type io.Reader, which is an interface. Next, we determine that ReadLine should return two values of type string and error. I&rsquo;m saving to learn about interfaces for another day, I&rsquo;m just going to work through this function now.</p>
<p>We assign the output of <code>bufio.NewReader(in).ReadString('\n')</code> to two new variables named <code>out</code> and <code>err</code> using the &ldquo;walrus operator&rdquo; <code>:=</code> which detects the types automatically. We can do it like this because ReadString returns (string, error).</p>
<p>We take the <code>in</code> argument of type <code>io.Reader</code> which was passed to the ReadLine function, which in this case is the <code>io.Stdin</code> that came from our main function, and pass it on to <code>bufio.NewReader(in)</code>. Then we are able to read the string until the newline character <code>\n</code> in the string, and trim off the whitespace from the beginning and the end of the string by calling TrimSpace on the <code>out</code> variable.</p>
<p>Then we return the trimmed string back to our original main function, which will pass it on to the <code>Hi()</code> function.</p>
<p>However, if the <code>bufio.NewReader(in).ReadString('\n')</code> should return an error, it is caught by this code in the main function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span></code></pre></div><p>This is a standard way of handling errors in Go. If the error is anything else than nil, we will print the error and end the function with the return keyword.</p>
<h1 id="thoughts">Thoughts</h1>
<p>I&rsquo;m really glad I took the time to talk / write myself through this program. I think I&rsquo;m going to make a habit of this as I&rsquo;m learning Go. It made everything much clearer when I sat down and traced the arguments from function to function and describing every step in my own words.</p>
<p>I&rsquo;ll post this note in the YouTube comments, maybe somebody will find it useful as well.</p>
<h1 id="links">Links:</h1>
<p>This page goes a lot deeper in what stdin and stdout actually do in this context. Very interesting reading:</p>
<p><a href="https://stackoverflow.com/questions/12363030/read-from-initial-stdin-in-go">https://stackoverflow.com/questions/12363030/read-from-initial-stdin-in-go</a></p>
<p>The code in my repo:</p>
<p><a href="https://github.com/mischavandenburg/go/tree/main/rwxrob/boost2022/challenges/greet">https://github.com/mischavandenburg/go/tree/main/rwxrob/boost2022/challenges/greet</a></p>
<p>[[go]]</p>
<p>[[go-rwxrob]]</p>
<p>[[coding]]</p>
<p>[[functions]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Go - Skillstak Beginner Boost Week 17 and 18 Notes</title>
      <link>https://mischavandenburg.com/zet/go-rwxrob-boost-week-17-18/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-rwxrob-boost-week-17-18/</guid>
      <description>Beginner Boost Week 17 and 18 Notes Link to video
Don&amp;rsquo;t forget to set GOBIN=~/.local/bin, GOPRIVATE, CGO_ENABLED=0 Go Testing - Example Tests func ExampleFoo() { foo() // Output: // Foo } The ExampleFoo indicates the test here. It needs to match the name exactly after Example. But it is capitalized.
It runs that function and will compare the output to what is specified.
It says &amp;ldquo;see if the program generates this output in std out&amp;rdquo;.</description>
      <content:encoded><![CDATA[<h1 id="beginner-boost-week-17-and-18-notes">Beginner Boost Week 17 and 18 Notes</h1>
<p><a href="https://www.youtube.com/watch?v=WMH5ENF_Xvo">Link to video</a></p>
<ul>
<li>Don&rsquo;t forget to set <code>GOBIN=~/.local/bin</code>, <code>GOPRIVATE</code>, <code>CGO_ENABLED=0</code></li>
</ul>
<h1 id="go-testing---example-tests">Go Testing - Example Tests</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ExampleFoo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Output:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Foo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The ExampleFoo indicates the test here. It needs to match the name exactly after Example. But it is capitalized.</p>
<p>It runs that function and will compare the output to what is specified.</p>
<p>It says &ldquo;see if the program generates this output in std out&rdquo;.</p>
<p>These are called example tests.</p>
<p>To export a function the first letter should be a capital. Everything that has a capital as first letter is exported.</p>
<p>When you are writing example tests you are providing readable automatic documentation to your end users.</p>
<p>You can use <code>// Unordered Output</code> if you don&rsquo;t care about the order.</p>
<h2 id="printf">Printf</h2>
<p>use <code>printf %q</code> to see all of the characters. <code>%q</code> escapes all of the invisible characters. So you can see \r or \n for example. This is the only way to check for empty values in Example tests.</p>
<h1 id="how-to-learn-go">How to Learn Go</h1>
<p>Don&rsquo;t go to the books. Stay with the spec, write your own projects, and find one or two or 10 Go projects and study the crap out of them.</p>
<p>Study the code bases. Kind is a good codebase.</p>
<p>Read the Go codebase!</p>
<p><a href="https://youtu.be/9hEnzD-bNy4?t=8467">https://youtu.be/9hEnzD-bNy4?t=8467</a></p>
<p>Read other people&rsquo;s code and see if your code looks like that.</p>
<p>&ldquo;Good artists copy, great artists steal.&rdquo; - quote accredited to Steve Jobs but it has its origin in T.S. Eliot and even further back.</p>
<p><strong>Start with the tests! Read the tests first.</strong></p>
<h1 id="searching-go-documentation">Searching Go Documentation</h1>
<p>Always search for golang when searching on the net. Preferably text based searching.</p>
<p>Then you use <code>go doc os.Stderr</code> - for example.</p>
<h1 id="variable-names">Variable Names</h1>
<p>Long variable names are frowned upon in the Go community. They should be as short as they need to be.</p>
<p>If using in a tight scope, a single letter is fine. In a block two or three characters is more than enough. It distracts from reading the code if they have very long names.</p>
<p>The more remote the variable is, the more descriptive it should be.</p>
<h1 id="the-art-of-coding">The Art of Coding</h1>
<ul>
<li>breaking everything down into small 1 task functions</li>
<li>don&rsquo;t repeat yourself</li>
</ul>
<p>See <a href="#stuttering">stuttering</a></p>
<h1 id="top-level-libraries">Top Level Libraries</h1>
<p>It&rsquo;s not common to make a single utility at a top-level GitHub repo.</p>
<p>It&rsquo;s very likely that you are going to want to reuse code somewhere.</p>
<p>You should start thinking of things as composition. &ldquo;How is this code going to be used by other people&rdquo;.</p>
<p>Go is different than bash: you will use this code elsewhere.</p>
<ul>
<li>What is the function of what I&rsquo;m creating?</li>
<li>Create these as small composable blocks</li>
<li>So you can use them later</li>
</ul>
<h1 id="example-based-testing">Example Based Testing</h1>
<p><a href="https://pkg.go.dev/testing">https://pkg.go.dev/testing</a></p>
<blockquote>
<p>The package also runs and verifies example code. Example functions may include a
concluding line comment that begins with &ldquo;Output:&rdquo; and is compared with the
standard output of the function when the tests are run. (The comparison ignores
leading and trailing space.) These are examples of an example:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ExampleHello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Output: hello
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ExampleSalutations</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;hello, and&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;goodbye&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Output:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// hello, and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// goodbye
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h1 id="searching-information">Searching Information</h1>
<p>Being able to look up information quickly and taking notes about them is just as important as the coding itself.</p>
<h1 id="packages-or-libraries">Packages or Libraries</h1>
<p>You can either have a command, which will be a main package, or you can have an importable library named <!-- raw HTML omitted -->.go. Should have any other name besides main.</p>
<p>You rarely want your top level of your module to be a package.</p>
<p>Convention: cmd directory.</p>
<p>This is specifically for separate commands.</p>
<h2 id="stuttering">Stuttering</h2>
<p><code>greet.Greet()</code> is called stuttering in go. Don&rsquo;t do this.</p>
<h1 id="modules">Modules</h1>
<p>A module can be defined as &ldquo;a GitHub repo with a go.mod&rdquo; in it.</p>
<p>&ldquo;A collection of Go packages stored in a file tree with a go.mod file at its root&rdquo;</p>
<p>The go.mod contains the import path of the module.</p>
<h2 id="what-module-does-greet-belong-to">What Module Does Greet Belong To?</h2>
<p>In the case of our greet command, it belongs to the greet module located at:</p>
<p><code>github.com/mischavandenburg/go/rwxrob/boost2022/challenges/greet</code></p>
<p>Greet has a main package which is part of the greet module.</p>
<p>Now we will add another command with another main package to this module.</p>
<h1 id="cli">CLI</h1>
<p>Stuff that has to do with interacting with the user on the command line should never be in the package library. The package library should be written to be solid no matter what.</p>
<p>The &ldquo;name&rdquo; for our greet program should be able to come to anywhere.</p>
<h1 id="avoid-interactive-input">Avoid Interactive Input</h1>
<p>You generally want to avoid interactive input. Prefer arguments, env variables or file inputs.</p>
<p>If you call your program from another script it will stall if it waits for interactive input.</p>
<p>A good example is forgetting &ldquo;-y&rdquo; when running apt-get.</p>
<p>An interactive story game is a different use case than a CLI tool.</p>
<p>UNIX filters are specifically designed to read input and generate an output based on the input. Here it is expected behaviour to stall if no input is given.</p>
<h1 id="runes">Runes</h1>
<p>A rune is a single Unicode point.</p>
<p>The same people who created Go, created the Unicode standard.</p>
<p>Go has the best Unicode support.</p>
<h1 id="writing-documentation">Writing Documentation</h1>
<p>Convention is to always start with the name of the thing you are documenting. When documenting a function, always start with the function name. For example <code>// ReadLine reads from standard input</code></p>
<p>Use <code>go doc --all</code> to see a print of all the documentation in your package.</p>
<p>The same goes for packages. Always start with &ldquo;Package internal does bla bla&rdquo;</p>
<h1 id="links">Links</h1>
<p>202303261403</p>
<p><a href="https://www.youtube.com/watch?v=WMH5ENF_Xvo">https://www.youtube.com/watch?v=WMH5ENF_Xvo</a></p>
<p>[[go]]</p>
<p>[[coding]]</p>
<p>[[rwxrob]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Made Some Website Improvements</title>
      <link>https://mischavandenburg.com/zet/website-housekeeping/</link>
      <pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/website-housekeeping/</guid>
      <description>Did some website housekeeping today. Spent the entire morning on a few tasks that I intended to do for a while. I added a search page and reorganized the menu, and I added a &amp;ldquo;Start Here&amp;rdquo; page.
I hope that the new &amp;ldquo;Start Here&amp;rdquo; page will do a better job of explaining the how and why of my website, and that the search function will help you nagivate my website better.</description>
      <content:encoded><![CDATA[<p>Did some website housekeeping today. Spent the entire morning on a few tasks that I intended to do for a while. I added a search page and reorganized the menu, and I added a &ldquo;Start Here&rdquo; page.</p>
<p>I hope that the new &ldquo;Start Here&rdquo; page will do a better job of explaining the how and why of my website, and that the search function will help you nagivate my website better.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Surround a Word with Quotes in Vim</title>
      <link>https://mischavandenburg.com/zet/surround-word-quotes-neovim/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/surround-word-quotes-neovim/</guid>
      <description>[[neovim]]
I find myself quoting words very often in vim when I&amp;rsquo;m writing bash code. I used to do this by simply navigating around the word and typing them, but I knew there had to be a better way.
I found this vim command:
ciw&amp;quot;&amp;quot;&amp;lt;Esc&amp;gt;P
&amp;ldquo;c&amp;rdquo; deletes into register and enters insert mode. &amp;ldquo;iw&amp;rdquo; stands for &amp;ldquo;inner word&amp;rdquo; and selects the word.
So we delete the entire word and enter insert mode.</description>
      <content:encoded><![CDATA[<p>[[neovim]]</p>
<p>I find myself quoting words very often in vim when I&rsquo;m writing bash code. I used to do this by simply navigating around the word and typing them, but I knew there had to be a better way.</p>
<p>I found this vim command:</p>
<p><code>ciw&quot;&quot;&lt;Esc&gt;P</code></p>
<p>&ldquo;c&rdquo; deletes into register and enters insert mode. &ldquo;iw&rdquo; stands for &ldquo;inner word&rdquo; and selects the word.</p>
<p>So we delete the entire word and enter insert mode. Then we type two quotes, and we press &ldquo;P&rdquo; to paste the register (containing the word) before the cursor.</p>
<p>Voila, the word is surrounded by quotes.</p>
<p>To make it even easier, I added this to my keymaps, and I&rsquo;ll add a few more for parentheses and brackets.</p>
<p><code>vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;wsq&quot;, 'ciw&quot;&quot;&lt;Esc&gt;P', { desc = &quot;Word Surround Quotes&quot; })</code></p>
<p><a href="https://vi.stackexchange.com/questions/21113/vimscript-surround-word-under-cursor-with-quotes">https://vi.stackexchange.com/questions/21113/vimscript-surround-word-under-cursor-with-quotes</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is the difference between a Go module and a package?</title>
      <link>https://mischavandenburg.com/zet/package-module-go/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/package-module-go/</guid>
      <description>A module is generally associated with a single git repo.
You can have a module with multiple packages, and each package would get its own subdirectory.
You should always name your main file main.go
creating a module Use the go mod init {{your path here}} command to initiate a module.
multiple modules I was running into some trouble with this because I want to have one big repo where I will store all my go projects.</description>
      <content:encoded><![CDATA[<p>A module is generally associated with a single git repo.</p>
<p>You can have a module with multiple packages, and each package would get its own subdirectory.</p>
<p>You should always name your main file main.go</p>
<h2 id="creating-a-module">creating a module</h2>
<p>Use the <code>go mod init {{your path here}}</code> command to initiate a module.</p>
<h2 id="multiple-modules">multiple modules</h2>
<p>I was running into some trouble with this because I want to have one big repo where I will store all my go projects.</p>
<p>My gopls LSP in Neovim would start throwing errors when I added multiple projects in my repo.</p>
<p>The fix is to create a separate directory for each project. For example:</p>
<p>/go/hello/main.go</p>
<p>/go/hi/main.go</p>
<p>Hello and Hi are each separate projects.</p>
<p>Now I enter each of these directories and run <code>go mod init hello</code></p>
<p>I&rsquo;m sure this isn&rsquo;t good practice for production code, but it serves its purpose to collect all my learning code in one place.</p>
<p><a href="https://www.youtube.com/watch?v=9hEnzD-bNy4">https://www.youtube.com/watch?v=9hEnzD-bNy4</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to continuously run a Go file while coding in the terminal</title>
      <link>https://mischavandenburg.com/zet/running-go-on-change/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/running-go-on-change/</guid>
      <description>I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.
You can use this command in a split window to keep running a Go file. It will update when you save the file.
entr -c bash -c &amp;quot;go run main.go&amp;quot; &amp;lt;&amp;lt;&amp;lt; main.go
Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:</description>
      <content:encoded><![CDATA[<p>I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.</p>
<p>You can use this command in a split window to keep running a Go file. It will update when you save the file.</p>
<p><code>entr -c bash -c &quot;go run main.go&quot; &lt;&lt;&lt; main.go</code></p>
<p>Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:</p>
<p><code>find src/ | entr -s 'make'</code></p>
<p>Super handy to see the outcome of your code changes in real time.</p>
<p>To run all the files in the directory, use the following:</p>
<p><code>entr -c bash -c &quot;go run . &quot; &lt; &lt;(find .)</code></p>
<p>I picked this up while going through Rob&rsquo;s Beginner Boost of 2022:</p>
<p><a href="https://youtu.be/kwrN3jbv4sE">https://youtu.be/kwrN3jbv4sE</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Notes: Advanced Bicep</title>
      <link>https://mischavandenburg.com/zet/advanced-bicep/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/advanced-bicep/</guid>
      <description>Deploying to subscriptions and management groups To tell Bicep which scope to deploy to, use the targetScope keyword, for example, managementGroup.
You&amp;rsquo;re not specifying which management group exactly, this is done during deployment of the template file.
targetScope can be set to resourceGroup, subscription, managementGroup or tenant.
If it is not set, Bicep assumes resourceGroup.
create a resource group targetScope = &amp;#39;subscription&amp;#39; resource resourceGroup &amp;#39;Microsoft.Resources/resourceGroups@2021-01-01&amp;#39; = { name: &amp;#39;example-resource-group&amp;#39; location: &amp;#39;westus&amp;#39; } To deploy you use az deployment group create for resource groups, but you use az deployment sub create for subscriptions, mg for management group and tenant for tenant.</description>
      <content:encoded><![CDATA[<h1 id="deploying-to-subscriptions-and-management-groups">Deploying to subscriptions and management groups</h1>
<p>To tell Bicep which scope to deploy to, use the <code>targetScope</code> keyword, for example, managementGroup.</p>
<p>You&rsquo;re not specifying which management group exactly, this is done during deployment of the template file.</p>
<p>targetScope can be set to resourceGroup, subscription, managementGroup or tenant.</p>
<p>If it is not set, Bicep assumes resourceGroup.</p>
<h2 id="create-a-resource-group">create a resource group</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">targetScope</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="s">&#39;subscription&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">resourceGroup</span><span class="w"> </span><span class="s">&#39;Microsoft.Resources/resourceGroups@2021-01-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;example-resource-group&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;westus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>To deploy you use <code>az deployment group create</code> for resource groups, but you use <code>az deployment sub create</code> for subscriptions, <code>mg</code> for management group and <code>tenant</code> for tenant.</p>
<h2 id="deployment-scripts">deployment scripts</h2>
<blockquote>
<p>deploymentScripts resources are either PowerShell or Bash scripts that run in a Docker container as part of your template deployment. The default container images have either the Azure CLI or Azure PowerShell available. These scripts run during the processing of the ARM template, so you can add custom behavior to the deployment process.</p>
</blockquote>
<p>Here is an example of a deployment script with some comments:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">myFirstDeploymentScript</span><span class="w"> </span><span class="s">&#39;Microsoft.Resources/deploymentScripts@2020-10-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;myFirstDeploymentScript&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">// can be AzurePowershell or Azure CLI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">kind</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;AzurePowerShell&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">// the script will be run in a container. We need to provide a Managed Identity to give the script the required permissions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">identity</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">type</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;UserAssigned&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">userAssignedIdentities</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s">&#39;/subscriptions/01234567-89AB-CDEF-0123-456789ABCDEF/resourcegroups/deploymenttest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myscriptingid&#39;</span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">azPowerShellVersion</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;3.0&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// in Bicep we use &#39;&#39;&#39; to indicate a multi line string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">scriptContent</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s">      $output = &#39;</span><span class="nv">Hello</span><span class="w"> </span><span class="nv">Learner</span><span class="o">!</span><span class="s">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s">      Write-Output $output
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">     // the $DeploymentScriptOutputs variable is created to return output back to the Bicep template
</span></span></span><span class="line"><span class="cl"><span class="s">     // It needs to be a hash table
</span></span></span><span class="line"><span class="cl"><span class="s">      $DeploymentScriptOutputs = @{}
</span></span></span><span class="line"><span class="cl"><span class="s">      $DeploymentScriptOutputs[&#39;</span><span class="nv">text</span><span class="s">&#39;] = $output
</span></span></span><span class="line"><span class="cl"><span class="s">    &#39;&#39;&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">retentionInterval</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;P1D&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">output</span><span class="w"> </span><span class="nv">scriptResult</span><span class="w"> </span><span class="nv">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nv">myFirstDeploymentScript</span><span class="p">.</span><span class="nv">properties</span><span class="p">.</span><span class="nv">outputs</span><span class="p">.</span><span class="nv">text</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>You can also write deployment scripts in Bash. To create outputs from a Bash script, you need to create a JSON file in a location specified by the AZ_SCRIPTS_OUTPUT_PATH environment variable.</p>
</blockquote>
<p>To include a script file, use the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">azPowerShellVersion</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;3.0&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">scriptContent</span><span class="p">:</span><span class="w"> </span><span class="nf">loadTextContent</span><span class="p">(</span><span class="s">&#39;myscript.ps1&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">retentionInterval</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;P1D&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="deploying-a-managed-identity-and-assigning-a-role">deploying a managed identity and assigning a role</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span><span class="nv">userAssignedIdentityName</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="s">&#39;configDeployer&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">var</span><span class="w"> </span><span class="nv">roleAssignmentName</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">guid</span><span class="p">(</span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">id</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;contributor&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">var</span><span class="w"> </span><span class="nv">contributorRoleDefinitionId</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">resourceId</span><span class="p">(</span><span class="s">&#39;Microsoft.Authorization/roleDefinitions&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;b24988ac-6180-42a0-ab88-20f7382dd24c&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">userAssignedIdentity</span><span class="w"> </span><span class="s">&#39;Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">userAssignedIdentityName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">roleAssignment</span><span class="w"> </span><span class="s">&#39;Microsoft.Authorization/roleAssignments@2020-04-01-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">roleAssignmentName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">roleDefinitionId</span><span class="p">:</span><span class="w"> </span><span class="nv">contributorRoleDefinitionId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">principalId</span><span class="p">:</span><span class="w"> </span><span class="nv">userAssignedIdentity</span><span class="p">.</span><span class="nv">properties</span><span class="p">.</span><span class="nv">principalId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">principalType</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;ServicePrincipal&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="template-specs">template specs</h2>
<p>When you have a lot of reusable templates, you can use Template Specs to enable your entire organization to deploy them.</p>
<p>You can convert a Bicep file to a template spec. The template spec is then deployed to Azure as a resource, and anybody with the right access and do deployments with the template spec from the portal or Azure CLI. Azure will handle the version control.</p>
<p>You will lose any comments and whitespace.</p>
<p>Bicep modules are intended to be combined into larger deployments. Template specs are for sets of resources with a certain configuration.</p>
<p>Template specs can be used as a Bicep module. You use the following code to import it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">module</span><span class="w"> </span><span class="nv">storageAccountTemplateSpec</span><span class="w"> </span><span class="s">&#39;ts:f0750bbe-ea75-4ae5-b24d-a92ca601da2c/sharedTemplates/StorageWithoutSAS:1.0&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;storageAccountTemplateSpec&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Notes: Intermediate Bicep</title>
      <link>https://mischavandenburg.com/zet/intermediate-bicep/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/intermediate-bicep/</guid>
      <description>Today I finished the Intermediate Bicep module. Here are my notes.
Child and Extension You can also use Bicep to refer to resources that were created outside the Bicep file itself. For example, you can refer to resources that your colleagues have created manually by using the Azure portal, or from within another Bicep template or module, even if they&amp;rsquo;re in a different resource group or subscription. By using these features of Bicep, you can unlock the ability to create powerful templates that deploy all aspects of your Azure infrastructure.</description>
      <content:encoded><![CDATA[<p>Today I finished the Intermediate Bicep module. Here are my notes.</p>
<h1 id="child-and-extension">Child and Extension</h1>
<blockquote>
<p>You can also use Bicep to refer to resources that were created outside the Bicep file itself. For example, you can refer to resources that your colleagues have created manually by using the Azure portal, or from within another Bicep template or module, even if they&rsquo;re in a different resource group or subscription. By using these features of Bicep, you can unlock the ability to create powerful templates that deploy all aspects of your Azure infrastructure.</p>
</blockquote>
<p>Some resources are only deployed in context of their parent. For example:</p>
<p>Virtual network subnets 	Microsoft.Network/virtualNetworks/subnets
App Service configuration 	Microsoft.Web/sites/config
SQL databases 	Microsoft.Sql/servers/databases
Virtual machine extensions 	Microsoft.Compute/virtualMachines/extensions
Storage blob containers 	Microsoft.Storage/storageAccounts/blobServices/containers
Azure Cosmos DB containers</p>
<p>It does not make sense for a container to exist without a storage account.</p>
<h2 id="difference-between-child-and-extension">Difference between child and extension</h2>
<p>In summary, you define extensions with the <code>scope</code> keyword, and child resources are defined by nesting them or by using the <code>parent</code> keyword.</p>
<p>An extension resource is a resource that modifies another resource. For example, assigning a role to a resource.</p>
<p>A child resource is a resource that exists only within the context of another resource, such as a subnet existing only within a vnet.</p>
<h2 id="nested-resource">Nested resource</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">vm</span><span class="w"> </span><span class="s">&#39;Microsoft.Compute/virtualMachines@2020-06-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">vmName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">resource</span><span class="w"> </span><span class="nv">installCustomScriptExtension</span><span class="w"> </span><span class="s">&#39;extensions&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;InstallCustomScript&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Here the extension resource is within the vm resource. The fully qualified domain name is <code>Microsoft.Compute/virtualMachines/extensions</code>, but it is not necessary because it inherits it from the parent. Therefore we only need to specify &rsquo;extensions&rsquo; here.</p>
<p>No API version is specified either, this is also inherited.</p>
<blockquote>
<p>You can refer to a nested resource by using the :: operator. For example, you could create an output that will return the full resource ID of the extension:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">output</span><span class="w"> </span><span class="nv">childResourceId</span><span class="w"> </span><span class="nv">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nv">vm</span><span class="o">::</span><span class="nv">installCustomScriptExtension</span><span class="p">.</span><span class="nv">id</span><span class="w">
</span></span></span></code></pre></div><h2 id="parent-property">Parent property</h2>
<p>This is the second way to declare a child resource.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">vm</span><span class="w"> </span><span class="s">&#39;Microsoft.Compute/virtualMachines@2020-06-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">vmName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">installCustomScriptExtension</span><span class="w"> </span><span class="s">&#39;Microsoft.Compute/virtualMachines/extensions@2020-06-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">parent</span><span class="p">:</span><span class="w"> </span><span class="nv">vm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;InstallCustomScript&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="dependson">dependsOn</h2>
<p>use dependsOn to indicate a dependency.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="nv">dependsOn</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">vm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><h2 id="extension-resources">Extension resources</h2>
<p>Extension resources are always attached to other Azure resources. They extend them with extra functionality. Some examples are role assignments, locks, and policy assignments.</p>
<p>It doesn&rsquo;t make sense to deploy a lock by itself. It always has to be deployed to another resource, because it prevents deletion or modification of a resource.</p>
<p>Resources are defined almost the same way as normal resources, but you add the <code>scope</code> property to tell Bicep that it is attached to another resource in the template.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">cosmosDBAccount</span><span class="w"> </span><span class="s">&#39;Microsoft.DocumentDB/databaseAccounts@2020-04-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">cosmosDBAccountName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">lockResource</span><span class="w"> </span><span class="s">&#39;Microsoft.Authorization/locks@2016-09-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">scope</span><span class="p">:</span><span class="w"> </span><span class="nv">cosmosDBAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;DontDelete&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">level</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;CanNotDelete&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">notes</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Prevents deletion of the toy data Cosmos DB account.&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Extensions have slightly different resource ID&rsquo;s. They consist of the parent resource ID, the separator <code>/providers/</code>, and the extension resource ID.</p>
<blockquote>
<p>If you see a resource ID that starts with a normal resource ID and then adds /providers/ and another resource type and name, it means that you&rsquo;re looking at an extension resource ID.</p>
</blockquote>
<h3 id="existing-resources">Existing resources</h3>
<p>Bicep files often need to refer to resources that have been already created elswewhere. They might have been created in the portal or by another Bicep file.</p>
<p>Here you use the <code>existing</code> keyword in Bicep. You are defining a resource that already exists, and therefore you are telling Bicep that it shouldn&rsquo;t try to deploy it. Think of it as a placeholder resource.</p>
<p>You can do the same for nested or child resources.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">storageAccount</span><span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2019-06-01&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;toydesigndocs&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="existing-resources-outside-of-the-resource-group-and-subscription">Existing resources outside of the resource group and subscription</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">vnet</span><span class="w"> </span><span class="s">&#39;Microsoft.Network/virtualNetworks@2020-11-01&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">scope</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">(</span><span class="s">&#39;f0750bbe-ea75-4ae5-b24d-a92ca601da2c&#39;</span><span class="p">,</span><span class="w"> </span><span class="s">&#39;networking-rg&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;toy-design-vnet&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>You can refer to these as long as they are within your Azure AD tenant.</p>
<h2 id="add-child-and-extension-resources-to-an-existing-resource">Add child and extension resources to an existing resource</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">server</span><span class="w"> </span><span class="s">&#39;Microsoft.Sql/servers@2020-11-01-preview&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">serverName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">database</span><span class="w"> </span><span class="s">&#39;Microsoft.Sql/servers/databases@2020-11-01-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">parent</span><span class="p">:</span><span class="w"> </span><span class="nv">server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">databaseName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Standard&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">tier</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Standard&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Use the <code>existing</code> keyword to refer to the resource, and then you add the child by specifying the <code>parent</code> property.</p>
<p>Finally, to deploy an extension resource to an existing resource, use the <code>scope</code> keyword:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">storageAccount</span><span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2019-06-01&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;toydesigndocs&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">lockResource</span><span class="w"> </span><span class="s">&#39;Microsoft.Authorization/locks@2016-09-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">scope</span><span class="p">:</span><span class="w"> </span><span class="nv">storageAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;DontDelete&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">level</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;CanNotDelete&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">notes</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Prevents deletion of the toy design documents storage account.&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="referring-to-an-existing-resources-properties">Referring to an existing resource&rsquo;s properties</h2>
<p>Define the resource and you can refer to its properties if the prperty isn&rsquo;t secure.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">applicationInsights</span><span class="w"> </span><span class="s">&#39;Microsoft.Insights/components@2018-05-01-preview&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">applicationInsightsName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">functionApp</span><span class="w"> </span><span class="s">&#39;Microsoft.Web/sites@2020-06-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">functionAppName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">kind</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;functionapp&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">siteConfig</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">appSettings</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;APPINSIGHTS_INSTRUMENTATIONKEY&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nv">value</span><span class="p">:</span><span class="w"> </span><span class="nv">applicationInsights</span><span class="p">.</span><span class="nv">properties</span><span class="p">.</span><span class="nv">InstrumentationKey</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>When you need to access secure data, use the listKeys() function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">storageAccount</span><span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2019-06-01&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">storageAccountName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">functionApp</span><span class="w"> </span><span class="s">&#39;Microsoft.Web/sites@2020-06-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">functionAppName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">kind</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;functionapp&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">siteConfig</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">appSettings</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;StorageAccountKey&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nv">value</span><span class="p">:</span><span class="w"> </span><span class="nv">storageAccount</span><span class="p">.</span><span class="nf">listKeys</span><span class="p">().</span><span class="nv">keys</span><span class="p">[</span><span class="nv">0</span><span class="p">].</span><span class="nv">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The VScode extension will show hints to help you understand the data this function returns.</p>
<p>You need to have sufficient permissions to use the listKeys function.</p>
<h2 id="child-and-extension-1">Child and extension</h2>
<p>In this example we are attaching an extension to a child resource.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">storageAccount</span><span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2019-06-01&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">storageAccountName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="kd">resource</span><span class="w"> </span><span class="nv">blobService</span><span class="w"> </span><span class="s">&#39;blobServices&#39;</span><span class="w"> </span><span class="kd">existing</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;default&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/* Note: Here we are attaching to blobServices which itself is a child resource. So we are attaching an extension to a child resource. */</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">storageAccountBlobDiagnostics</span><span class="w"> </span><span class="s">&#39;Microsoft.Insights/diagnosticSettings@2017-05-01-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">scope</span><span class="p">:</span><span class="w"> </span><span class="nv">storageAccount</span><span class="o">::</span><span class="nv">blobService</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">storageAccountBlobDiagnosticSettingsName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">workspaceId</span><span class="p">:</span><span class="w"> </span><span class="nv">logAnalyticsWorkspace</span><span class="p">.</span><span class="nv">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">logs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">category</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;StorageRead&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">category</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;StorageWrite&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">category</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;StorageDelete&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h1 id="structuring-bicep-for-collaboration">Structuring Bicep for Collaboration</h1>
<h2 id="configuration-maps">configuration maps</h2>
<p>Using many different parameters can be confusing to the user of the template you&rsquo;re writing. One way of solving this is by creating a config map:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">allowed</span><span class="p">([</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;Production&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;Test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">environmentType</span><span class="w"> </span><span class="nv">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="s">&#39;Test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">var</span><span class="w"> </span><span class="nv">environmentConfigurationMap</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">Production</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">appServicePlan</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;P2V3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">capacity</span><span class="p">:</span><span class="w"> </span><span class="nv">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">storageAccount</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;ZRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">Test</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">appServicePlan</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;S2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">capacity</span><span class="p">:</span><span class="w"> </span><span class="nv">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">storageAccount</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;LRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">appServicePlan</span><span class="w"> </span><span class="s">&#39;Microsoft.Web/serverfarms@2020-06-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">appServicePlanName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="nv">environmentConfigurationMap</span><span class="p">[</span><span class="nv">environmentType</span><span class="p">].</span><span class="nv">appServicePlan</span><span class="p">.</span><span class="nv">sku</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Here we are taking a parameter for the environment, but create an object that contains the settings for that particular environment. Note that we are accessing it like we&rsquo;d access a dictionary in python: <code>sku: environmentConfigurationMap[environmentType].appServicePlan.sku</code></p>
<h2 id="naming">Naming</h2>
<blockquote>
<p>In Bicep, you ordinarily use camelCase capitalization style for the names of parameters, variables, and resource symbolic names.</p>
</blockquote>
<p>Resource names cannot be renamed after they&rsquo;re deployed in Azure.</p>
<h2 id="comments">Comments</h2>
<p>use // for single line comments, and /* */ for multi-line comments.</p>
<p>When adding comments to JSON files, you might have to save the file as jsonc to let the code editor know that comments are allowed.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Notes: Fundamentals of Bicep</title>
      <link>https://mischavandenburg.com/zet/articles/fundamentals-of-bicep/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/fundamentals-of-bicep/</guid>
      <description>I&amp;rsquo;ll be working with Bicep during my next contract, so I&amp;rsquo;m working through the Bicep modules on Microsoft Learn to prepare. I must say that these modules are particularly helpful. They are well structured and they provide you with free sandbox environments to practice deploying the templates you create.
Why Bicep? Resources in Azure are deployed by the Azure Resource Manager (ARM). These resources are JSON objects under the covers, and ARM templates are a way to generate these JSON objects.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ll be working with Bicep during my next contract, so I&rsquo;m working through the Bicep modules on Microsoft Learn to prepare. I must say that these modules are particularly helpful. They are well structured and they provide you with free sandbox environments to practice deploying the templates you create.</p>
<h1 id="why-bicep">Why Bicep?</h1>
<p>Resources in Azure are deployed by the Azure Resource Manager (ARM). These resources are JSON objects under the covers, and ARM templates are a way to generate these JSON objects. However, JSON is not really meant to be edited by humans, and the ARM templates are not very suitable for editing either. Thus, Bicep was developed to allow for a better editing experience and better readability and reusability.</p>
<p>Bicep templates are transpiled into JSON objects, which are sent to the Azure API to create resources with the Azure Resource Manager.</p>
<h1 id="fundamentals-of-bicep-notes">Fundamentals of Bicep Notes</h1>
<blockquote>
<p>A <em>parameter</em> lets you bring in values from outside the template file. For example, if someone is manually deploying the template by using the Azure CLI or Azure PowerShell, they&rsquo;ll be asked to provide values for each parameter. They can also create a <em>parameter file</em>, which lists all of the parameters and values they want to use for the deployment. If the template is deployed from an automated process like a deployment pipeline, the pipeline can provide the parameter values.</p>
</blockquote>
<blockquote>
<p>A <em>variable</em> is defined and set within the template. Variables let you store important information in one place and refer to it throughout the template without having to copy and paste it.</p>
</blockquote>
<h2 id="generating-unique-names">generating unique names</h2>
<blockquote>
<p>Bicep has another function called <code>uniqueString()</code> that comes in handy when you&rsquo;re creating resource names. When you use this function, you need to provide a <em>seed value</em>, which should be different across different deployments but consistent across all deployments of the same resources.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">storageAccountName</span><span class="w"> </span><span class="nv">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">uniqueString</span><span class="p">(</span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">id</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>Every time you deploy the same resources, they&rsquo;ll go into the same resource group. The <code>uniqueString()</code> function will return the same value every time.</li>
<li>If you deploy into two different resource groups in the Azure subscription, the <code>resourceGroup().id</code> value will be different, because the resource group names will be different. The <code>uniqueString()</code> function will give different values for each set of resources.</li>
<li>If you deploy into two different Azure subscriptions, <em>even if you use the same resource group name</em>, the <code>resourceGroup().id</code> value will be different because the Azure subscription ID will be different. The <code>uniqueString()</code> function will again give different values for each set of resources.</li>
</ul>
<h3 id="combining-strings">combining strings</h3>
<p>Can use string interpolation to generate a unique string with a recognizable hardcoded part:</p>
<p><code>param storageAccountName string = 'toylaunch${uniqueString(resourceGroup().id)}'</code></p>
<p>This can also be handy for generating correct names. For example, storage accounts may not begin with a number.</p>
<h2 id="parameter-decorators">parameter decorators</h2>
<h3 id="allowed-parameters">allowed parameters</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">allowed</span><span class="p">([</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;nonprod&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;prod&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">environmentType</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span></code></pre></div><p>The template cannot be deployed unless the nonprod or prod values are provided.</p>
<p>@allowed is a <em>parameter decorator</em>: it gives Bicep information on what the parameter&rsquo;s value needs to be.</p>
<p>You can also specify the allowed length of the parameter by using the following decorators:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">minLength</span><span class="p">(</span><span class="nv">5</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">maxLength</span><span class="p">(</span><span class="nv">24</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">storageAccountName</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span></code></pre></div><p>You can apply multiple decorators to a parameter by putting each on a separate line.</p>
<p>These min and maxLength decorators can also be used to limit the length of an array.</p>
<p>To limit int values:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">minValue</span><span class="p">(</span><span class="nv">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">maxValue</span><span class="p">(</span><span class="nv">10</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">appServicePlanInstanceCount</span><span class="w"> </span><span class="nv">int</span><span class="w">
</span></span></span></code></pre></div><p>Finally, you can add descriptions to your parameters with the @description decorator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;The locations into which this Cosmos DB account should be configured. This parameter needs to be a list of objects, each of which has a locationName property.&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">cosmosDBAccountLocations</span><span class="w"> </span><span class="nv">array</span><span class="w">
</span></span></span></code></pre></div><h2 id="if-statements">if statements</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span><span class="nv">storageAccountSkuName</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">(</span><span class="nv">environmentType</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#39;prod&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">?</span><span class="w"> </span><span class="s">&#39;Standard_GRS&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Standard_LRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">var</span><span class="w"> </span><span class="nv">appServicePlanSkuName</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">(</span><span class="nv">environmentType</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#39;prod&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">?</span><span class="w"> </span><span class="s">&#39;P2V3&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s">&#39;F1&#39;</span><span class="w">
</span></span></span></code></pre></div><p>Let&rsquo;s unpack this:</p>
<p>? is a <em>ternary operator</em> and evaluates an if/then statement. The value after ? is used if the expression is true. If it&rsquo;s false, the value after : is used.</p>
<p>So here, if the environmentType is prod, the SKU is set to Standard_GRS</p>
<h2 id="objects-in-bicep">Objects in Bicep</h2>
<p>You can use objects within resource definitions, within variables, or within expressions in your Bicep file.</p>
<p>Objects are the same as dictionaries in python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">appServicePlanSku</span><span class="w"> </span><span class="nv">object</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;F1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">tier</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Free&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">capacity</span><span class="p">:</span><span class="w"> </span><span class="nv">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>These are called &ldquo;properties&rdquo; of type string and int. Note that they are line separated, not comma separated like in python.</p>
<p>When referencing the parameter in the template, you can use dot notation to access the object properties:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">appServicePlan</span><span class="w"> </span><span class="s">&#39;Microsoft.Web/serverfarms@2022-03-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">appServicePlanName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">appServicePlanSku</span><span class="p">.</span><span class="nv">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">tier</span><span class="p">:</span><span class="w"> </span><span class="nv">appServicePlanSku</span><span class="p">.</span><span class="nv">tier</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">capacity</span><span class="p">:</span><span class="w"> </span><span class="nv">appServicePlanSku</span><span class="p">.</span><span class="nv">capacity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>[!important]
Keep in mind that you don&rsquo;t specify the type of each property within an object. However, when you use a property&rsquo;s value, its type must match what&rsquo;s expected. In the previous example, both the name and the tier of the App Service plan SKU must be strings.</p>
</blockquote>
<h3 id="example-tags">Example: tags</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">resourceTags</span><span class="w"> </span><span class="nv">object</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">EnvironmentName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">CostCenter</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;1000100&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">Team</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Human Resources&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">appServicePlan</span><span class="w"> </span><span class="s">&#39;Microsoft.Web/serverfarms@2022-03-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">appServicePlanName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">tags</span><span class="p">:</span><span class="w"> </span><span class="nv">resourceTags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;S1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">appServiceApp</span><span class="w"> </span><span class="s">&#39;Microsoft.Web/sites@&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">appServiceAppName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">tags</span><span class="p">:</span><span class="w"> </span><span class="nv">resourceTags</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">kind</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;app&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">serverFarmId</span><span class="p">:</span><span class="w"> </span><span class="nv">appServicePlan</span><span class="p">.</span><span class="nv">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Here we take the tags for all the resources of the template as parameters. But we easily reuse all the tags for each resource by referencing the entire object.</p>
<h2 id="arrays">Arrays</h2>
<p>Arrays are not typed in Bicep. You cannot specify that it must contain strings.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">cosmosDBAccountLocations</span><span class="w"> </span><span class="nv">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">locationName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;australiaeast&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">locationName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;southcentralus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">locationName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;westeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>This is an array of objects, which have an locationName property each.</p>
<p>And you would access it by:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">account</span><span class="w"> </span><span class="s">&#39;Microsoft.DocumentDB/databaseAccounts@2022-08-15&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">accountName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">locations</span><span class="p">:</span><span class="w"> </span><span class="nv">cosmosDBAccountLocations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="specifying-parameter-values">Specifying parameter values</h2>
<p>When deploying a template file there are three options:</p>
<ol>
<li>default values</li>
<li>command line</li>
<li>parameter file</li>
</ol>
<h3 id="parameter-file">Parameter file</h3>
<p>This is a json file. To deploy a template with a paramter file, use:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">az deployment group create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --template-file main.bicep <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --parameters main.parameters.json
</span></span></code></pre></div><h3 id="priority">priority</h3>
<p>The order of priority is this, from high to low priority:</p>
<ol>
<li>Parameters specified on the command line</li>
<li>Parameter file</li>
<li>Default values in template</li>
</ol>
<h2 id="securing-parameters">Securing parameters</h2>
<p>It is best to use Managed Identities for Azure, but if you need to supply secret values to a deployment, use the @secure() decorator. These values aren&rsquo;t available in the deployment logs, and they won&rsquo;t be displayed on the screen when entered in the terminal.</p>
<h2 id="loops">Loops</h2>
<p>Defined with the for keyword. Usually you iterate over an array to create multiple instances of a resource.</p>
<h3 id="copy-loops">Copy loops</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">storageAccountNames</span><span class="w"> </span><span class="nv">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;saauditus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;saauditeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;saauditapac&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">storageAccountResources</span><span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2021-09-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="nv">storageAccountName</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nv">storageAccountNames</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">storageAccountName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">kind</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;StorageV2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Standard_LRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>Notice that bicep requires &ldquo;[&rdquo; before the for, and a closing bracket.</p>
<h3 id="count-loops">count loops</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span><span class="nv">storageAccountResources</span><span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2021-09-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="nv">i</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="nv">1</span><span class="p">,</span><span class="nv">4</span><span class="p">):</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sa</span><span class="si">${</span><span class="nv">i</span><span class="si">}</span><span class="s">&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">kind</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;StorageV2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Standard_LRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>The range function takes two arguments. The first one specifies the starting value, and the second tells Bicep the number of values you want.</p>
<p>If you use range(3,4), you will get 3, 4, 5 and 6.</p>
<h4 id="accessing-the-index">accessing the index</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">locations</span><span class="w"> </span><span class="nv">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;westeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;eastus2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;eastasia&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">sqlServers</span><span class="w"> </span><span class="s">&#39;Microsoft.Sql/servers@2021-11-01-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="p">(</span><span class="nv">location</span><span class="p">,</span><span class="w"> </span><span class="nv">i</span><span class="p">)</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nv">locations</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-</span><span class="si">${</span><span class="nv">i</span><span class="o">+</span><span class="nv">1</span><span class="si">}</span><span class="s">&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">administratorLogin</span><span class="p">:</span><span class="w"> </span><span class="nv">administratorLogin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">administratorLoginPassword</span><span class="p">:</span><span class="w"> </span><span class="nv">administratorLoginPassword</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>The first value is zero, so you can add 1 to i if you want your names to be sqlserver-1, sqlserver-2 etc.</p>
<p>i is used here, but you can use any value you want.</p>
<h3 id="filtering-with-loops">Filtering with loops</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">sqlServerDetails</span><span class="w"> </span><span class="nv">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-we&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;westeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">environmentName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Production&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-eus2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;eastus2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">environmentName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Development&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-eas&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;eastasia&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">environmentName</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Production&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">sqlServers</span><span class="w"> </span><span class="s">&#39;Microsoft.Sql/servers@2021-11-01-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="nv">sqlServer</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nv">sqlServerDetails</span><span class="p">:</span><span class="w"> </span><span class="kd">if</span><span class="w"> </span><span class="p">(</span><span class="nv">sqlServer</span><span class="p">.</span><span class="nv">environmentName</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#39;Production&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">sqlServer</span><span class="p">.</span><span class="nv">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">sqlServer</span><span class="p">.</span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">administratorLogin</span><span class="p">:</span><span class="w"> </span><span class="nv">administratorLogin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">administratorLoginPassword</span><span class="p">:</span><span class="w"> </span><span class="nv">administratorLoginPassword</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">tags</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">environment</span><span class="p">:</span><span class="w"> </span><span class="nv">sqlServer</span><span class="p">.</span><span class="nv">environmentName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>This will deploy -we and -eas, but not -eus2, because the environmentName does not match Production.</p>
<h3 id="controlling-loop-execution">Controlling loop execution</h3>
<p>By default all the iterations of a loop are executed simultaneously. However, you don&rsquo;t always want this to be happening.</p>
<p>To control the amount you can use the @batchSize decorator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">batchSize</span><span class="p">(</span><span class="nv">2</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">appServiceApp</span><span class="w"> </span><span class="s">&#39;Microsoft.Web/sites@2021-03-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="nv">i</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="nv">1</span><span class="p">,</span><span class="nv">3</span><span class="p">):</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;app</span><span class="si">${</span><span class="nv">i</span><span class="si">}</span><span class="s">&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>Here bicep will wait for the first two to be fully completed before it moves to the next.</p>
<p>To loop sequentially, meaning one at a time in order, use @batchSize(1)</p>
<h3 id="variable-loops">Variable loops</h3>
<p>You can use loops to create arrays that you can use in the Bicep template.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span><span class="nv">items</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="nv">i</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="nv">1</span><span class="p">,</span><span class="w"> </span><span class="nv">5</span><span class="p">):</span><span class="w"> </span><span class="s">&#39;item</span><span class="si">${</span><span class="nv">i</span><span class="si">}</span><span class="s">&#39;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>This produces an array containing the values item1, item2 up to 5 stored in the items variable.</p>
<p>Reminds me of list comprehensions in python.</p>
<p>Here is an example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span><span class="nv">addressPrefix</span><span class="w"> </span><span class="nv">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="s">&#39;10.10.0.0/16&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">subnets</span><span class="w"> </span><span class="nv">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;frontend&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">ipAddressRange</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.0.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;backend&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">ipAddressRange</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.1.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">var</span><span class="w"> </span><span class="nv">subnetsProperty</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="nv">subnet</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nv">subnets</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="nv">subnet</span><span class="p">.</span><span class="nv">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">addressPrefix</span><span class="p">:</span><span class="w"> </span><span class="nv">subnet</span><span class="p">.</span><span class="nv">ipAddressRange</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span><span class="nv">virtualNetwork</span><span class="w"> </span><span class="s">&#39;Microsoft.Network/virtualNetworks@2021-08-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;teddybear&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">properties</span><span class="p">:{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">addressSpace</span><span class="p">:{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">addressPrefixes</span><span class="p">:[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nv">addressPrefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">subnets</span><span class="p">:</span><span class="w"> </span><span class="nv">subnetsProperty</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The content of the subnetsProperty array would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;frontend&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">addressPrefix</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.0.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;backend&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nv">addressPrefix</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.1.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><h3 id="output-loops">Output loops</h3>
<p>To output the contents of the array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span><span class="nv">items</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;item1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;item2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;item3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;item4&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s">&#39;item5&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">output</span><span class="w"> </span><span class="nv">outputItems</span><span class="w"> </span><span class="nv">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="kd">for</span><span class="w"> </span><span class="nv">i</span><span class="w"> </span><span class="kd">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span><span class="nv">0</span><span class="p">,</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="nv">items</span><span class="p">)):</span><span class="w"> </span><span class="nv">items</span><span class="p">[</span><span class="nv">i</span><span class="p">]]</span><span class="w">
</span></span></span></code></pre></div><h2 id="modules">Modules</h2>
<p>You can create modules in Bicep so the code becomes reusable. You can share the modules with other teams and use them for different outcomes.</p>
<blockquote>
<p>Generally, it&rsquo;s not a good practice to create a module for every resource that you deploy. A good Bicep module typically defines multiple related resources. However, if you have a particularly complex resource with a lot of configuration, it might make sense to create a single module to encapsulate the complexity. This approach keeps your main templates simple and uncluttered.</p>
</blockquote>
<p>So for example it would make sense to write a networking module and a database module that handles these resources.</p>
<p>Modules can be nested, but it can quickly become very complex.</p>
<p>To call a module in a template:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">module</span><span class="w"> </span><span class="nv">appModule</span><span class="w"> </span><span class="s">&#39;modules/app.bicep&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;myApp&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">location</span><span class="p">:</span><span class="w"> </span><span class="nv">location</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">appServiceAppName</span><span class="p">:</span><span class="w"> </span><span class="nv">appServiceAppName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">environmentType</span><span class="p">:</span><span class="w"> </span><span class="nv">environmentType</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The modules are stored in the modules folder in your root directory.</p>
<h3 id="parameters">Parameters</h3>
<p>Modules will take parameters, but it is good practice to leave out default values for parameters in modules. In templates it&rsquo;s good practice to add defaults wherever you can. Therefore it is best to leave them out in modules because templates usually have their own default values. This can get confusing if you have similar default values in the templates and modules.</p>
<h3 id="module-dependency">Module dependency</h3>
<p>Bicep will figure out automatically if there is a dependency between modules. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;Username for the virtual machine.&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">adminUsername</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">description</span><span class="p">(</span><span class="s">&#39;Password for the virtual machine.&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">minLength</span><span class="p">(</span><span class="nv">12</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nf">secure</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span><span class="nv">adminPassword</span><span class="w"> </span><span class="nv">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">module</span><span class="w"> </span><span class="nv">virtualNetwork</span><span class="w"> </span><span class="s">&#39;modules/vnet.bicep&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;virtual-network&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">module</span><span class="w"> </span><span class="nv">virtualMachine</span><span class="w"> </span><span class="s">&#39;modules/vm.bicep&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;virtual-machine&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nv">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">adminUsername</span><span class="p">:</span><span class="w"> </span><span class="nv">adminUsername</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">adminPassword</span><span class="p">:</span><span class="w"> </span><span class="nv">adminPassword</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nv">subnetResourceId</span><span class="p">:</span><span class="w"> </span><span class="nv">virtualNetwork</span><span class="p">.</span><span class="nv">outputs</span><span class="p">.</span><span class="nv">subnetResourceId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Here the virtualMachine module takes the subnetResourceId from the virtualNetwork module outputs.</p>
<p>Because it is defined like this, Bicep will wait with deploying the virtualMachine modul until the virtualNetwork module is finished, and pass in the required parameter.</p>
<p>It is important to note that this means that it will wait until the virtualNetwork module is completely finished. If it takes a long time to deploy the previous module, all the subsequent modules will have to wait until it&rsquo;s finished.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Learning Go Day 1: Notes</title>
      <link>https://mischavandenburg.com/zet/go-day-1/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-day-1/</guid>
      <description>The CTO of my new company recommended the Udemy course &amp;ldquo;Go: The Complete Developer&amp;rsquo;s Guide (Golang)&amp;rdquo;. I started today and here are some notes I made.
Hello World in Go We start by writing a Hello World and studying all the elements.
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World!&amp;#34;) } How do we run code? go run main.go runs the program go build main.go compiles it to an executable</description>
      <content:encoded><![CDATA[<p>The CTO of my new company recommended the Udemy course &ldquo;Go: The Complete Developer&rsquo;s Guide (Golang)&rdquo;. I started today and here are some notes I made.</p>
<h1 id="hello-world-in-go">Hello World in Go</h1>
<p>We start by writing a Hello World and studying all the elements.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="how-do-we-run-code">How do we run code?</h3>
<p><code>go run main.go</code> runs the program
<code>go build main.go</code> compiles it to an executable</p>
<h3 id="what-does-package-main-mean">What does package main mean?</h3>
<p><code>package main</code></p>
<p>A package is a collection of common source code files.</p>
<p>One app is a package. If you have multiple files in a folder, such as helper.go or support.go, they should have <code>package main</code> to indicate that they belong to package main.</p>
<p>*Why do we call it main?</p>
<p>There are two types of packages.</p>
<ul>
<li>executable
<ul>
<li>generates file that can be run</li>
</ul>
</li>
<li>reusable
<ul>
<li>used as &ldquo;helpers&rdquo;</li>
<li>reusable logic</li>
</ul>
</li>
</ul>
<p>When you call the package <code>main</code>, you are telling the compiler it needs to be compiled as an executable. If it  has a different name, it won&rsquo;t generate an executable. Main is sacred.</p>
<p>Any other name is a reusable or dependency type package (helper code).</p>
<p>Another important point is that whenever you create an executable package, it must always have a func called &lsquo;main&rsquo;.</p>
<h3 id="what-does-import-fmt-mean">What does import fmt mean?</h3>
<p>The import statement is used to give our package access to code written in another package.  You are saying &ldquo;give access to all code in fmt&rdquo;. Fmt is a standard library package included in Go. Short for format. Used to print out information to the terminal.</p>
<p>Other packages included in the standard library of go are debug, math, encoding, crypto, io.</p>
<p>golang.org/pkg for documentation on standard library packages for Go.</p>
<p>A lot of learning go is learning the standard packages and how they work.</p>
<h3 id="organizing-the-maingo-file">Organizing the main.go file</h3>
<p>It is the same for every go file, just like the code example at the top of the page. Package main, import fmt, and func main.</p>
<h1 id="variable-declarations">variable declarations</h1>
<p><code>var card string = &quot;Ace of Spades&quot;</code></p>
<p>var: we are about to create a new variable</p>
<p>card: name</p>
<p>string = telling the go compiler that only strings will be assigned to this variable</p>
<h3 id="alternatively">Alternatively:</h3>
<p><code>card := &quot;Ace of Spades&quot;</code></p>
<p>Here you are relying on the compiler to figure out what type it is.</p>
<p>Compiler will infer the type.</p>
<p>We only use this := assignment for <strong>new variables</strong></p>
<p>If you want to assign a value to a variable after it is declared, you just do <code>card = &quot;Five of Diamonds&quot;</code></p>
<h3 id="go-types">Go types</h3>
<p>Go is  a statically typed language.</p>
<p>Javascript, python are dynamically typed language. We don&rsquo;t care what value is assigned to a variable.</p>
<p>You always a assign a type to a variable in Go.</p>
<p>Basic go types:</p>
<ul>
<li>bool</li>
<li>string</li>
<li>into</li>
<li>float64 : a number with a decimal after it.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>I started to learn Go!</title>
      <link>https://mischavandenburg.com/zet/start-learning-go/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/start-learning-go/</guid>
      <description>For month&amp;rsquo;s I considered to learn Go, and today I finally started.
I doubted for a long time, because I figured it would be better to dive deeper into Python. However, when I reflected on it, I realized I&amp;rsquo;m able to do the things I want to do in Python. I can create scripts to manipulate data, and I can string different tools and libraries together if I need to. So how deep do I actually need to go as a DevOps Engineer?</description>
      <content:encoded><![CDATA[<p>For month&rsquo;s I considered to learn Go, and today I finally started.</p>
<p>I doubted for a long time, because I figured it would be better to dive deeper into Python. However, when I reflected on it, I realized I&rsquo;m able to do the things I want to do in Python. I can create scripts to manipulate data, and I can string different tools and libraries together if I need to. So how deep do I actually need to go as a DevOps Engineer?</p>
<p>The breakthrough came when I discovered this website: <a href="https://goodfirstissue.dev/language/go">Good First Issue</a>. It&rsquo;s a collection of issues in open source projects which are suitable for people who are starting out. Scrolling through the available projects for Python and Go, I noticed I got a lot more energy from the things I saw in the Go list: Grafana, ArgoCD, Kubernetes. I probably have a long way to go before I can make any meaningful contributions, but my goal is to be able to contribute to open source in the future.</p>
<p>Additionally, I&rsquo;m going to focus my career in the direction of Kubernetes and CNCF, where Go is mostly used.</p>
<p>I have a week off before I start my new job so I&rsquo;m going to spend a few hours a day to get a good start, and when I&rsquo;m working full time again, my plan is to spend at least one pomodoro (25 minutes) a day on Go. Small increments will add up to something big over time.</p>
<p>I created <a href="https://github.com/mischavandenburg/go">a new GitHub repo</a> where I&rsquo;ll be uploading all my practice code and projects.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Controlling Apple Music with hotkeys from anywhere on MacOS</title>
      <link>https://mischavandenburg.com/zet/apple-music-hotkeys/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/apple-music-hotkeys/</guid>
      <description>I&amp;rsquo;m a little obsessed with controlling everything with my keyboard. That&amp;rsquo;s why I loved AwesomeWM so much on my Arch Linux setup, I hardly used my mouse anymore.
One thing I loved about my setup was the ability to control my music from the keyboard from anywhere. This is a feature I picked up from the awesome-copycats theme for AwesomeWM. This was one of the first things I missed when I made my switch to MacOS.</description>
      <content:encoded><![CDATA[<p>I&rsquo;m a little obsessed with controlling everything with my keyboard. That&rsquo;s why I loved AwesomeWM so much on my Arch Linux setup, I hardly used my mouse anymore.</p>
<p>One thing I loved about my setup was the ability to control my music from the keyboard from anywhere. This is a feature I picked up from the awesome-copycats theme for AwesomeWM. This was one of the first things I missed when I made my switch to MacOS.</p>
<p>I started using Apple Music as my music app but it does not have any global hotkeys, and it makes you use a widget with the mouse.</p>
<h1 id="skhd">skhd</h1>
<p>I solved the problem using <a href="https://github.com/koekeishiya/skhd">skhd</a>. This is a free hotkey daemon for MacOS. To install:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install koekeishiya/formulae/skhd
</span></span><span class="line"><span class="cl">brew services start skhd
</span></span></code></pre></div><p>Then I added the following to my skhd config file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Control apple music globally</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Based on Aesome-copycats theme for AesomeWM</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ctrl + cmd + fn - up : osascript -e <span class="s1">&#39;tell app &#34;Music&#34; to playpause&#39;</span>
</span></span><span class="line"><span class="cl">ctrl + cmd + fn - left : osascript -e <span class="s1">&#39;tell app &#34;Music&#34; to back track&#39;</span>
</span></span><span class="line"><span class="cl">ctrl + cmd + fn - right : osascript -e <span class="s1">&#39;tell app &#34;Music&#34; to play next track&#39;</span>
</span></span></code></pre></div><h1 id="links">links</h1>
<p><a href="https://github.com/koekeishiya/skhd">https://github.com/koekeishiya/skhd</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Using parameter expansion as search and replace</title>
      <link>https://mischavandenburg.com/zet/slash-syntax-replace/</link>
      <pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/slash-syntax-replace/</guid>
      <description>Last modified: 2023-01-10
In this evening&amp;rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:
!#/bin/bash echo -e ${PATH//:/\\n} I could not make heads or tails of all these slashes and curly braces, since the output clearly indicated that search and replacement was being performed. I&amp;rsquo;m used to the sed / vim syntax: s/foo/bar
After some research I learned that &amp;lsquo;//&amp;rsquo; is a global search and replace syntax of several text processing programs.</description>
      <content:encoded><![CDATA[<p><em>Last modified: 2023-01-10</em></p>
<p>In this evening&rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">!#/bin/bash
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="si">${</span><span class="nv">PATH</span><span class="p">//:/</span><span class="se">\\</span><span class="nv">n</span><span class="si">}</span>
</span></span></code></pre></div><p>I could not make heads or tails of all these slashes and curly braces, since the output clearly indicated that search and replacement was being performed. I&rsquo;m used to the sed / vim syntax: <code>s/foo/bar</code></p>
<p>After some research I learned that &lsquo;//&rsquo; is a global search and replace syntax of several text processing programs. It is known as parameter expansion in bash.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">foo</span><span class="o">=</span><span class="s2">&#34;1234567890&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">foo</span><span class="p">//[0-9]/x</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This replaces all the digits in the $foo variable with &lsquo;x&rsquo;, so the output would be xxxxxxxxxx</p>
<p>To do this with sed, you would do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$foo</span><span class="s2">&#34;</span> <span class="p">|</span> sed <span class="s1">&#39;s/[0-9]/x/g&#39;</span>
</span></span></code></pre></div><p>For more info:</p>
<p><code>man bash</code></p>
<p><code>/parameter expansion</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Automatically adding my recent blog posts to my GitHub Readme</title>
      <link>https://mischavandenburg.com/zet/adding-posts-github-readme/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/adding-posts-github-readme/</guid>
      <description>My friend gave me a nice tip for customizing the readme on my personal GitHub page. I discovered there is a whole world of plugins and customizations out there.
I set up this one for my GitHub homepage. It uses a workflow to update the readme in my personal GitHub repo with the most recent posts from this blog, based on the RSS feed. Neat!
It was very easy to set up.</description>
      <content:encoded><![CDATA[<p>My friend gave me a nice tip for customizing the readme on my personal GitHub page. I discovered there is a whole world of plugins and customizations out there.</p>
<p>I set up <a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">this one</a> for my GitHub homepage. It uses a workflow to update the readme in my personal GitHub repo with the most recent posts from this blog, based on the RSS feed. Neat!</p>
<p>It was very easy to set up. If you don&rsquo;t have your own blog, you could configure it with a different RSS feed. Hacker News for example.</p>
<p><a href="https://github.com/gautamkrishnar/blog-post-workflow">https://github.com/gautamkrishnar/blog-post-workflow</a></p>
<p><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">https://github.com/abhisheknaiidu/awesome-github-profile-readme</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Back to Bas(h)ics: leaving zsh for now</title>
      <link>https://mischavandenburg.com/zet/back-to-bashics/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/back-to-bashics/</guid>
      <description>I&amp;rsquo;ve used zsh for nearly two years now. I have a custom setup with autocompletion and a good looking prompt.
Recently I&amp;rsquo;ve been diving deeper into bash scripting, following tutorials by rwxrob. He emphasizes all the time that it is much better to stick to bash instead of zsh.
Advantages of using bash:
the default Linux shell available on any Linux system full documentation available anywhere at all times with man bash free software less dependent on external plugins and configurations more portable practice by working on the command line The fact that working on the commandline is already coding convinced me to leave my beloved customized prompt behind (for now) and go back to the basics.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve used zsh for nearly two years now. I have a custom setup with autocompletion and a good looking prompt.</p>
<p>Recently I&rsquo;ve been diving deeper into bash scripting, following tutorials by rwxrob. He emphasizes all the time that it is much better to stick to bash instead of zsh.</p>
<p>Advantages of using bash:</p>
<ul>
<li>the default Linux shell</li>
<li>available on any Linux system</li>
<li>full documentation available anywhere at all times with <code>man bash</code></li>
<li>free software</li>
<li>less dependent on external plugins and configurations</li>
<li>more portable</li>
<li>practice by working on the command line</li>
</ul>
<p>The fact that <a href="/content/zet/bash-cmdline-is-coding.md">working on the commandline is already coding</a> convinced me to leave my beloved customized prompt behind (for now) and go back to the basics.</p>
<p>I want to improve my bash scripting, and working in the bash shell will improve that just by virtue of doing my daily tasks on the command line.</p>
<p>Also I noticed I&rsquo;ve gotten used to zsh&rsquo;s excellent autocompletion and menu navigation. When I log in to servers at work, there is always this little moment of &ldquo;oh, I don&rsquo;t have that here&rdquo;. I want to get better at bash so I&rsquo;m not dependent on these external crutches anymore.</p>
<p>Also, I&rsquo;m going to port my zsh configuration to bash. My current zsh configuration loads a bunch of plugins, and it is more of a hassle to get set up on a new system.</p>
<p>I want to be able to pull my dotfiles repo and do very few steps to configure my environment.</p>
<p>But I&rsquo;m going to miss that good-looking prompt with all the lovely icons!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Working on the command line is already coding</title>
      <link>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</guid>
      <description>Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.
When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.
I think this is such an interesting point. I&amp;rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line.</description>
      <content:encoded><![CDATA[<p>Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.</p>
<p>When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.</p>
<p>I think this is such an interesting point. I&rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line. However, when I was writing bash scripts, I did consider myself to be coding. There is literally no difference. A bash script is just a string of commands that you would enter manually anyway.</p>
<p><a href="https://rwx.gg/">https://rwx.gg/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is a SDK?</title>
      <link>https://mischavandenburg.com/zet/sdk/</link>
      <pubDate>Tue, 03 Jan 2023 07:50:55 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/sdk/</guid>
      <description>A software development kit (SDK) is a set of tools provided by the manufacturer of (usually) a hardware platform, operating system (OS), or programming language.
SDKs contain all the tools you need to get started. They typically contain a compiler, a debugger and an API. But they can also contain documentation and testing tools.</description>
      <content:encoded><![CDATA[<p>A software development kit (SDK) is a set of tools provided by the manufacturer of (usually) a hardware platform, operating system (OS), or programming language.</p>
<p>SDKs contain all the tools you need to get started. They typically contain a compiler, a debugger and an API. But they can also contain documentation and testing tools.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Call Stacks</title>
      <link>https://mischavandenburg.com/zet/call-stacks/</link>
      <pubDate>Mon, 02 Jan 2023 21:11:26 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/call-stacks/</guid>
      <description>When you call a function, the system sets aside space in memory for the function to do its work. Those chunks are called &amp;ldquo;stack frames&amp;rdquo; or &amp;ldquo;function frames.&amp;rdquo;
These frames are arranged in a stack. The frame for the most recently called function is always at the top of the stack. When a new function is called, it becomes the active frame, and it is on top of the stack.</description>
      <content:encoded><![CDATA[<p>When you call a function, the system sets aside space in memory  for the function to do its work. Those chunks are called &ldquo;stack frames&rdquo; or &ldquo;function frames.&rdquo;</p>
<p>These frames are arranged in a stack. The frame for the most recently called function is always at the top of the stack. When a new function is called, it becomes the active frame, and it is on top of the stack.</p>
<p>The function that is actually doing something at the moment is on top of the stack and is known as the &ldquo;active frame.&rdquo;</p>
<p>When the function finishes its work, the frame is popped off of the stack. The frame in second place becomes the active frame. It had been paused in the meantime, and now it is active again, because it is on top.</p>
<p>Functions that are not on top, are not running.</p>
<p><a href="https://www.youtube.com/watch?v=aCPkszeKRa4">This video explains it well.</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Getting Started with Neovim: kickstart.nvim</title>
      <link>https://mischavandenburg.com/zet/articles/kickstart-nvim/</link>
      <pubDate>Sun, 01 Jan 2023 09:11:57 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/kickstart-nvim/</guid>
      <description>I&amp;rsquo;ve been using neovim for over a year now, and I&amp;rsquo;m very happy that I went through the initial difficulty of learning vim. One of the best perks of using neovim is that you can customize your entire editing experience and workflow. However, it can be a daunting experience to start with an empty configuration and set up everything from scratch.
I started with an empty vanilla vim config and slowly added the plugins as I went along.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve been using neovim for over a year now, and I&rsquo;m very happy that I went through the initial difficulty of learning vim. One of the best perks of using neovim is that you can customize your entire editing experience and workflow. However, it can be a daunting experience to start with an empty configuration and set up everything from scratch.</p>
<p>I started with an empty vanilla vim config and slowly added the plugins as I went along. Videos by content creators such as ThePrimagen were also helpful in getting inspiration on which plugins I might like for my setup. But this might not be suitable for everyone. I was only editing yaml files and writing simple Python scripts at the time, whereas you might be looking for an IDE experience out of the box.</p>
<p>Recently I discovered <a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a> by neovim core maintainer TJdeVries.</p>
<p>I decided to give it a try, and I was pleasantly surprised. It is a great starting setup for a beginner. It is simple and does not overwhelm you with thousands of features.</p>
<p>I&rsquo;ve completely rewritten my config based on kickstart.nvim, and I am delighted with the result. Especially the LSP setup is very well thought out, and it works much better than the setup I came up with on my own.</p>
<p>TJ DeVries also made a <a href="https://youtu.be/stqUbv-5u2s">video</a> introducing kickstart.nvim and going through the initial setup.</p>
<p>I highly recommend kickstart.nvim if you are interested in using neovim and are looking for a sane place to start.</p>
<h1 id="links">links</h1>
<p><a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a></p>
<p><a href="https://youtu.be/stqUbv-5u2s">Kickstart video by TJdeVries</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My First Contribution to Open Source</title>
      <link>https://mischavandenburg.com/my-first-contribution-to-open-source/</link>
      <pubDate>Fri, 18 Feb 2022 16:21:12 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/my-first-contribution-to-open-source/</guid>
      <description>Two months ago I knew nothing about GitHub. This week my first pull request got merged into master!
Programming tutorials and books very often suggest that you should try to contribute to open source in order to practice your skills. Even though I am still on the beginner level in Python, I managed to find something I could contribute with. But there were a few things I needed to learn in order to be able to do so.</description>
      <content:encoded><![CDATA[<p>Two months ago I knew nothing about GitHub. This week my first pull request got merged into master!</p>
<p>Programming tutorials and books very often suggest that you should try to contribute to open source in order to practice your skills. Even though I am still on the beginner level in Python, I managed to find something I could contribute with. But there were a few things I needed to learn in order to be able to do so.</p>
<p>GitHub is a place where many open source projects are hosted. Projects are hosted in “repositories” available to the public. Everyone can go in and take a look at the code. And the great thing about it is that everyone can contribute to the code as well.</p>
<p>Two months ago I knew almost nothing about GitHub. Surely, I had often downloaded software from GitHub, and I knew it had to do with version control. But I had no idea that it was such a powerful system of enabling collaboration for software projects.</p>
<p>During an assignment in my DevOps Traineeship I spent some time learning about Github and the Git language. I learned about repositories, branches, commits and pull requests. Now I wanted to take it to the next level and make a contribution of my own somewhere.</p>
<h3 id="the-project">the project</h3>
<p>As I have mentioned in other posts, I love game automation, and recently I discovered the Botty project, which is a bot written for the game Diablo 2: Resurrected. The bot is written in Python, which means that it is a great way of applying my Python learning to something I am passionate about.</p>
<p>The bot uses computer vision in order to recognise what is on the screen and run scripts accordingly. The monsters in the game drop items, and if you want the bot to pick up items, it will need to be taught which items it needs to pick up.</p>
<p>This is done by adding some images to its image database and adding the filenames to a list of items. When the bot scans the screen for items, it will look for a match in its image database, and when it matches, it will click the corresponding pixels on the screen to pick up the item.</p>
<p>Here’s what an image in the database looks like:</p>
<p><img loading="lazy" src="/axe.png" type="" alt=""  /></p>
<p>I am doing a Holy Grail project in this game, which means that I am collecting every item in the game. It is quite an undertaking as there are 506 items in the game, and some items have a drop chance of 1 : 1.000.000. Luckily I have a bot to help me with this project.</p>
<p>Not surprisingly, many items were still missing from the bot because it is a fairly new project that is still in development. And as I needed my bot to pick up the items I needed, I decided to add these 46 missing items to the database.</p>
<h3 id="forks-commits-and-pull-requests">forks, commits and pull requests</h3>
<p>After doing the work I still needed to figure out how I should offer these items to the project. Luckily someone shared a few very helpful tutorials in the project’s discord. This is the tutorial I used for my first contribution:</p>
<p><a href="https://www.dataschool.io/how-to-contribute-on-github/">Step-by-step Guide to Contributing on Github</a></p>
<p>You begin with “forking” the project repository, which basically means making your own copy of all the code in the project. Then you add your contribution to the fork by cloning it to your local machine and making your changes to a new branch.</p>
<p>When you have committed your changes and pushed your new branch to your fork, you are ready to make your first pull request. A pull request is a way of telling the project that you have something to contribute. You are sharing your version of the project repository including your proposed changes, and someone from the project will take a look at your suggestions and see if they are useful and compatible.</p>
<h3 id="merged-into-master">merged into master</h3>
<p>After a few days someone had a look at my contribution and requested me to make a few small adjustments. When I managed to incorporate those my contribution was accepted, and my changes were “merged into master”, which means that my contribution was brought into the main version of the project’s code.</p>
<p><img loading="lazy" src="/merged.png" type="" alt=""  /></p>
<h3 id="i-learned-a-lot">I learned a lot!</h3>
<p>As I am typing out this article, I am very satisfied with how much I have learned in the past few months already. I remember being very confused about all the GitHub terminology when I attended my first meetings during my DevOps traineeship.</p>
<p>Going through the process of making a contribution to open source on GitHub has been an enriching experience. It seemed quite intimidating at the start, but by following a good tutorial I managed to successfully submit my first pull request. I feel I have a much better understanding of Git, GitHub and the workflow.</p>
<p>Another valuable lesson I learned is that you don’t need to be a Senior Engineer in order to be able to contribute to open source. Although this project is written in Python, my contribution had very little to do with code, but I provided assets which were required by the code. So if you are a beginner at programming, you can look for other ways to contribute, such as fixing spelling mistakes in the documentation, providing images or writing wiki pages.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Mirst Useful Python Script</title>
      <link>https://mischavandenburg.com/my-first-useful-python-script/</link>
      <pubDate>Sat, 05 Feb 2022 05:49:06 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/my-first-useful-python-script/</guid>
      <description>The best part of learning Python is trying to identify things in my life which I can automate by writing a script. Learning a programming language involves doing a lot of exercises that sometimes lack a connection with the real world. But after I decided to go for it, I am always on the lookout for projects. Not only for my job as a DevOps Engineer, but also for my private life.</description>
      <content:encoded><![CDATA[<p>The best part of learning Python is trying to identify things in my life which I can automate by writing a script. Learning a programming language involves doing a lot of exercises that sometimes lack a connection with the real world. But after I decided to go for it, I am always on the lookout for projects. Not only for my job as a DevOps Engineer, but also for my private life. In this case, I needed to write a program that parses log files from a bot so I could get a total number of runs. You can have a look at the final result in my Diablo 2 <a href="https://github.com/mischavandenburg/diablo2">GitHub repo. </a></p>
<p>Like I wrote in my <a href="https://mischavandenburg.com/my-journey-into-devops-so-far/">journey into DevOps article</a>, I love automating games. Diablo 2 is a game that was originally released in 2002 and which recently was remastered. Diablo 2 always had a very strong presence of bots in the online game, and it didn’t take long before I also joined the ride.</p>
<p>A few months after the remaster the first bots have started emerging as well. There is a a particularly good one written in Python which is an <a href="https://github.com/aeon0/botty">open source project</a>, which is a perfect opportunity for me to learn more about Python by trying to understand its code and solving problems. I was very excited to discover it because I was playing quite a few hours a week. Diablo 2 is a very grindy game and it takes a lot of time to find the needed gear. Now I could finally outsource my grinding to the computer again.</p>
<h2 id="the-problem">the problem</h2>
<p>Although the bot is very functional and does several tasks very well, there are still features missing because it is relatively early in its development. One of these features is keeping track of the total amount of runs that the bot has done. In Diablo, every time you play you start a “game” or an instance. In that game there are certain bosses you can kill, and when you are finished you exit your game. This is called a run. Then you create a new game and everything is reset, and you get another shot at killing the bosses to get the precious gear.</p>
<p>Being the nerd that I am, I like to keep track of the total amount of runs that the bot has done. On these numbers I like to apply some calculations to see how many items I get per xxxx runs and suchlike. The bot keeps track of the amount of runs it does per session and stores them in a log file. But there is no functionality of seeing the total amount of runs you have done, and when I discovered this, I realised I had my first little Python project.</p>
<h2 id="log-files">log files</h2>
<p>Every time you close the bot after a session, a log file is created that looks like this:</p>
<p><img loading="lazy" src="/logfile.png" type="" alt=""  /></p>
<p>It is formatted as a .txt file and shows information about the bosses that were run and the items that were found. Most importantly, it contains the amount of games that were done in the session. Even after only using the bot for a short time I had over 100 log files to go through, and that’s where I needed a script that would go through these files for me and add the numbers in order to get the total amount of runs.</p>
<h2 id="the-script">the script</h2>
<p>After completing chapter 9 and 10 in the Automate the Boring Stuff book, I learned about file paths and opening files and reading from them. Now it was time to apply that knowledge. The process went pretty well and soon I had a script that would open the files for me.</p>
<p>Things got a little bit more complicated when I needed to read information from the files. And of course, this operation would almost certainly involve the dreaded topic of regex. In the end it was not as bad, and I ended up with the following regex:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">regex_games</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;Games:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">regex_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;nihla&#39;</span><span class="p">:</span> <span class="s1">&#39;Nihl|Nihlatak&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;pindle&#39;</span><span class="p">:</span> <span class="s1">&#39;Pin|Pindle&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;eldritch&#39;</span><span class="p">:</span> <span class="s1">&#39;Eld&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>As you will see afterwards, I needed a way to check every line for a certain statement. However, rather than hardcoding every operation, I wanted it to loop over a list of terms. This meant that I could easily go back to the code and add a few more search statements if I needed them. I ended up storing them in a dictionary as you can see above. I really like the way you can make dictionaries in Python and have every entry on a new line. It makes the code very readable and structured.</p>
<p>And this is the actual looping sequence that I ended up with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">folder_name</span><span class="p">,</span> <span class="n">sub_folder</span><span class="p">,</span> <span class="n">file_names</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">file_names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">PurePath</span><span class="p">(</span><span class="n">folder_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">my_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># search for games number line</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">my_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># find number of games and add to total games</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">regex_games</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">g</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="n">total_games</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                    <span class="n">f</span> <span class="o">=</span> <span class="n">my_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1"># check which runs were done by using the regex dict</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">regex_dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">location</span> <span class="o">=</span> <span class="n">regex_dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="n">reg</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="c1"># if there is a match, add the numbers to the total variable</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="n">reg</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                            <span class="n">var_name</span> <span class="o">=</span> <span class="n">key</span> <span class="o">+</span> <span class="s1">&#39;_total&#39;</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">globals</span><span class="p">()[</span><span class="n">var_name</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span></code></pre></div><p>This sequence loops through the folder, the subfolder, and opens each file one by one. When the file is opened it looks for the “Games: 25” line and adds the number to a variable. However, I was not only interested in the total number of games. I also wanted to get more insight in how many Pindle runs or Nihla runs I had done. So I set up another regex search and made sure that the number of games are added to a “pindle_total” or “nihla_total” variable.</p>
<h2 id="result">result</h2>
<p>When running the script in the shell, the result looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mischa@MischaMacBook stats_parser % python3 total_runs.py 
</span></span><span class="line"><span class="cl">Total runs: <span class="m">7159</span>
</span></span><span class="line"><span class="cl">Pindle runs: <span class="m">6926</span>
</span></span><span class="line"><span class="cl">Eldritch + Shenk runs: <span class="m">367</span>
</span></span><span class="line"><span class="cl">Nihla runs: <span class="m">232</span>
</span></span><span class="line"><span class="cl">mischa@MischaMacBook stats_parser % 
</span></span></code></pre></div><p>Exactly what I wanted. Now I can just paste my stats files into a folder and see how many runs I’ve done. Maybe I’ll improve it by building a GUI. Another fun idea I have is to create a little pipeline where this script would be run once an hour and the stats would be uploaded to a webpage somewhere, so others could see the amount of runs of my bot. Not that anyone is interested in that, but it is a fun project for me to do. Let’s see what happens!</p>
<p>For now I am very happy with the result. It was a very satisfying experience to identify a problem that I had and to be able to come up with an automated solution. Of course it is still very rudimentary programming, and there is a long long way ahead of me, but it was fun to finally do something practical that solved a particular problem in my life.</p>
<p>The final result is in my <a href="https://github.com/mischavandenburg/diablo2">Diablo 2 GitHub repo.</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python Project: Mad Libs</title>
      <link>https://mischavandenburg.com/python-project-mad-libs/</link>
      <pubDate>Tue, 01 Feb 2022 21:41:28 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/python-project-mad-libs/</guid>
      <description>I am currently working through the book Automate the Boring Stuff by Al Sweigart . I can already highly recommend it to anybody who is learning Python.
Chapter 9 is about reading and writing files, and there are two assignments at the end of the chapter. Here I’ll discuss my solution of the Mad Libs assignment.
here is the full assignment text: Mad Libs Create a Mad Libs program that reads in text files and lets the user add their own text anywhere the word ADJECTIVE, NOUN, ADVERB, or VERB appears in the text file.</description>
      <content:encoded><![CDATA[<p>I am currently working through the book <a href="https://automatetheboringstuff.com">Automate the Boring Stuff</a> by Al Sweigart . I can already highly recommend it to anybody who is learning Python.</p>
<p>Chapter 9 is about reading and writing files, and there are two assignments at the end of the chapter. Here I’ll discuss my solution of the Mad Libs assignment.</p>
<h3 id="here-is-the-full-assignment-text">here is the full assignment text:</h3>
<pre tabindex="0"><code>Mad Libs
Create a Mad Libs program that reads in text files and lets the user add their own text anywhere the word ADJECTIVE, NOUN, ADVERB, or VERB appears in the text file. For example, a text file may look like this:
The ADJECTIVE panda walked to the NOUN and then VERB. A nearby NOUN was
unaffected by these events.

The program would find these occurrences and prompt the user to replace them.
Enter an adjective:
silly
Enter a noun:
chandelier
Enter a verb:
screamed
Enter a noun:
pickup truck

The following text file would then be created:
The silly panda walked to the chandelier and then screamed. A nearby pickup
truck was unaffected by these events.

The results should be printed to the screen and saved to a new text file.
</code></pre><p>Looks pretty simple, right? I went into it with a lot of zeal and started writing a long list of if statements. My first attempts at the solution involved matching the words NOUN and ADJECTIVE directly, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;ADJECTIVE&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">inv</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter an adjective: &#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>However, this is problematic because as you can see, the sentence can contain words with a period attached, such as “VERB.” in the above example.</p>
<h2 id="no-please-no-regex">no, please no regex!</h2>
<p>I’ve understood that here is a general anxiety around regex. I have certainly noticed it in myself and some of my junior engineer friends. As soon as I read the word regex, or realise that an assignment is going to involve regex, I get a constricting feeling in my throat and a rise in my heart rate.</p>
<p>I’ve had to struggle with it quite a bit during my freeCodeCamp Front End Development Certificate, and the memories are still fresh in my mind.</p>
<p>So, like any other ‘rational’ human being, I tried to approach this relatively simple assignment with all sorts of ways trying to account for a period ending the word:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">period_check</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="s2">&#34;.&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># loop over the array and prompt user</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">source_text</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">period</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">period_check</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">period</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;ADJECTIVE&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">invoer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter an adjective: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">period</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result_text</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">invoer</span> <span class="o">+</span> <span class="s2">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">period</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result_text</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">invoer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;NOUN&#39;</span><span class="p">:</span>
</span></span></code></pre></div><p>It’s quite funny to see the lengths we go through to avoid regular expressions. However, as you maybe deduce from the code above, it didn’t work, and after a couple of hours of fiddling I gave up, and like any other frustrated programmer, I started to google.</p>
<p>I quickly found solutions to this assignment and they all involved regex, and I realised I could not walk away from my fears anymore.</p>
<h2 id="an-elegant-solution">an elegant solution</h2>
<p>Eventually I ended up with the following result for the part of my assignment that needed to recognise and replace the words with the user input. Of course I heavily borrowed from my Google search results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># set up and match the regex</span>
</span></span><span class="line"><span class="cl"><span class="n">grammar_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;ADJECTIVE|NOUN|VERB|ADVERB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">match_regex</span> <span class="o">=</span> <span class="n">grammar_regex</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace the matches with user input </span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">match_regex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ask_user</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Please enter &#39;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">source_text</span> <span class="o">=</span> <span class="n">source_text</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">ask_user</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><p>When I say elegant, I mean elegant in total Python beginner terms. I’m sure there are enough Seniors out there who will burst out laughing when they see this. But to me, it was quite an eye-opening experience to see this little piece of code do exactly what I had intended to achieve with 3 different functions and long blocks of if statements.</p>
<p>Also, I was pleasantly surprised with how simple regex can be in Python. In this case there were no scary [Az ^**/!!${}aa{}aA{nF}] statements. We simply defined which words we wanted and called the findall() module to generate a list with all the matches.</p>
<p>Then we iterate over the list of matches and for each match we ask the user for the desired word, and replace it in the source_text.</p>
<h2 id="final-result">final result</h2>
<p>Having sorted out the pattern matching and replacing part, it was only a matter of implementing reading from files and writing to a new file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Automate the Boring Stuff chapter 9</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Mad Libs assignment</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Mischa van den Burg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ask the user which file to open</span>
</span></span><span class="line"><span class="cl"><span class="n">file_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter the filename. For example, grammar.txt: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># my script and .txt file are located in ~/python/automatetheboringstuff/ </span>
</span></span><span class="line"><span class="cl"><span class="n">text_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">Path</span><span class="o">.</span><span class="n">home</span><span class="p">()</span> <span class="o">/</span> <span class="s1">&#39;python&#39;</span> <span class="o">/</span> <span class="s1">&#39;automatetheboringstuff&#39;</span> <span class="o">/</span> <span class="n">file_name</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read the file and store in variable &amp; close</span>
</span></span><span class="line"><span class="cl"><span class="n">source_text</span> <span class="o">=</span> <span class="n">text_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">text_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># set up and match the regex</span>
</span></span><span class="line"><span class="cl"><span class="n">grammar_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;ADJECTIVE|NOUN|VERB|ADVERB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">match_regex</span> <span class="o">=</span> <span class="n">grammar_regex</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace the matches with user input </span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">match_regex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ask_user</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter &#39;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">source_text</span> <span class="o">=</span> <span class="n">source_text</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">ask_user</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># write to the new file and print the result</span>
</span></span><span class="line"><span class="cl"><span class="n">new_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;new_&#39;</span> <span class="o">+</span> <span class="n">file_name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span></code></pre></div><p>I was getting into some better functionality, such as accounting for existing filenames, and making the pathing relative so it could be run from anywhere. But I decided to save that for a later assignment.</p>
<p>The assignment was clear and did not require such functionality. I need to learn to keep things simple, and I decided to do just what I was asked and not go into any other rabbit holes.</p>
<h1 id="lessons-learned">Lessons Learned</h1>
<p>All in all the assignment is pretty simple, but I learned surprisingly much from it. I decided I’ll need to change and learn to love regex rather than fear it, because it showed me how powerful it can be.</p>
<p>Also, I got some insight into my own mind and how I tend to work. I realised I have a tendency to make things much more complicated than they need to be. I need to learn to keep things simple.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
