<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Coding on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/coding/</link>
    <description>Recent content in Coding on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes: Fundamentals of Bicep</title>
      <link>https://mischavandenburg.com/zet/articles/fundamentals-of-bicep/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/fundamentals-of-bicep/</guid>
      <description>I&amp;rsquo;ll be working with Bicep during my next contract, so I&amp;rsquo;m working through the Bicep modules on Microsoft Learn to prepare. I must say that these modules are particularly helpful. They are well structured and they provide you with free sandbox environments to practice deploying the templates you create.
Why Bicep? Resources in Azure are deployed by the Azure Resource Manager (ARM). These resources are JSON objects under the covers, and ARM templates are a way to generate these JSON objects.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ll be working with Bicep during my next contract, so I&rsquo;m working through the Bicep modules on Microsoft Learn to prepare. I must say that these modules are particularly helpful. They are well structured and they provide you with free sandbox environments to practice deploying the templates you create.</p>
<h1 id="why-bicep">Why Bicep?</h1>
<p>Resources in Azure are deployed by the Azure Resource Manager (ARM). These resources are JSON objects under the covers, and ARM templates are a way to generate these JSON objects. However, JSON is not really meant to be edited by humans, and the ARM templates are not very suitable for editing either. Thus, Bicep was developed to allow for a better editing experience and better readability and reusability.</p>
<p>Bicep templates are transpiled into JSON objects, which are sent to the Azure API to create resources with the Azure Resource Manager.</p>
<h1 id="fundamentals-of-bicep-notes">Fundamentals of Bicep Notes</h1>
<blockquote>
<p>A <em>parameter</em> lets you bring in values from outside the template file. For example, if someone is manually deploying the template by using the Azure CLI or Azure PowerShell, they&rsquo;ll be asked to provide values for each parameter. They can also create a <em>parameter file</em>, which lists all of the parameters and values they want to use for the deployment. If the template is deployed from an automated process like a deployment pipeline, the pipeline can provide the parameter values.</p>
</blockquote>
<blockquote>
<p>A <em>variable</em> is defined and set within the template. Variables let you store important information in one place and refer to it throughout the template without having to copy and paste it.</p>
</blockquote>
<h2 id="generating-unique-names">generating unique names</h2>
<blockquote>
<p>Bicep has another function called <code>uniqueString()</code> that comes in handy when you&rsquo;re creating resource names. When you use this function, you need to provide a <em>seed value</em>, which should be different across different deployments but consistent across all deployments of the same resources.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>storageAccountName<span class="w"> </span><span class="nf">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="nf">uniqueString</span><span class="p">(</span><span class="nf">resourceGroup</span><span class="p">().</span>id<span class="p">)</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>Every time you deploy the same resources, they&rsquo;ll go into the same resource group. The <code>uniqueString()</code> function will return the same value every time.</li>
<li>If you deploy into two different resource groups in the Azure subscription, the <code>resourceGroup().id</code> value will be different, because the resource group names will be different. The <code>uniqueString()</code> function will give different values for each set of resources.</li>
<li>If you deploy into two different Azure subscriptions, <em>even if you use the same resource group name</em>, the <code>resourceGroup().id</code> value will be different because the Azure subscription ID will be different. The <code>uniqueString()</code> function will again give different values for each set of resources.</li>
</ul>
<h3 id="combining-strings">combining strings</h3>
<p>Can use string interpolation to generate a unique string with a recognizable hardcoded part:</p>
<p><code>param storageAccountName string = 'toylaunch${uniqueString(resourceGroup().id)}'</code></p>
<p>This can also be handy for generating correct names. For example, storage accounts may not begin with a number.</p>
<h2 id="parameter-decorators">parameter decorators</h2>
<h3 id="allowed-parameters">allowed parameters</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nd">allowed</span><span class="p">([</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;nonprod&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;prod&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span>environmentType<span class="w"> </span><span class="nf">string</span><span class="w">
</span></span></span></code></pre></div><p>The template cannot be deployed unless the nonprod or prod values are provided.</p>
<p>@allowed is a <em>parameter decorator</em>: it gives Bicep information on what the parameter&rsquo;s value needs to be.</p>
<p>You can also specify the allowed length of the parameter by using the following decorators:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nd">minLength</span><span class="p">(</span>5<span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nd">maxLength</span><span class="p">(</span>24<span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span>storageAccountName<span class="w"> </span><span class="nf">string</span><span class="w">
</span></span></span></code></pre></div><p>You can apply multiple decorators to a parameter by putting each on a separate line.</p>
<p>These min and maxLength decorators can also be used to limit the length of an array.</p>
<p>To limit int values:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nd">minValue</span><span class="p">(</span>1<span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nd">maxValue</span><span class="p">(</span>10<span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span>appServicePlanInstanceCount<span class="w"> </span><span class="nf">int</span><span class="w">
</span></span></span></code></pre></div><p>Finally, you can add descriptions to your parameters with the @description decorator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nd">description</span><span class="p">(</span><span class="s">&#39;The locations into which this Cosmos DB account should be configured. This parameter needs to be a list of objects, each of which has a locationName property.&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span>cosmosDBAccountLocations<span class="w"> </span><span class="nf">array</span><span class="w">
</span></span></span></code></pre></div><h2 id="if-statements">if statements</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span>storageAccountSkuName<span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">(</span>environmentType<span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="si">&#39;prod&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">?</span><span class="w"> </span><span class="si">&#39;Standard_GRS&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Standard_LRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">var</span><span class="w"> </span>appServicePlanSkuName<span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">(</span>environmentType<span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="si">&#39;prod&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">?</span><span class="w"> </span><span class="si">&#39;P2V3&#39;</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="si">&#39;F1&#39;</span><span class="w">
</span></span></span></code></pre></div><p>Let&rsquo;s unpack this:</p>
<p>? is a <em>ternary operator</em> and evaluates an if/then statement. The value after ? is used if the expression is true. If it&rsquo;s false, the value after : is used.</p>
<p>So here, if the environmentType is prod, the SKU is set to Standard_GRS</p>
<h2 id="objects-in-bicep">Objects in Bicep</h2>
<p>You can use objects within resource definitions, within variables, or within expressions in your Bicep file.</p>
<p>Objects are the same as dictionaries in python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>appServicePlanSku<span class="w"> </span><span class="kt">object</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;F1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">tier</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Free&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">capacity</span><span class="p">:</span><span class="w"> </span>1<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>These are called &ldquo;properties&rdquo; of type string and int. Note that they are line separated, not comma separated like in python.</p>
<p>When referencing the parameter in the template, you can use dot notation to access the object properties:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span>appServicePlan<span class="w"> </span><span class="s">&#39;Microsoft.Web/serverfarms@2022-03-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>appServicePlanName<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>appServicePlanSku<span class="p">.</span>name<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">tier</span><span class="p">:</span><span class="w"> </span>appServicePlanSku<span class="p">.</span>tier<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">capacity</span><span class="p">:</span><span class="w"> </span>appServicePlanSku<span class="p">.</span>capacity<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>[!important]
Keep in mind that you don&rsquo;t specify the type of each property within an object. However, when you use a property&rsquo;s value, its type must match what&rsquo;s expected. In the previous example, both the name and the tier of the App Service plan SKU must be strings.</p>
</blockquote>
<h3 id="example-tags">Example: tags</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>resourceTags<span class="w"> </span><span class="kt">object</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">EnvironmentName</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Test&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">CostCenter</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;1000100&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">Team</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;Human Resources&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span>appServicePlan<span class="w"> </span><span class="s">&#39;Microsoft.Web/serverfarms@2022-03-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>appServicePlanName<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">tags</span><span class="p">:</span><span class="w"> </span>resourceTags<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;S1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span>appServiceApp<span class="w"> </span><span class="s">&#39;Microsoft.Web/sites@&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>appServiceAppName<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">tags</span><span class="p">:</span><span class="w"> </span>resourceTags<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">kind</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;app&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">serverFarmId</span><span class="p">:</span><span class="w"> </span>appServicePlan<span class="p">.</span>id<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Here we take the tags for all the resources of the template as parameters. But we easily reuse all the tags for each resource by referencing the entire object.</p>
<h2 id="arrays">Arrays</h2>
<p>Arrays are not typed in Bicep. You cannot specify that it must contain strings.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>cosmosDBAccountLocations<span class="w"> </span><span class="nf">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">locationName</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;australiaeast&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">locationName</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;southcentralus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">locationName</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;westeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>This is an array of objects, which have an locationName property each.</p>
<p>And you would access it by:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span>account<span class="w"> </span><span class="s">&#39;Microsoft.DocumentDB/databaseAccounts@2022-08-15&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>accountName<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">locations</span><span class="p">:</span><span class="w"> </span>cosmosDBAccountLocations<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="specifying-parameter-values">Specifying parameter values</h2>
<p>When deploying a template file there are three options:</p>
<ol>
<li>default values</li>
<li>command line</li>
<li>parameter file</li>
</ol>
<h3 id="parameter-file">Parameter file</h3>
<p>This is a json file. To deploy a template with a paramter file, use:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">az deployment group create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --template-file main.bicep <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --parameters main.parameters.json
</span></span></code></pre></div><h3 id="priority">priority</h3>
<p>The order of priority is this, from high to low priority:</p>
<ol>
<li>Parameters specified on the command line</li>
<li>Parameter file</li>
<li>Default values in template</li>
</ol>
<h2 id="securing-parameters">Securing parameters</h2>
<p>It is best to use Managed Identities for Azure, but if you need to supply secret values to a deployment, use the @secure() decorator. These values aren&rsquo;t available in the deployment logs, and they won&rsquo;t be displayed on the screen when entered in the terminal.</p>
<h2 id="loops">Loops</h2>
<p>Defined with the for keyword. Usually you iterate over an array to create multiple instances of a resource.</p>
<h3 id="copy-loops">Copy loops</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>storageAccountNames<span class="w"> </span><span class="nf">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;saauditus&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;saauditeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;saauditapac&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span>storageAccountResources<span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2021-09-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span>storageAccountName<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="py">storageAccountNames</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>storageAccountName<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">kind</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;StorageV2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Standard_LRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>Notice that bicep requires &ldquo;[&rdquo; before the for, and a closing bracket.</p>
<h3 id="count-loops">count loops</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">resource</span><span class="w"> </span>storageAccountResources<span class="w"> </span><span class="s">&#39;Microsoft.Storage/storageAccounts@2021-09-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span>i<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span>1<span class="err">,</span>4<span class="p">):</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;sa${i}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">kind</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;StorageV2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">sku</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Standard_LRS&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>The range function takes two arguments. The first one specifies the starting value, and the second tells Bicep the number of values you want.</p>
<p>If you use range(3,4), you will get 3, 4, 5 and 6.</p>
<h4 id="accessing-the-index">accessing the index</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>locations<span class="w"> </span><span class="nf">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;westeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;eastus2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;eastasia&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span>sqlServers<span class="w"> </span><span class="s">&#39;Microsoft.Sql/servers@2021-11-01-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span><span class="p">(</span>location<span class="err">,</span><span class="w"> </span>i<span class="p">)</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="py">locations</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-${i+1}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">administratorLogin</span><span class="p">:</span><span class="w"> </span>administratorLogin<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">administratorLoginPassword</span><span class="p">:</span><span class="w"> </span>administratorLoginPassword<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>The first value is zero, so you can add 1 to i if you want your names to be sqlserver-1, sqlserver-2 etc.</p>
<p>i is used here, but you can use any value you want.</p>
<h3 id="filtering-with-loops">Filtering with loops</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>sqlServerDetails<span class="w"> </span><span class="nf">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-we&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">location</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;westeurope&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">environmentName</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Production&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-eus2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">location</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;eastus2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">environmentName</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Development&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;sqlserver-eas&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">location</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;eastasia&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">environmentName</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;Production&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span>sqlServers<span class="w"> </span><span class="s">&#39;Microsoft.Sql/servers@2021-11-01-preview&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span>sqlServer<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="py">sqlServerDetails</span><span class="p">:</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span>sqlServer<span class="p">.</span>environmentName<span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="si">&#39;Production&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>sqlServer<span class="p">.</span>name<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span>sqlServer<span class="p">.</span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">administratorLogin</span><span class="p">:</span><span class="w"> </span>administratorLogin<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">administratorLoginPassword</span><span class="p">:</span><span class="w"> </span>administratorLoginPassword<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">tags</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">environment</span><span class="p">:</span><span class="w"> </span>sqlServer<span class="p">.</span>environmentName<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>This will deploy -we and -eas, but not -eus2, because the environmentName does not match Production.</p>
<h3 id="controlling-loop-execution">Controlling loop execution</h3>
<p>By default all the iterations of a loop are executed simultaneously. However, you don&rsquo;t always want this to be happening.</p>
<p>To control the amount you can use the @batchSize decorator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nd">batchSize</span><span class="p">(</span>2<span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span>appServiceApp<span class="w"> </span><span class="s">&#39;Microsoft.Web/sites@2021-03-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span>i<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span>1<span class="err">,</span>3<span class="p">):</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;app${i}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c1">// ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span></code></pre></div><p>Here bicep will wait for the first two to be fully completed before it moves to the next.</p>
<p>To loop sequentially, meaning one at a time in order, use @batchSize(1)</p>
<h3 id="variable-loops">Variable loops</h3>
<p>You can use loops to create arrays that you can use in the Bicep template.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span><span class="nf">items</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span>i<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span>1<span class="err">,</span><span class="w"> </span>5<span class="p">):</span><span class="w"> </span><span class="si">&#39;item${i}&#39;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>This produces an array containing the values item1, item2 up to 5 stored in the items variable.</p>
<p>Reminds me of list comprehensions in python.</p>
<p>Here is an example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">param</span><span class="w"> </span>addressPrefix<span class="w"> </span><span class="nf">string</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="s">&#39;10.10.0.0/16&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span>subnets<span class="w"> </span><span class="nf">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;frontend&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">ipAddressRange</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.0.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;backend&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">ipAddressRange</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.1.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">var</span><span class="w"> </span>subnetsProperty<span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span>subnet<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="py">subnets</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span>subnet<span class="p">.</span>name<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">addressPrefix</span><span class="p">:</span><span class="w"> </span>subnet<span class="p">.</span>ipAddressRange<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">resource</span><span class="w"> </span>virtualNetwork<span class="w"> </span><span class="s">&#39;Microsoft.Network/virtualNetworks@2021-08-01&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;teddybear&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">location</span><span class="p">:</span><span class="w"> </span><span class="nf">resourceGroup</span><span class="p">().</span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">properties</span><span class="p">:{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">addressSpace</span><span class="p">:{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="py">addressPrefixes</span><span class="p">:[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>addressPrefix<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">subnets</span><span class="p">:</span><span class="w"> </span>subnetsProperty<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The content of the subnetsProperty array would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;frontend&#39;</span><span class="err">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="py">addressPrefix</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.0.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;backend&#39;</span><span class="err">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">properties</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="py">addressPrefix</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;10.10.1.0/24&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><h3 id="output-loops">Output loops</h3>
<p>To output the contents of the array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">var</span><span class="w"> </span><span class="nf">items</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;item1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;item2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;item3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;item4&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="si">&#39;item5&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">output</span><span class="w"> </span>outputItems<span class="w"> </span><span class="nf">array</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">[</span><span class="k">for</span><span class="w"> </span>i<span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">range</span><span class="p">(</span>0<span class="err">,</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="nf">items</span><span class="p">)):</span><span class="w"> </span><span class="nf">items</span><span class="p">[</span>i<span class="p">]]</span><span class="w">
</span></span></span></code></pre></div><h2 id="modules">Modules</h2>
<p>You can create modules in Bicep so the code becomes reusable. You can share the modules with other teams and use them for different outcomes.</p>
<blockquote>
<p>Generally, it&rsquo;s not a good practice to create a module for every resource that you deploy. A good Bicep module typically defines multiple related resources. However, if you have a particularly complex resource with a lot of configuration, it might make sense to create a single module to encapsulate the complexity. This approach keeps your main templates simple and uncluttered.</p>
</blockquote>
<p>So for example it would make sense to write a networking module and a database module that handles these resources.</p>
<p>Modules can be nested, but it can quickly become very complex.</p>
<p>To call a module in a template:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="kd">module</span><span class="w"> </span>appModule<span class="w"> </span><span class="s">&#39;modules/app.bicep&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="si">&#39;myApp&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">location</span><span class="p">:</span><span class="w"> </span>location<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">appServiceAppName</span><span class="p">:</span><span class="w"> </span>appServiceAppName<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">environmentType</span><span class="p">:</span><span class="w"> </span>environmentType<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The modules are stored in the modules folder in your root directory.</p>
<h3 id="parameters">Parameters</h3>
<p>Modules will take parameters, but it is good practice to leave out default values for parameters in modules. In templates it&rsquo;s good practice to add defaults wherever you can. Therefore it is best to leave them out in modules because templates usually have their own default values. This can get confusing if you have similar default values in the templates and modules.</p>
<h3 id="module-dependency">Module dependency</h3>
<p>Bicep will figure out automatically if there is a dependency between modules. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bicep" data-lang="bicep"><span class="line"><span class="cl"><span class="p">@</span><span class="nd">description</span><span class="p">(</span><span class="s">&#39;Username for the virtual machine.&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span>adminUsername<span class="w"> </span><span class="nf">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nd">description</span><span class="p">(</span><span class="s">&#39;Password for the virtual machine.&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nd">minLength</span><span class="p">(</span>12<span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">@</span><span class="nd">secure</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">param</span><span class="w"> </span>adminPassword<span class="w"> </span><span class="nf">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">module</span><span class="w"> </span>virtualNetwork<span class="w"> </span><span class="s">&#39;modules/vnet.bicep&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;virtual-network&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">module</span><span class="w"> </span>virtualMachine<span class="w"> </span><span class="s">&#39;modules/vm.bicep&#39;</span><span class="w"> </span><span class="p">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="s">&#39;virtual-machine&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">adminUsername</span><span class="p">:</span><span class="w"> </span>adminUsername<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">adminPassword</span><span class="p">:</span><span class="w"> </span>adminPassword<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">subnetResourceId</span><span class="p">:</span><span class="w"> </span>virtualNetwork<span class="p">.</span>outputs<span class="p">.</span>subnetResourceId<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Here the virtualMachine module takes the subnetResourceId from the virtualNetwork module outputs.</p>
<p>Because it is defined like this, Bicep will wait with deploying the virtualMachine modul until the virtualNetwork module is finished, and pass in the required parameter.</p>
<p>It is important to note that this means that it will wait until the virtualNetwork module is completely finished. If it takes a long time to deploy the previous module, all the subsequent modules will have to wait until it&rsquo;s finished.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Learning Go Day 1: Notes</title>
      <link>https://mischavandenburg.com/zet/go-day-1/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/go-day-1/</guid>
      <description>The CTO of my new company recommended the Udemy course &amp;ldquo;Go: The Complete Developer&amp;rsquo;s Guide (Golang)&amp;rdquo;. I started today and here are some notes I made.
Hello World in Go We start by writing a Hello World and studying all the elements.
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World!&amp;#34;) } How do we run code? go run main.go runs the program go build main.go compiles it to an executable</description>
      <content:encoded><![CDATA[<p>The CTO of my new company recommended the Udemy course &ldquo;Go: The Complete Developer&rsquo;s Guide (Golang)&rdquo;. I started today and here are some notes I made.</p>
<h1 id="hello-world-in-go">Hello World in Go</h1>
<p>We start by writing a Hello World and studying all the elements.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="how-do-we-run-code">How do we run code?</h3>
<p><code>go run main.go</code> runs the program
<code>go build main.go</code> compiles it to an executable</p>
<h3 id="what-does-package-main-mean">What does package main mean?</h3>
<p><code>package main</code></p>
<p>A package is a collection of common source code files.</p>
<p>One app is a package. If you have multiple files in a folder, such as helper.go or support.go, they should have <code>package main</code> to indicate that they belong to package main.</p>
<p>*Why do we call it main?</p>
<p>There are two types of packages.</p>
<ul>
<li>executable
<ul>
<li>generates file that can be run</li>
</ul>
</li>
<li>reusable
<ul>
<li>used as &ldquo;helpers&rdquo;</li>
<li>reusable logic</li>
</ul>
</li>
</ul>
<p>When you call the package <code>main</code>, you are telling the compiler it needs to be compiled as an executable. If it  has a different name, it won&rsquo;t generate an executable. Main is sacred.</p>
<p>Any other name is a reusable or dependency type package (helper code).</p>
<p>Another important point is that whenever you create an executable package, it must always have a func called &lsquo;main&rsquo;.</p>
<h3 id="what-does-import-fmt-mean">What does import fmt mean?</h3>
<p>The import statement is used to give our package access to code written in another package.  You are saying &ldquo;give access to all code in fmt&rdquo;. Fmt is a standard library package included in Go. Short for format. Used to print out information to the terminal.</p>
<p>Other packages included in the standard library of go are debug, math, encoding, crypto, io.</p>
<p>golang.org/pkg for documentation on standard library packages for Go.</p>
<p>A lot of learning go is learning the standard packages and how they work.</p>
<h3 id="organizing-the-maingo-file">Organizing the main.go file</h3>
<p>It is the same for every go file, just like the code example at the top of the page. Package main, import fmt, and func main.</p>
<h1 id="variable-declarations">variable declarations</h1>
<p><code>var card string = &quot;Ace of Spades&quot;</code></p>
<p>var: we are about to create a new variable</p>
<p>card: name</p>
<p>string = telling the go compiler that only strings will be assigned to this variable</p>
<h3 id="alternatively">Alternatively:</h3>
<p><code>card := &quot;Ace of Spades&quot;</code></p>
<p>Here you are relying on the compiler to figure out what type it is.</p>
<p>Compiler will infer the type.</p>
<p>We only use this := assignment for <strong>new variables</strong></p>
<p>If you want to assign a value to a variable after it is declared, you just do <code>card = &quot;Five of Diamonds&quot;</code></p>
<h3 id="go-types">Go types</h3>
<p>Go is  a statically typed language.</p>
<p>Javascript, python are dynamically typed language. We don&rsquo;t care what value is assigned to a variable.</p>
<p>You always a assign a type to a variable in Go.</p>
<p>Basic go types:</p>
<ul>
<li>bool</li>
<li>string</li>
<li>into</li>
<li>float64 : a number with a decimal after it.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>I started to learn Go!</title>
      <link>https://mischavandenburg.com/zet/start-learning-go/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/start-learning-go/</guid>
      <description>For month&amp;rsquo;s I considered to learn Go, and today I finally started.
I doubted for a long time, because I figured it would be better to dive deeper into Python. However, when I reflected on it, I realized I&amp;rsquo;m able to do the things I want to do in Python. I can create scripts to manipulate data, and I can string different tools and libraries together if I need to. So how deep do I actually need to go as a DevOps Engineer?</description>
      <content:encoded><![CDATA[<p>For month&rsquo;s I considered to learn Go, and today I finally started.</p>
<p>I doubted for a long time, because I figured it would be better to dive deeper into Python. However, when I reflected on it, I realized I&rsquo;m able to do the things I want to do in Python. I can create scripts to manipulate data, and I can string different tools and libraries together if I need to. So how deep do I actually need to go as a DevOps Engineer?</p>
<p>The breakthrough came when I discovered this website: <a href="https://goodfirstissue.dev/language/go">Good First Issue</a>. It&rsquo;s a collection of issues in open source projects which are suitable for people who are starting out. Scrolling through the available projects for Python and Go, I noticed I got a lot more energy from the things I saw in the Go list: Grafana, ArgoCD, Kubernetes. I probably have a long way to go before I can make any meaningful contributions, but my goal is to be able to contribute to open source in the future.</p>
<p>Additionally, I&rsquo;m going to focus my career in the direction of Kubernetes and CNCF, where Go is mostly used.</p>
<p>I have a week off before I start my new job so I&rsquo;m going to spend a few hours a day to get a good start, and when I&rsquo;m working full time again, my plan is to spend at least one pomodoro (25 minutes) a day on Go. Small increments will add up to something big over time.</p>
<p>I created <a href="https://github.com/mischavandenburg/go">a new GitHub repo</a> where I&rsquo;ll be uploading all my practice code and projects.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Controlling Apple Music with hotkeys from anywhere on MacOS</title>
      <link>https://mischavandenburg.com/zet/apple-music-hotkeys/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/apple-music-hotkeys/</guid>
      <description>I&amp;rsquo;m a little obsessed with controlling everything with my keyboard. That&amp;rsquo;s why I loved AwesomeWM so much on my Arch Linux setup, I hardly used my mouse anymore.
One thing I loved about my setup was the ability to control my music from the keyboard from anywhere. This is a feature I picked up from the awesome-copycats theme for AwesomeWM. This was one of the first things I missed when I made my switch to MacOS.</description>
      <content:encoded><![CDATA[<p>I&rsquo;m a little obsessed with controlling everything with my keyboard. That&rsquo;s why I loved AwesomeWM so much on my Arch Linux setup, I hardly used my mouse anymore.</p>
<p>One thing I loved about my setup was the ability to control my music from the keyboard from anywhere. This is a feature I picked up from the awesome-copycats theme for AwesomeWM. This was one of the first things I missed when I made my switch to MacOS.</p>
<p>I started using Apple Music as my music app but it does not have any global hotkeys, and it makes you use a widget with the mouse.</p>
<h1 id="skhd">skhd</h1>
<p>I solved the problem using <a href="https://github.com/koekeishiya/skhd">skhd</a>. This is a free hotkey daemon for MacOS. To install:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install koekeishiya/formulae/skhd
</span></span><span class="line"><span class="cl">brew services start skhd
</span></span></code></pre></div><p>Then I added the following to my skhd config file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Control apple music globally</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Based on Aesome-copycats theme for AesomeWM</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ctrl + cmd + fn - up : osascript -e <span class="s1">&#39;tell app &#34;Music&#34; to playpause&#39;</span>
</span></span><span class="line"><span class="cl">ctrl + cmd + fn - left : osascript -e <span class="s1">&#39;tell app &#34;Music&#34; to back track&#39;</span>
</span></span><span class="line"><span class="cl">ctrl + cmd + fn - right : osascript -e <span class="s1">&#39;tell app &#34;Music&#34; to play next track&#39;</span>
</span></span></code></pre></div><h1 id="links">links</h1>
<p><a href="https://github.com/koekeishiya/skhd">https://github.com/koekeishiya/skhd</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Using parameter expansion as search and replace</title>
      <link>https://mischavandenburg.com/zet/slash-syntax-replace/</link>
      <pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/slash-syntax-replace/</guid>
      <description>Last modified: 2023-01-10
In this evening&amp;rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:
!#/bin/bash echo -e ${PATH//:/\\n} I could not make heads or tails of all these slashes and curly braces, since the output clearly indicated that search and replacement was being performed. I&amp;rsquo;m used to the sed / vim syntax: s/foo/bar
After some research I learned that &amp;lsquo;//&amp;rsquo; is a global search and replace syntax of several text processing programs.</description>
      <content:encoded><![CDATA[<p><em>Last modified: 2023-01-10</em></p>
<p>In this evening&rsquo;s studies I came across this bash script in a tutorial by Rob Muhlenstein:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">!#/bin/bash
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="si">${</span><span class="nv">PATH</span><span class="p">//:/</span><span class="se">\\</span><span class="nv">n</span><span class="si">}</span>
</span></span></code></pre></div><p>I could not make heads or tails of all these slashes and curly braces, since the output clearly indicated that search and replacement was being performed. I&rsquo;m used to the sed / vim syntax: <code>s/foo/bar</code></p>
<p>After some research I learned that &lsquo;//&rsquo; is a global search and replace syntax of several text processing programs. It is known as parameter expansion in bash.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">foo</span><span class="o">=</span><span class="s2">&#34;1234567890&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">foo</span><span class="p">//[0-9]/x</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This replaces all the digits in the $foo variable with &lsquo;x&rsquo;, so the output would be xxxxxxxxxx</p>
<p>To do this with sed, you would do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$foo</span><span class="s2">&#34;</span> <span class="p">|</span> sed <span class="s1">&#39;s/[0-9]/x/g&#39;</span>
</span></span></code></pre></div><p>For more info:</p>
<p><code>man bash</code></p>
<p><code>/parameter expansion</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Automatically adding my recent blog posts to my GitHub Readme</title>
      <link>https://mischavandenburg.com/zet/adding-posts-github-readme/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/adding-posts-github-readme/</guid>
      <description>My friend gave me a nice tip for customizing the readme on my personal GitHub page. I discovered there is a whole world of plugins and customizations out there.
I set up this one for my GitHub homepage. It uses a workflow to update the readme in my personal GitHub repo with the most recent posts from this blog, based on the RSS feed. Neat!
It was very easy to set up.</description>
      <content:encoded><![CDATA[<p>My friend gave me a nice tip for customizing the readme on my personal GitHub page. I discovered there is a whole world of plugins and customizations out there.</p>
<p>I set up <a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">this one</a> for my GitHub homepage. It uses a workflow to update the readme in my personal GitHub repo with the most recent posts from this blog, based on the RSS feed. Neat!</p>
<p>It was very easy to set up. If you don&rsquo;t have your own blog, you could configure it with a different RSS feed. Hacker News for example.</p>
<p><a href="https://github.com/gautamkrishnar/blog-post-workflow">https://github.com/gautamkrishnar/blog-post-workflow</a></p>
<p><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">https://github.com/abhisheknaiidu/awesome-github-profile-readme</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Back to Bas(h)ics: leaving zsh for now</title>
      <link>https://mischavandenburg.com/zet/back-to-bashics/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/back-to-bashics/</guid>
      <description>I&amp;rsquo;ve used zsh for nearly two years now. I have a custom setup with autocompletion and a good looking prompt.
Recently I&amp;rsquo;ve been diving deeper into bash scripting, following tutorials by rwxrob. He emphasizes all the time that it is much better to stick to bash instead of zsh.
Advantages of using bash:
the default Linux shell available on any Linux system full documentation available anywhere at all times with man bash free software less dependent on external plugins and configurations more portable practice by working on the command line The fact that working on the commandline is already coding convinced me to leave my beloved customized prompt behind (for now) and go back to the basics.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve used zsh for nearly two years now. I have a custom setup with autocompletion and a good looking prompt.</p>
<p>Recently I&rsquo;ve been diving deeper into bash scripting, following tutorials by rwxrob. He emphasizes all the time that it is much better to stick to bash instead of zsh.</p>
<p>Advantages of using bash:</p>
<ul>
<li>the default Linux shell</li>
<li>available on any Linux system</li>
<li>full documentation available anywhere at all times with <code>man bash</code></li>
<li>free software</li>
<li>less dependent on external plugins and configurations</li>
<li>more portable</li>
<li>practice by working on the command line</li>
</ul>
<p>The fact that <a href="/content/zet/bash-cmdline-is-coding.md">working on the commandline is already coding</a> convinced me to leave my beloved customized prompt behind (for now) and go back to the basics.</p>
<p>I want to improve my bash scripting, and working in the bash shell will improve that just by virtue of doing my daily tasks on the command line.</p>
<p>Also I noticed I&rsquo;ve gotten used to zsh&rsquo;s excellent autocompletion and menu navigation. When I log in to servers at work, there is always this little moment of &ldquo;oh, I don&rsquo;t have that here&rdquo;. I want to get better at bash so I&rsquo;m not dependent on these external crutches anymore.</p>
<p>Also, I&rsquo;m going to port my zsh configuration to bash. My current zsh configuration loads a bunch of plugins, and it is more of a hassle to get set up on a new system.</p>
<p>I want to be able to pull my dotfiles repo and do very few steps to configure my environment.</p>
<p>But I&rsquo;m going to miss that good-looking prompt with all the lovely icons!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Working on the command line is already coding</title>
      <link>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/bash-cmdline-is-coding/</guid>
      <description>Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.
When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.
I think this is such an interesting point. I&amp;rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line.</description>
      <content:encoded><![CDATA[<p>Rob Muhlenstein makes an interesting point that using bash on the command line is already coding. When you are running commands in the terminal, you are coding one line at a time.</p>
<p>When you put these commands in a file you have a bash script. Therefore, he argues that bash should be your first language.</p>
<p>I think this is such an interesting point. I&rsquo;ve been using Linux and working on the command line for years but it never dawned on me that I, in fact, was coding while working on the command line. However, when I was writing bash scripts, I did consider myself to be coding. There is literally no difference. A bash script is just a string of commands that you would enter manually anyway.</p>
<p><a href="https://rwx.gg/">https://rwx.gg/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is a SDK?</title>
      <link>https://mischavandenburg.com/zet/sdk/</link>
      <pubDate>Tue, 03 Jan 2023 07:50:55 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/sdk/</guid>
      <description>A software development kit (SDK) is a set of tools provided by the manufacturer of (usually) a hardware platform, operating system (OS), or programming language.
SDKs contain all the tools you need to get started. They typically contain a compiler, a debugger and an API. But they can also contain documentation and testing tools.</description>
      <content:encoded><![CDATA[<p>A software development kit (SDK) is a set of tools provided by the manufacturer of (usually) a hardware platform, operating system (OS), or programming language.</p>
<p>SDKs contain all the tools you need to get started. They typically contain a compiler, a debugger and an API. But they can also contain documentation and testing tools.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Call Stacks</title>
      <link>https://mischavandenburg.com/zet/call-stacks/</link>
      <pubDate>Mon, 02 Jan 2023 21:11:26 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/call-stacks/</guid>
      <description>When you call a function, the system sets aside space in memory for the function to do its work. Those chunks are called &amp;ldquo;stack frames&amp;rdquo; or &amp;ldquo;function frames.&amp;rdquo;
These frames are arranged in a stack. The frame for the most recently called function is always at the top of the stack. When a new function is called, it becomes the active frame, and it is on top of the stack.</description>
      <content:encoded><![CDATA[<p>When you call a function, the system sets aside space in memory  for the function to do its work. Those chunks are called &ldquo;stack frames&rdquo; or &ldquo;function frames.&rdquo;</p>
<p>These frames are arranged in a stack. The frame for the most recently called function is always at the top of the stack. When a new function is called, it becomes the active frame, and it is on top of the stack.</p>
<p>The function that is actually doing something at the moment is on top of the stack and is known as the &ldquo;active frame.&rdquo;</p>
<p>When the function finishes its work, the frame is popped off of the stack. The frame in second place becomes the active frame. It had been paused in the meantime, and now it is active again, because it is on top.</p>
<p>Functions that are not on top, are not running.</p>
<p><a href="https://www.youtube.com/watch?v=aCPkszeKRa4">This video explains it well.</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Getting Started with Neovim: kickstart.nvim</title>
      <link>https://mischavandenburg.com/zet/articles/kickstart-nvim/</link>
      <pubDate>Sun, 01 Jan 2023 09:11:57 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/kickstart-nvim/</guid>
      <description>I&amp;rsquo;ve been using neovim for over a year now, and I&amp;rsquo;m very happy that I went through the initial difficulty of learning vim. One of the best perks of using neovim is that you can customize your entire editing experience and workflow. However, it can be a daunting experience to start with an empty configuration and set up everything from scratch.
I started with an empty vanilla vim config and slowly added the plugins as I went along.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve been using neovim for over a year now, and I&rsquo;m very happy that I went through the initial difficulty of learning vim. One of the best perks of using neovim is that you can customize your entire editing experience and workflow. However, it can be a daunting experience to start with an empty configuration and set up everything from scratch.</p>
<p>I started with an empty vanilla vim config and slowly added the plugins as I went along. Videos by content creators such as ThePrimagen were also helpful in getting inspiration on which plugins I might like for my setup. But this might not be suitable for everyone. I was only editing yaml files and writing simple Python scripts at the time, whereas you might be looking for an IDE experience out of the box.</p>
<p>Recently I discovered <a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a> by neovim core maintainer TJdeVries.</p>
<p>I decided to give it a try, and I was pleasantly surprised. It is a great starting setup for a beginner. It is simple and does not overwhelm you with thousands of features.</p>
<p>I&rsquo;ve completely rewritten my config based on kickstart.nvim, and I am delighted with the result. Especially the LSP setup is very well thought out, and it works much better than the setup I came up with on my own.</p>
<p>TJ DeVries also made a <a href="https://youtu.be/stqUbv-5u2s">video</a> introducing kickstart.nvim and going through the initial setup.</p>
<p>I highly recommend kickstart.nvim if you are interested in using neovim and are looking for a sane place to start.</p>
<h1 id="links">links</h1>
<p><a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a></p>
<p><a href="https://youtu.be/stqUbv-5u2s">Kickstart video by TJdeVries</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My First Contribution to Open Source</title>
      <link>https://mischavandenburg.com/my-first-contribution-to-open-source/</link>
      <pubDate>Fri, 18 Feb 2022 16:21:12 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/my-first-contribution-to-open-source/</guid>
      <description>Two months ago I knew nothing about GitHub. This week my first pull request got merged into master!
Programming tutorials and books very often suggest that you should try to contribute to open source in order to practice your skills. Even though I am still on the beginner level in Python, I managed to find something I could contribute with. But there were a few things I needed to learn in order to be able to do so.</description>
      <content:encoded><![CDATA[<p>Two months ago I knew nothing about GitHub. This week my first pull request got merged into master!</p>
<p>Programming tutorials and books very often suggest that you should try to contribute to open source in order to practice your skills. Even though I am still on the beginner level in Python, I managed to find something I could contribute with. But there were a few things I needed to learn in order to be able to do so.</p>
<p>GitHub is a place where many open source projects are hosted. Projects are hosted in “repositories” available to the public. Everyone can go in and take a look at the code. And the great thing about it is that everyone can contribute to the code as well.</p>
<p>Two months ago I knew almost nothing about GitHub. Surely, I had often downloaded software from GitHub, and I knew it had to do with version control. But I had no idea that it was such a powerful system of enabling collaboration for software projects.</p>
<p>During an assignment in my DevOps Traineeship I spent some time learning about Github and the Git language. I learned about repositories, branches, commits and pull requests. Now I wanted to take it to the next level and make a contribution of my own somewhere.</p>
<h3 id="the-project">the project</h3>
<p>As I have mentioned in other posts, I love game automation, and recently I discovered the Botty project, which is a bot written for the game Diablo 2: Resurrected. The bot is written in Python, which means that it is a great way of applying my Python learning to something I am passionate about.</p>
<p>The bot uses computer vision in order to recognise what is on the screen and run scripts accordingly. The monsters in the game drop items, and if you want the bot to pick up items, it will need to be taught which items it needs to pick up.</p>
<p>This is done by adding some images to its image database and adding the filenames to a list of items. When the bot scans the screen for items, it will look for a match in its image database, and when it matches, it will click the corresponding pixels on the screen to pick up the item.</p>
<p>Here’s what an image in the database looks like:</p>
<p><img loading="lazy" src="/axe.png" type="" alt=""  /></p>
<p>I am doing a Holy Grail project in this game, which means that I am collecting every item in the game. It is quite an undertaking as there are 506 items in the game, and some items have a drop chance of 1 : 1.000.000. Luckily I have a bot to help me with this project.</p>
<p>Not surprisingly, many items were still missing from the bot because it is a fairly new project that is still in development. And as I needed my bot to pick up the items I needed, I decided to add these 46 missing items to the database.</p>
<h3 id="forks-commits-and-pull-requests">forks, commits and pull requests</h3>
<p>After doing the work I still needed to figure out how I should offer these items to the project. Luckily someone shared a few very helpful tutorials in the project’s discord. This is the tutorial I used for my first contribution:</p>
<p><a href="https://www.dataschool.io/how-to-contribute-on-github/">Step-by-step Guide to Contributing on Github</a></p>
<p>You begin with “forking” the project repository, which basically means making your own copy of all the code in the project. Then you add your contribution to the fork by cloning it to your local machine and making your changes to a new branch.</p>
<p>When you have committed your changes and pushed your new branch to your fork, you are ready to make your first pull request. A pull request is a way of telling the project that you have something to contribute. You are sharing your version of the project repository including your proposed changes, and someone from the project will take a look at your suggestions and see if they are useful and compatible.</p>
<h3 id="merged-into-master">merged into master</h3>
<p>After a few days someone had a look at my contribution and requested me to make a few small adjustments. When I managed to incorporate those my contribution was accepted, and my changes were “merged into master”, which means that my contribution was brought into the main version of the project’s code.</p>
<p><img loading="lazy" src="/merged.png" type="" alt=""  /></p>
<h3 id="i-learned-a-lot">I learned a lot!</h3>
<p>As I am typing out this article, I am very satisfied with how much I have learned in the past few months already. I remember being very confused about all the GitHub terminology when I attended my first meetings during my DevOps traineeship.</p>
<p>Going through the process of making a contribution to open source on GitHub has been an enriching experience. It seemed quite intimidating at the start, but by following a good tutorial I managed to successfully submit my first pull request. I feel I have a much better understanding of Git, GitHub and the workflow.</p>
<p>Another valuable lesson I learned is that you don’t need to be a Senior Engineer in order to be able to contribute to open source. Although this project is written in Python, my contribution had very little to do with code, but I provided assets which were required by the code. So if you are a beginner at programming, you can look for other ways to contribute, such as fixing spelling mistakes in the documentation, providing images or writing wiki pages.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Mirst Useful Python Script</title>
      <link>https://mischavandenburg.com/my-first-useful-python-script/</link>
      <pubDate>Sat, 05 Feb 2022 05:49:06 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/my-first-useful-python-script/</guid>
      <description>The best part of learning Python is trying to identify things in my life which I can automate by writing a script. Learning a programming language involves doing a lot of exercises that sometimes lack a connection with the real world. But after I decided to go for it, I am always on the lookout for projects. Not only for my job as a DevOps Engineer, but also for my private life.</description>
      <content:encoded><![CDATA[<p>The best part of learning Python is trying to identify things in my life which I can automate by writing a script. Learning a programming language involves doing a lot of exercises that sometimes lack a connection with the real world. But after I decided to go for it, I am always on the lookout for projects. Not only for my job as a DevOps Engineer, but also for my private life. In this case, I needed to write a program that parses log files from a bot so I could get a total number of runs. You can have a look at the final result in my Diablo 2 <a href="https://github.com/mischavandenburg/diablo2">GitHub repo. </a></p>
<p>Like I wrote in my <a href="https://mischavandenburg.com/my-journey-into-devops-so-far/">journey into DevOps article</a>, I love automating games. Diablo 2 is a game that was originally released in 2002 and which recently was remastered. Diablo 2 always had a very strong presence of bots in the online game, and it didn’t take long before I also joined the ride.</p>
<p>A few months after the remaster the first bots have started emerging as well. There is a a particularly good one written in Python which is an <a href="https://github.com/aeon0/botty">open source project</a>, which is a perfect opportunity for me to learn more about Python by trying to understand its code and solving problems. I was very excited to discover it because I was playing quite a few hours a week. Diablo 2 is a very grindy game and it takes a lot of time to find the needed gear. Now I could finally outsource my grinding to the computer again.</p>
<h2 id="the-problem">the problem</h2>
<p>Although the bot is very functional and does several tasks very well, there are still features missing because it is relatively early in its development. One of these features is keeping track of the total amount of runs that the bot has done. In Diablo, every time you play you start a “game” or an instance. In that game there are certain bosses you can kill, and when you are finished you exit your game. This is called a run. Then you create a new game and everything is reset, and you get another shot at killing the bosses to get the precious gear.</p>
<p>Being the nerd that I am, I like to keep track of the total amount of runs that the bot has done. On these numbers I like to apply some calculations to see how many items I get per xxxx runs and suchlike. The bot keeps track of the amount of runs it does per session and stores them in a log file. But there is no functionality of seeing the total amount of runs you have done, and when I discovered this, I realised I had my first little Python project.</p>
<h2 id="log-files">log files</h2>
<p>Every time you close the bot after a session, a log file is created that looks like this:</p>
<p><img loading="lazy" src="/logfile.png" type="" alt=""  /></p>
<p>It is formatted as a .txt file and shows information about the bosses that were run and the items that were found. Most importantly, it contains the amount of games that were done in the session. Even after only using the bot for a short time I had over 100 log files to go through, and that’s where I needed a script that would go through these files for me and add the numbers in order to get the total amount of runs.</p>
<h2 id="the-script">the script</h2>
<p>After completing chapter 9 and 10 in the Automate the Boring Stuff book, I learned about file paths and opening files and reading from them. Now it was time to apply that knowledge. The process went pretty well and soon I had a script that would open the files for me.</p>
<p>Things got a little bit more complicated when I needed to read information from the files. And of course, this operation would almost certainly involve the dreaded topic of regex. In the end it was not as bad, and I ended up with the following regex:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">regex_games</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;Games:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">regex_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;nihla&#39;</span><span class="p">:</span> <span class="s1">&#39;Nihl|Nihlatak&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;pindle&#39;</span><span class="p">:</span> <span class="s1">&#39;Pin|Pindle&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;eldritch&#39;</span><span class="p">:</span> <span class="s1">&#39;Eld&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>As you will see afterwards, I needed a way to check every line for a certain statement. However, rather than hardcoding every operation, I wanted it to loop over a list of terms. This meant that I could easily go back to the code and add a few more search statements if I needed them. I ended up storing them in a dictionary as you can see above. I really like the way you can make dictionaries in Python and have every entry on a new line. It makes the code very readable and structured.</p>
<p>And this is the actual looping sequence that I ended up with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">folder_name</span><span class="p">,</span> <span class="n">sub_folder</span><span class="p">,</span> <span class="n">file_names</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">file_names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">PurePath</span><span class="p">(</span><span class="n">folder_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s1">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">my_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># search for games number line</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">my_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># find number of games and add to total games</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">regex_games</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">g</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="n">total_games</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                    <span class="n">f</span> <span class="o">=</span> <span class="n">my_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1"># check which runs were done by using the regex dict</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">regex_dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">location</span> <span class="o">=</span> <span class="n">regex_dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="n">reg</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="c1"># if there is a match, add the numbers to the total variable</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="n">reg</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                            <span class="n">var_name</span> <span class="o">=</span> <span class="n">key</span> <span class="o">+</span> <span class="s1">&#39;_total&#39;</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">globals</span><span class="p">()[</span><span class="n">var_name</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span></code></pre></div><p>This sequence loops through the folder, the subfolder, and opens each file one by one. When the file is opened it looks for the “Games: 25” line and adds the number to a variable. However, I was not only interested in the total number of games. I also wanted to get more insight in how many Pindle runs or Nihla runs I had done. So I set up another regex search and made sure that the number of games are added to a “pindle_total” or “nihla_total” variable.</p>
<h2 id="result">result</h2>
<p>When running the script in the shell, the result looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mischa@MischaMacBook stats_parser % python3 total_runs.py 
</span></span><span class="line"><span class="cl">Total runs: <span class="m">7159</span>
</span></span><span class="line"><span class="cl">Pindle runs: <span class="m">6926</span>
</span></span><span class="line"><span class="cl">Eldritch + Shenk runs: <span class="m">367</span>
</span></span><span class="line"><span class="cl">Nihla runs: <span class="m">232</span>
</span></span><span class="line"><span class="cl">mischa@MischaMacBook stats_parser % 
</span></span></code></pre></div><p>Exactly what I wanted. Now I can just paste my stats files into a folder and see how many runs I’ve done. Maybe I’ll improve it by building a GUI. Another fun idea I have is to create a little pipeline where this script would be run once an hour and the stats would be uploaded to a webpage somewhere, so others could see the amount of runs of my bot. Not that anyone is interested in that, but it is a fun project for me to do. Let’s see what happens!</p>
<p>For now I am very happy with the result. It was a very satisfying experience to identify a problem that I had and to be able to come up with an automated solution. Of course it is still very rudimentary programming, and there is a long long way ahead of me, but it was fun to finally do something practical that solved a particular problem in my life.</p>
<p>The final result is in my <a href="https://github.com/mischavandenburg/diablo2">Diablo 2 GitHub repo.</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python Project: Mad Libs</title>
      <link>https://mischavandenburg.com/python-project-mad-libs/</link>
      <pubDate>Tue, 01 Feb 2022 21:41:28 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/python-project-mad-libs/</guid>
      <description>I am currently working through the book Automate the Boring Stuff by Al Sweigart . I can already highly recommend it to anybody who is learning Python.
Chapter 9 is about reading and writing files, and there are two assignments at the end of the chapter. Here I’ll discuss my solution of the Mad Libs assignment.
here is the full assignment text: Mad Libs Create a Mad Libs program that reads in text files and lets the user add their own text anywhere the word ADJECTIVE, NOUN, ADVERB, or VERB appears in the text file.</description>
      <content:encoded><![CDATA[<p>I am currently working through the book <a href="https://automatetheboringstuff.com">Automate the Boring Stuff</a> by Al Sweigart . I can already highly recommend it to anybody who is learning Python.</p>
<p>Chapter 9 is about reading and writing files, and there are two assignments at the end of the chapter. Here I’ll discuss my solution of the Mad Libs assignment.</p>
<h3 id="here-is-the-full-assignment-text">here is the full assignment text:</h3>
<pre tabindex="0"><code>Mad Libs
Create a Mad Libs program that reads in text files and lets the user add their own text anywhere the word ADJECTIVE, NOUN, ADVERB, or VERB appears in the text file. For example, a text file may look like this:
The ADJECTIVE panda walked to the NOUN and then VERB. A nearby NOUN was
unaffected by these events.

The program would find these occurrences and prompt the user to replace them.
Enter an adjective:
silly
Enter a noun:
chandelier
Enter a verb:
screamed
Enter a noun:
pickup truck

The following text file would then be created:
The silly panda walked to the chandelier and then screamed. A nearby pickup
truck was unaffected by these events.

The results should be printed to the screen and saved to a new text file.
</code></pre><p>Looks pretty simple, right? I went into it with a lot of zeal and started writing a long list of if statements. My first attempts at the solution involved matching the words NOUN and ADJECTIVE directly, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;ADJECTIVE&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">inv</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter an adjective: &#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>However, this is problematic because as you can see, the sentence can contain words with a period attached, such as “VERB.” in the above example.</p>
<h2 id="no-please-no-regex">no, please no regex!</h2>
<p>I’ve understood that here is a general anxiety around regex. I have certainly noticed it in myself and some of my junior engineer friends. As soon as I read the word regex, or realise that an assignment is going to involve regex, I get a constricting feeling in my throat and a rise in my heart rate.</p>
<p>I’ve had to struggle with it quite a bit during my freeCodeCamp Front End Development Certificate, and the memories are still fresh in my mind.</p>
<p>So, like any other ‘rational’ human being, I tried to approach this relatively simple assignment with all sorts of ways trying to account for a period ending the word:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">period_check</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="s2">&#34;.&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># loop over the array and prompt user</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">source_text</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">period</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">period_check</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">period</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;ADJECTIVE&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">invoer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter an adjective: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">period</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result_text</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">invoer</span> <span class="o">+</span> <span class="s2">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">period</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result_text</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">invoer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;NOUN&#39;</span><span class="p">:</span>
</span></span></code></pre></div><p>It’s quite funny to see the lengths we go through to avoid regular expressions. However, as you maybe deduce from the code above, it didn’t work, and after a couple of hours of fiddling I gave up, and like any other frustrated programmer, I started to google.</p>
<p>I quickly found solutions to this assignment and they all involved regex, and I realised I could not walk away from my fears anymore.</p>
<h2 id="an-elegant-solution">an elegant solution</h2>
<p>Eventually I ended up with the following result for the part of my assignment that needed to recognise and replace the words with the user input. Of course I heavily borrowed from my Google search results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># set up and match the regex</span>
</span></span><span class="line"><span class="cl"><span class="n">grammar_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;ADJECTIVE|NOUN|VERB|ADVERB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">match_regex</span> <span class="o">=</span> <span class="n">grammar_regex</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace the matches with user input </span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">match_regex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ask_user</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Please enter &#39;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">source_text</span> <span class="o">=</span> <span class="n">source_text</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">ask_user</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><p>When I say elegant, I mean elegant in total Python beginner terms. I’m sure there are enough Seniors out there who will burst out laughing when they see this. But to me, it was quite an eye-opening experience to see this little piece of code do exactly what I had intended to achieve with 3 different functions and long blocks of if statements.</p>
<p>Also, I was pleasantly surprised with how simple regex can be in Python. In this case there were no scary [Az ^**/!!${}aa{}aA{nF}] statements. We simply defined which words we wanted and called the findall() module to generate a list with all the matches.</p>
<p>Then we iterate over the list of matches and for each match we ask the user for the desired word, and replace it in the source_text.</p>
<h2 id="final-result">final result</h2>
<p>Having sorted out the pattern matching and replacing part, it was only a matter of implementing reading from files and writing to a new file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Automate the Boring Stuff chapter 9</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Mad Libs assignment</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Mischa van den Burg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ask the user which file to open</span>
</span></span><span class="line"><span class="cl"><span class="n">file_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter the filename. For example, grammar.txt: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># my script and .txt file are located in ~/python/automatetheboringstuff/ </span>
</span></span><span class="line"><span class="cl"><span class="n">text_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">Path</span><span class="o">.</span><span class="n">home</span><span class="p">()</span> <span class="o">/</span> <span class="s1">&#39;python&#39;</span> <span class="o">/</span> <span class="s1">&#39;automatetheboringstuff&#39;</span> <span class="o">/</span> <span class="n">file_name</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read the file and store in variable &amp; close</span>
</span></span><span class="line"><span class="cl"><span class="n">source_text</span> <span class="o">=</span> <span class="n">text_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">text_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># set up and match the regex</span>
</span></span><span class="line"><span class="cl"><span class="n">grammar_regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;ADJECTIVE|NOUN|VERB|ADVERB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">match_regex</span> <span class="o">=</span> <span class="n">grammar_regex</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace the matches with user input </span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">match_regex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ask_user</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Enter &#39;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">source_text</span> <span class="o">=</span> <span class="n">source_text</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">ask_user</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># write to the new file and print the result</span>
</span></span><span class="line"><span class="cl"><span class="n">new_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;new_&#39;</span> <span class="o">+</span> <span class="n">file_name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">source_text</span><span class="p">)</span>
</span></span></code></pre></div><p>I was getting into some better functionality, such as accounting for existing filenames, and making the pathing relative so it could be run from anywhere. But I decided to save that for a later assignment.</p>
<p>The assignment was clear and did not require such functionality. I need to learn to keep things simple, and I decided to do just what I was asked and not go into any other rabbit holes.</p>
<h1 id="lessons-learned">Lessons Learned</h1>
<p>All in all the assignment is pretty simple, but I learned surprisingly much from it. I decided I’ll need to change and learn to love regex rather than fear it, because it showed me how powerful it can be.</p>
<p>Also, I got some insight into my own mind and how I tend to work. I realised I have a tendency to make things much more complicated than they need to be. I need to learn to keep things simple.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
