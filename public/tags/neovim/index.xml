<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Neovim on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/neovim/</link>
    <description>Recent content in Neovim on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 21 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/neovim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Video: My Entire Neovim &#43; Tmux Workflow As A DevOps Engineer On MacOS</title>
      <link>https://mischavandenburg.com/zet/video-tmux-neovim-macos-workflow/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-tmux-neovim-macos-workflow/</guid>
      <description>I&amp;rsquo;ve just released a comprehensive video delving deep into my Neovim setup and command-line centric workflow. This video is a response to the curiosity of my YouTube subscribers. It&amp;rsquo;s an all-inclusive guide from A to Z, detailing the rationale behind my configuration choices. I&amp;rsquo;ve spent years perfecting my workflow and this video has been several months in the making, so I&amp;rsquo;m excited that I can finally share it with you.</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/iagjeLuxnMs" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>I&rsquo;ve just released a comprehensive video delving deep into my Neovim setup and command-line centric workflow. This video is a response to the curiosity of my YouTube subscribers. It&rsquo;s an all-inclusive guide from A to Z, detailing the rationale behind my configuration choices. I&rsquo;ve spent years perfecting my workflow and this video has been several months in the making, so I&rsquo;m excited that I can finally share it with you.</p>
<p>My workflow is completely based on the command line.
I therefore have very little programs or tools running on the graphical side of the OS, whether it be MacOS or Linux. All I need is the terminal and a web browser, but a window manager is a big bonus to my productivity.</p>
<p>My main philosophy is to have a minimalistic workflow which uses very little resources. It should be a distraction-free,
keyboard centered and efficient environment to do my best work.</p>
<h2 id="links">Links:</h2>
<p>202401211901</p>
<p><a href="https://youtu.be/iagjeLuxnMs">https://youtu.be/iagjeLuxnMs</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>It is good to keep your second brain compatible with Obsidian</title>
      <link>https://mischavandenburg.com/zet/keep-second-brain-obsidian-compatible/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/keep-second-brain-obsidian-compatible/</guid>
      <description>Although I rarely use Obsidian anymore, I still have it open because it is running the obsidian-git plugin in the background and it is constantly backing up my second brain to GitHub.
I use iCloud to synch my vault across my iOs devices and I always create and edit my files using neovim.
For my new gig at work I&amp;rsquo;m forced to use a windows laptop which means I cannot use iCloud to synch my vault.</description>
      <content:encoded><![CDATA[<p>Although I rarely use Obsidian anymore, I still have it open because it is running the obsidian-git plugin in the background and it is constantly backing up my second brain to GitHub.</p>
<p>I use iCloud to synch my vault across my iOs devices and I always create and edit my files using neovim.</p>
<p>For my new gig at work I&rsquo;m forced to use a windows laptop which means I cannot use iCloud to synch my vault. Then it is a godsend to be able to install Obsidian and use that to interact with my second brain.</p>
<p>It is very good to keep it compatible with obsidian so I can use the software for synching and interacting with my second brain on other operating systems conveniently.</p>
<h2 id="links">Links:</h2>
<p>202310052010</p>
<p>[[second-brain]]
[[notetaking]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Deploying an AKS Cluster with Bicep, GitHub Copilot and Neovim</title>
      <link>https://mischavandenburg.com/zet/video-deploying-aks-cluster-bicep-github-copilot/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-deploying-aks-cluster-bicep-github-copilot/</guid>
      <description>Inspired by a GitHub Copilot demonstration I witnessed at Microsoft, I wanted to see how quickly I could deploy an AKS cluster from Neovim with Bicep using Copilot. I wasn&amp;rsquo;t disappointed!
Links: 202306271706
https://www.youtube.com/watch?v=l0B65FUfNBU
[[AKS]] [[kubernetes]] [[neovim]] [[bicep]] [[coding]]</description>
      <content:encoded><![CDATA[<p>Inspired by a GitHub Copilot demonstration I witnessed at Microsoft, I wanted to see how quickly I could deploy an AKS cluster from Neovim with Bicep using Copilot. I wasn&rsquo;t disappointed!</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/l0B65FUfNBU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="links">Links:</h2>
<p>202306271706</p>
<p><a href="https://www.youtube.com/watch?v=l0B65FUfNBU">https://www.youtube.com/watch?v=l0B65FUfNBU</a></p>
<p>[[AKS]]
[[kubernetes]]
[[neovim]]
[[bicep]]
[[coding]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Introducing New Bicep Parameter Files - .bicepparam - No more JSON!</title>
      <link>https://mischavandenburg.com/zet/video-bicep-bicepparam/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-bicep-bicepparam/</guid>
      <description>The new parameter files use bicep style formatting instead of JSON, and they will make the lives of Cloud Engineers a lot easier. They have the following advantages:
More readable and editor friendly Cleaner and less lines of code VSCode integration Quickly convert from JSON or template file using VSCode In this video I introduce these new files. I go over the new formatting, and I also introduce the new features in VSCode for the .</description>
      <content:encoded><![CDATA[<p>The new parameter files use bicep style formatting instead of JSON, and they will make the lives of Cloud Engineers a lot easier. They have the following advantages:</p>
<ul>
<li>More readable and editor friendly</li>
<li>Cleaner and less lines of code</li>
<li>VSCode integration</li>
<li>Quickly convert from JSON or template file using VSCode</li>
</ul>
<p>In this video I introduce these new files. I go over the new formatting, and I also introduce the new features in VSCode for the .bicepparam files.</p>
<p>Yes, you read that right, you&rsquo;ll be seeing a hardcore vim user switch to VSCode for this particular task!</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/6Gav1JpGAzo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="links">Links:</h2>
<p>202306271706</p>
<p><a href="https://youtu.be/6Gav1JpGAzo">https://youtu.be/6Gav1JpGAzo</a></p>
<p><a href="https://github.com/Azure/bicep/releases/tag/v0.18.4">https://github.com/Azure/bicep/releases/tag/v0.18.4</a></p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files?tabs=Bicep">https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files?tabs=Bicep</a></p>
<p><a href="https://github.com/mischavandenburg/lab/tree/main/bicep/keyvault-parameters">https://github.com/mischavandenburg/lab/tree/main/bicep/keyvault-parameters</a></p>
<p>[[AKS]]
[[bicep]]
[[coding]]
[[kubernetes]]
[[azure]]
[[neovim]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>I Wrote My First Go Program Today</title>
      <link>https://mischavandenburg.com/zet/my-first-go-program/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/my-first-go-program/</guid>
      <description>I&amp;rsquo;m still at the beginning of my Go learning journey, but I worked through a few tutorials and guides by now. I&amp;rsquo;ve gathered lots of ideas for programs that I want to write, big and small, but I have to start somewhere.
The best thing to do is to write little programs that solve a problem that you have.
One problem I needed to solve was converting sentences to title case in vim.</description>
      <content:encoded><![CDATA[<p>I&rsquo;m still at the beginning of my Go learning journey, but I worked through a few tutorials and guides by now. I&rsquo;ve gathered lots of ideas for programs that I want to write, big and small, but I have to start somewhere.</p>
<p>The best thing to do is to write little programs that solve a problem that you have.</p>
<p>One problem I needed to solve was converting sentences to title case in vim. There are plugins for this, or elaborate macros, but I thought this was a nice opportunity to write my first program from scratch. You can view the program here: <a href="https://github.com/mischavandenburg/go/tree/main/projects/title">my go repo</a>.</p>
<h1 id="title">Title</h1>
<p>Converting a string to title case is fairly easy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Package title converts a string to title case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">title</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Make</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Title</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This function takes a string as an argument and uses the Title function from the strings package to convert it. I use printf to format the output and to add a new line character.</p>
<h1 id="challenge">Challenge</h1>
<p>The challenge lies in taking input from Stdin. I solved this by reusing the things I learned from the greet challenge. I described how to read from standard input in go in <a href="/zet/go-reading-stdinput-cmdline">this article</a>.</p>
<p>Here is the code for the title command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/mischavandenburg/go/projects/title&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/mischavandenburg/go/projects/title/internal&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">x</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#34; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">x</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">x</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">internal</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">title</span><span class="p">.</span><span class="nf">Make</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This main function checks if arguments are given to the program from the command line, and uses these arguments if they are given. If there are no arguments, it will expect input to be piped to it. It takes either the input from the arguments or from standard input and calls the <code>Make()</code> function that I described above.</p>
<p>This main function uses a Readline function to extract the string from standard input:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">internal</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;bufio&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ReadLine takes anything of type io.Reader and returns a trimmed string (initial
</span></span></span><span class="line"><span class="cl"><span class="c1">// and trailing white space) or an empty string and error if any error
</span></span></span><span class="line"><span class="cl"><span class="c1">// is encountered.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadLine</span><span class="p">(</span><span class="nx">in</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">in</span><span class="p">).</span><span class="nf">ReadString</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>For a more detailed explanation of this function read <a href="/zet/go-reading-stdinput-cmdline">this article</a> I wrote.</p>
<h1 id="usage">Usage</h1>
<p>I wrote the program so I can call it with a sentence as an argument:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mischa@mac-beast:~
</span></span><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)</span>$ title hello world, this is my sentence in title <span class="k">case</span>
</span></span><span class="line"><span class="cl">Hello World, This Is My Sentence In Title Case
</span></span></code></pre></div><p>But the main use case is to use it as a <a href="https://www.geeksforgeeks.org/pipes-and-filters-in-linux-unix/">UNIX filter</a> inside of vim. A UNIX filter is a program that takes standard input, performs some operation on the input, and prints it to standard output.</p>
<p>Now, when I&rsquo;m working inside of vim, I can convert the current line to title case by typing the following command:</p>
<p><code>!!title</code></p>
<p>The <code>!!</code> command sends the specified amount of lines to the command you specify. Exclamation marks truly are magic wands! I highly recommend reading <a href="https://rwx.gg/tools/editors/vi/how/magic/">this article</a> by rwxrob to learn more about them.</p>
<h2 id="links">Links:</h2>
<p>202303280803</p>
<p><a href="https://github.com/mischavandenburg/go/tree/main/projects/title">https://github.com/mischavandenburg/go/tree/main/projects/title</a></p>
<p><a href="https://rwx.gg/tools/editors/vi/how/magic/">https://rwx.gg/tools/editors/vi/how/magic/</a></p>
<p><a href="/zet/go-reading-stdinput-cmdline">Reading from standard input in Go</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Run Newsboat in Zenmode</title>
      <link>https://mischavandenburg.com/zet/newsboat-in-zenmode/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/newsboat-in-zenmode/</guid>
      <description>To read the news free from distractions and ads I use Newsboat as a reader for RSS feeds.
However, one thing that annoyed me was that it would span across my entire screen in the terminal. When you read blogs or news pages in the browser, you&amp;rsquo;ll notice that the text is always located in a middle column of the window, so you don&amp;rsquo;t have to move your neck while reading.</description>
      <content:encoded><![CDATA[<p>To read the news free from distractions and ads I use Newsboat as a reader for RSS feeds.</p>
<p>However, one thing that annoyed me was that it would span across my entire screen in the terminal. When you read blogs or news pages in the browser, you&rsquo;ll notice that the text is always located in a middle column of the window, so you don&rsquo;t have to move your neck while reading. At least, this is the case with well designed websites that serve text content.</p>
<p>Vim has a plugin that achieves this and I use it extensively. It is called Zenmode. In Neovim I use a similar plugin called No Neckpain.</p>
<p>To achieve a similar configuration for Newsboat I used tmux. I wrote the following bash script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl"><span class="c1"># nb opens a new pane and runs newsboat in it. I want to read from a centered column in my screen.</span>
</span></span><span class="line"><span class="cl">tmux split-pane -h <span class="se">\;</span> resize-pane -x 130<span class="se">\;</span> send -t <span class="m">2</span> <span class="s2">&#34;newsboat&#34;</span> Enter<span class="se">\;</span> send -t <span class="m">1</span> <span class="s2">&#34;clear&#34;</span> Enter
</span></span></code></pre></div><p>Note that this needs to be run from within an existing tmux window with no split panes.</p>
<p>It splits the current window in to two panes, resizes the new pane to a width of 130 pixels and sends the &ldquo;newsboat&rdquo; command to the new pane, and the &ldquo;clear&rdquo; command to the old (left) pane to keep it nice and clean.</p>
<p>In my <code>~/.newsboat/config</code> file I added the following setting:</p>
<p><code>text-width 72</code></p>
<p>This will limit the text on the right hand side of the screen.</p>
<p>The end result looks like this:</p>
<p><img loading="lazy" src="/newsboat-zen.png" type="" alt="Newsboat Zenmode"  /></p>
<h2 id="links">Links:</h2>
<p>202303260903</p>
<p><a href="https://github.com/folke/zen-mode.nvim">https://github.com/folke/zen-mode.nvim</a></p>
<p><a href="https://github.com/shortcuts/no-neck-pain.nvim">https://github.com/shortcuts/no-neck-pain.nvim</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Converting markdown to PDF on MacOS</title>
      <link>https://mischavandenburg.com/zet/pandoc-markdown-pdf-macos/</link>
      <pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/pandoc-markdown-pdf-macos/</guid>
      <description>It happens that I want to share my notes with friends that just simply want a pdf instead of a markdown file.
This morning I figured out a quick way to convert markdown to pdf on a M2 MacBook running MacOS Ventura.
You need the pandoc and wkhtmltopdf packages.
brew install pandoc wkhtmltopdf To convert:
pandoc 00-zettelkasten/Fundamentals\ of\ Bicep.md --pdf-engine=wkhtmltopdf -o /tmp/test.pdf This will output a pdf to my /tmp/ directory and it looks pretty good.</description>
      <content:encoded><![CDATA[<p>It happens that I want to share my notes with friends that just simply want a pdf instead of a markdown file.</p>
<p>This morning I figured out a quick way to convert markdown to pdf on a M2 MacBook running MacOS Ventura.</p>
<p>You need the pandoc and wkhtmltopdf packages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install pandoc wkhtmltopdf 
</span></span></code></pre></div><p>To convert:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pandoc 00-zettelkasten/Fundamentals<span class="se">\ </span>of<span class="se">\ </span>Bicep.md --pdf-engine<span class="o">=</span>wkhtmltopdf  -o /tmp/test.pdf
</span></span></code></pre></div><p>This will output a pdf to my /tmp/ directory and it looks pretty good.</p>
<p>To convert all markdown files in a directory you can use a wildcard:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pandoc 00-zettelkasten/*.md --pdf-engine<span class="o">=</span>wkhtmltopdf  -o /tmp/test.pdf
</span></span></code></pre></div><p>Fun fact: converting my entire zettelkasten took a few seconds and generated a document of 80 pages with a font size of 10. Pretty fun to see it in a more regular format instead of the terminal.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Trying out pandoc for vim</title>
      <link>https://mischavandenburg.com/zet/trying-out-pandoc/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/trying-out-pandoc/</guid>
      <description>I do all of my writing in markdown. I keep my diaries in my Second Brain, I constantly write notes on the topics I&amp;rsquo;m studying, and my entire blog is written in markdown.
Some of the writing is done in Obsidian but I&amp;rsquo;m moving away from Obsidian step by step. I&amp;rsquo;ll still keep my second brain compatible with it, but I want to be able to do all of my writing in (neo)vim.</description>
      <content:encoded><![CDATA[<p>I do all of my writing in markdown. I keep my diaries in my Second Brain, I constantly write notes on the topics I&rsquo;m studying, and my entire blog is written in markdown.</p>
<p>Some of the writing is done in Obsidian but I&rsquo;m moving away from Obsidian step by step. I&rsquo;ll still keep my second brain compatible with it, but I want to be able to do all of my writing in (neo)vim.</p>
<p>I&rsquo;ve been using nvim-markdown for a while now and I was quite happy with it, but it was bothering me that <strong>bold text</strong> was not rendered in my editor.</p>
<p>Pandoc had been on my radar for a while because it uses the Commonmark <a href="https://spec.commonmark.org/">markdown spec</a> and it can be used to convert to many different documentation types. It&rsquo;s an interesting thought to keep my entire collection of notes and writings compatible with something that can be converted into anything.</p>
<p>I noticed rwxrob uses pandoc as one of his few vim plugins.</p>
<p>It took me an hour to make it compatible with neovim and to disable the spelling and folding. I couldn&rsquo;t just set the provided variables because they are still in vimscript and I haven&rsquo;t figured out how to set them yet because they use a hashtag in their name #</p>
<p>So far I like it, but there are a few things that I miss from my nvim-markdown</p>
<ul>
<li>automatic bulleted list</li>
<li>nested bulleted lists
<ul>
<li>with nvim-markdown these lists would continue</li>
<li>Here I have to indent each line myself and add a bullet</li>
</ul>
</li>
<li>navigation between headers
<ul>
<li>I didn&rsquo;t use this much to be honest, but I haven&rsquo;t figured it out in pandoc yet. Maybe it is possible?</li>
</ul>
</li>
</ul>
<p>I find myself using bullete lists and nested lists a lot in my notes, but I wonder if it is better to step away from those and make more use of markdown headings.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to Surround a Word with Quotes in Vim</title>
      <link>https://mischavandenburg.com/zet/surround-word-quotes-neovim/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/surround-word-quotes-neovim/</guid>
      <description>[[neovim]]
I find myself quoting words very often in vim when I&amp;rsquo;m writing bash code. I used to do this by simply navigating around the word and typing them, but I knew there had to be a better way.
I found this vim command:
ciw&amp;quot;&amp;quot;&amp;lt;Esc&amp;gt;P
&amp;ldquo;c&amp;rdquo; deletes into register and enters insert mode. &amp;ldquo;iw&amp;rdquo; stands for &amp;ldquo;inner word&amp;rdquo; and selects the word.
So we delete the entire word and enter insert mode.</description>
      <content:encoded><![CDATA[<p>[[neovim]]</p>
<p>I find myself quoting words very often in vim when I&rsquo;m writing bash code. I used to do this by simply navigating around the word and typing them, but I knew there had to be a better way.</p>
<p>I found this vim command:</p>
<p><code>ciw&quot;&quot;&lt;Esc&gt;P</code></p>
<p>&ldquo;c&rdquo; deletes into register and enters insert mode. &ldquo;iw&rdquo; stands for &ldquo;inner word&rdquo; and selects the word.</p>
<p>So we delete the entire word and enter insert mode. Then we type two quotes, and we press &ldquo;P&rdquo; to paste the register (containing the word) before the cursor.</p>
<p>Voila, the word is surrounded by quotes.</p>
<p>To make it even easier, I added this to my keymaps, and I&rsquo;ll add a few more for parentheses and brackets.</p>
<p><code>vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;wsq&quot;, 'ciw&quot;&quot;&lt;Esc&gt;P', { desc = &quot;Word Surround Quotes&quot; })</code></p>
<p><a href="https://vi.stackexchange.com/questions/21113/vimscript-surround-word-under-cursor-with-quotes">https://vi.stackexchange.com/questions/21113/vimscript-surround-word-under-cursor-with-quotes</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to continuously run a Go file while coding in the terminal</title>
      <link>https://mischavandenburg.com/zet/running-go-on-change/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/running-go-on-change/</guid>
      <description>I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.
You can use this command in a split window to keep running a Go file. It will update when you save the file.
entr -c bash -c &amp;quot;go run main.go&amp;quot; &amp;lt;&amp;lt;&amp;lt; main.go
Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:</description>
      <content:encoded><![CDATA[<p>I do all my coding and note taking in the terminal using tmux and neovim. I picked up a nice trick from Rob Muhlenstein today.</p>
<p>You can use this command in a split window to keep running a Go file. It will update when you save the file.</p>
<p><code>entr -c bash -c &quot;go run main.go&quot; &lt;&lt;&lt; main.go</code></p>
<p>Entr runs commands when files change. Here we are feeding it only one file, but you can also feed it a directory like so:</p>
<p><code>find src/ | entr -s 'make'</code></p>
<p>Super handy to see the outcome of your code changes in real time.</p>
<p>To run all the files in the directory, use the following:</p>
<p><code>entr -c bash -c &quot;go run . &quot; &lt; &lt;(find .)</code></p>
<p>I picked this up while going through Rob&rsquo;s Beginner Boost of 2022:</p>
<p><a href="https://youtu.be/kwrN3jbv4sE">https://youtu.be/kwrN3jbv4sE</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to follow symbolic links while searching with Telescope in neovim</title>
      <link>https://mischavandenburg.com/zet/neovim-telescope-follow-symlinks/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/neovim-telescope-follow-symlinks/</guid>
      <description>I use the Obsidian app, but I mostly write and search my notes with neovim. I added my zet directory from this blog repo into the Obsidian vault as a symbolic link, but I soon discovered that these files were not being searched.
Telescope.nvim uses ripgrep (rg) to do the live grepping in its search, and ripgrep does not follow symbolic links by default. You need to pass the -L flag to it.</description>
      <content:encoded><![CDATA[<p>I use the <a href="/zet/articles/obsidian-introduction/">Obsidian</a> app, but I mostly write and search my notes with neovim. I added my zet directory from this blog repo into the Obsidian vault as a symbolic link, but I soon discovered that these files were not being searched.</p>
<p>Telescope.nvim uses ripgrep (rg) to do the live grepping in its search, and ripgrep does not follow symbolic links by default. You need to pass the -L flag to it.</p>
<p>To pass the -L flag, and some other flags, I added the following to my telescope config file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">-- Custom ripgrep configuration:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">telescope</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;telescope&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">telescopeConfig</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;telescope.config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- Clone the default Telescope configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">vimgrep_arguments</span> <span class="o">=</span> <span class="p">{</span> <span class="n">unpack</span><span class="p">(</span><span class="n">telescopeConfig.values</span><span class="p">.</span><span class="n">vimgrep_arguments</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- I want to search in hidden/dot files.</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;--hidden&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">-- I don&#39;t want to search in the `.git` directory.</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;--glob&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;!**/.git/*&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- I want to follow symbolic links</span>
</span></span><span class="line"><span class="cl"><span class="n">table.insert</span><span class="p">(</span><span class="n">vimgrep_arguments</span><span class="p">,</span> <span class="s2">&#34;-L&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">telescope.setup</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">	<span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">-- `hidden = true` is not supported in text grep commands.</span>
</span></span><span class="line"><span class="cl">		<span class="n">vimgrep_arguments</span> <span class="o">=</span> <span class="n">vimgrep_arguments</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="n">pickers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">find_files</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">-- `hidden = true` will still show the inside of `.git/` as it&#39;s not `.gitignore`d.</span>
</span></span><span class="line"><span class="cl">			<span class="n">find_command</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;rg&#34;</span><span class="p">,</span> <span class="s2">&#34;--files&#34;</span><span class="p">,</span> <span class="s2">&#34;--hidden&#34;</span><span class="p">,</span> <span class="s2">&#34;--glob&#34;</span><span class="p">,</span> <span class="s2">&#34;!**/.git/*&#34;</span><span class="p">,</span> <span class="s2">&#34;-L&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>Based on the configuration examples found on the project&rsquo;s GitHub page.</p>
<p><a href="https://github.com/nvim-telescope/telescope.nvim">https://github.com/nvim-telescope/telescope.nvim</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Attaching the Ansible Language Server to yaml files in neovim (LSP)</title>
      <link>https://mischavandenburg.com/zet/ansible-lsp-fix/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/ansible-lsp-fix/</guid>
      <description>When you have an Ansible language server installed, you might find that your yaml LSP will attach to your current buffer, but the ansible language server won&amp;rsquo;t attach.
You can fix this by setting the correct file type for the current buffer:
:set ft=yaml.ansible
You could also adjust the Ansible LSP so it attaches to all yaml files. However, this does not work out for me, because I edit different yaml files for different purposes every day.</description>
      <content:encoded><![CDATA[<p>When you have an Ansible language server installed, you might find that your yaml LSP will attach to your current buffer, but the ansible language server won&rsquo;t attach.</p>
<p>You can fix this by setting the correct file type for the current buffer:</p>
<p><code>:set ft=yaml.ansible</code></p>
<p>You could also adjust the Ansible LSP so it attaches to all yaml files. However, this does not work out for me, because I edit different yaml files for different purposes every day. Not all yaml files are to be used with Ansible.</p>
<p>There is logic for the Ansible language server to figure out if you are working on Ansible yaml files based on the directory structure you&rsquo;re working in.</p>
<p>So setting the filetype when I needed works well for me.</p>
<p><a href="https://www.reddit.com/r/neovim/comments/tbd7g0/lsp_ansiblels_wont_attach_anymore/">https://www.reddit.com/r/neovim/comments/tbd7g0/lsp_ansiblels_wont_attach_anymore/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How This Blog is Created, Written and Hosted</title>
      <link>https://mischavandenburg.com/zet/articles/how-this-blog-is-created/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/how-this-blog-is-created/</guid>
      <description>As I alluded to in my article about Obsidian, I am very fond of editing my text in neovim. Naturally, if you want to edit in neovim, you need to have your text as local files. I keep all of my personal notes in markdown.
Previously I was using WordPress, but the editing and writing experience became torture which I could not endure any longer. I looked for a different solution that would allow me to edit my files locally instead of in the browser.</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/bzkrmkGDQJA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>As I alluded to in my <a href="/zet/articles/obsidian-introduction">article about Obsidian,</a> I am very fond of editing my text in neovim. Naturally, if you want to edit in neovim, you need to have your text as local files. I keep all of my personal notes in markdown.</p>
<p>Previously I was using WordPress, but the editing and writing experience became torture which I could not endure any longer. I looked for a different solution that would allow me to edit my files locally instead of in the browser.</p>
<p>I discovered <a href="https://gohugo.io/">Hugo</a> and I fell in love with it immediately.</p>
<p>Hugo is a static site generator based on markdown files. My entire blog is written in markdown files which are stored <a href="https://github.com/mischavandenburg/blog">in a GitHub repo.</a>. I write my blog posts in vim and when I&rsquo;m done I use Hugo to generate the updated website.</p>
<p>The result is what you see in the &ldquo;public&rdquo; directory in the GitHub repo. This public directory is pushed to a different repo which is hooked up to my hosting provider. My hosting provider uses Plesk, and with Plesk I have the option to connect the GitHub repo to the web server with a webhook. When I push to my hosting repo, the contents are gathered by the webserver and served as public web content.</p>
<p>My complete writing and publishing workflow looks like this:</p>
<ol>
<li>Create a new markdown file</li>
<li>Write the note or article</li>
<li>Save the file and run the &ldquo;hugo&rdquo; command to regenerate the website</li>
<li>Run the &ldquo;publish&rdquo; script. This is a custom script I wrote that takes the contents of the &ldquo;public&rdquo; directory to my hosting repo</li>
<li>Push the newly generated website to the hosting repo</li>
<li>And we&rsquo;re live! 🚀 🎉</li>
</ol>
<p>It is such a smooth and convenient process. I can literally have a new note published to the interet within a few minutes, and it is all done from the command line using my favorite tools.</p>
<p><a href="https://github.com/mischavandenburg/blog">Blog GitHub repo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Getting Started with Neovim: kickstart.nvim</title>
      <link>https://mischavandenburg.com/zet/articles/kickstart-nvim/</link>
      <pubDate>Sun, 01 Jan 2023 09:11:57 +0100</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/kickstart-nvim/</guid>
      <description>I&amp;rsquo;ve been using neovim for over a year now, and I&amp;rsquo;m very happy that I went through the initial difficulty of learning vim. One of the best perks of using neovim is that you can customize your entire editing experience and workflow. However, it can be a daunting experience to start with an empty configuration and set up everything from scratch.
I started with an empty vanilla vim config and slowly added the plugins as I went along.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve been using neovim for over a year now, and I&rsquo;m very happy that I went through the initial difficulty of learning vim. One of the best perks of using neovim is that you can customize your entire editing experience and workflow. However, it can be a daunting experience to start with an empty configuration and set up everything from scratch.</p>
<p>I started with an empty vanilla vim config and slowly added the plugins as I went along. Videos by content creators such as ThePrimagen were also helpful in getting inspiration on which plugins I might like for my setup. But this might not be suitable for everyone. I was only editing yaml files and writing simple Python scripts at the time, whereas you might be looking for an IDE experience out of the box.</p>
<p>Recently I discovered <a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a> by neovim core maintainer TJdeVries.</p>
<p>I decided to give it a try, and I was pleasantly surprised. It is a great starting setup for a beginner. It is simple and does not overwhelm you with thousands of features.</p>
<p>I&rsquo;ve completely rewritten my config based on kickstart.nvim, and I am delighted with the result. Especially the LSP setup is very well thought out, and it works much better than the setup I came up with on my own.</p>
<p>TJ DeVries also made a <a href="https://youtu.be/stqUbv-5u2s">video</a> introducing kickstart.nvim and going through the initial setup.</p>
<p>I highly recommend kickstart.nvim if you are interested in using neovim and are looking for a sane place to start.</p>
<h1 id="links">links</h1>
<p><a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a></p>
<p><a href="https://youtu.be/stqUbv-5u2s">Kickstart video by TJdeVries</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How and Why I Started Using Vim</title>
      <link>https://mischavandenburg.com/zet/articles/how-started-vim/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/how-started-vim/</guid>
      <description>If you are just starting your Linux journey, you might have noticed that a few camps exist in the Linux world. Just like in any other area of life, it seems that groups of human beings enjoy dividing themselves instead of living in harmony. There are camps centered around Linux distributions (I use Arch, btw) but also around text editors.
The Beginning The reason why I started to use vim is rather practical.</description>
      <content:encoded><![CDATA[<p>If you are just starting your Linux journey, you might have noticed that a few camps exist in the Linux world. Just like in any other area of life, it seems that groups of human beings enjoy dividing themselves instead of living in harmony. There are camps centered around Linux distributions (I use Arch, btw) but also around text editors.</p>
<h2 id="the-beginning">The Beginning</h2>
<p>The reason why I started to use vim is rather practical. When I was studying to become a Cloud Engineer, I had access to subscriptions on AWS and Azure to experiment with virtual machines. This was a perfect place to learn to work with Ansible. Many of the labs projects I did involved setting up a few virtual machines, and I destroyed many VMs when I made some big mistakes in the configuration.</p>
<p>I was using Visual Studio Code at the time on my local machine, but I had to connect to a new virtual machine multiple times a day. It became very tiresome to set everything up with VSCode every time, or pulling the files to my local machine and copying them over again. So I just ssh&rsquo;ed into the machines to edit the text files with the included editor, which happened to be vim.</p>
<h2 id="obsession-in-its-infancy">Obsession in its Infancy</h2>
<p>When you first use vim, it is a rather disorienting experience. But in every tutorial, I was told it would be difficult in the beginning but much faster and more effective in the end. I found this very appealing because I like to do things the hard way and challenge myself.</p>
<p>I discovered that there were people out there who did all of their text editing and coding in vim. I met programmers who refuse to use anything else and people who write entire books in vim. So there had to be something to it.</p>
<p>It also fitted very well with my intention of working on the command line as much as possible and moving away from GUI applications whenever possible. I like to move in this direction because I love the idea of controlling your entire workflow with your keyboard instead of using your mouse, and vim fits perfectly into this picture.</p>
<h2 id="what-i-like-after-nine-months">What I like after Nine Months</h2>
<p>At this point, I&rsquo;ve been using vim as my primary text editor for about nine months. In my current job, I work a lot with yaml files stored in private git repositories.</p>
<p>I only work with these files from the command line, and I don&rsquo;t have any other code editor installed. I use ripgrep and fzf (fuzzy file finder) to search through the files, and I use neovim to edit them. When I need to search for files from within vim, I use the awesome Telescope plugin.</p>
<p>In these months, I&rsquo;ve picked up a few tricks, and I am starting to see the power of vim. The best thing I like about it is that I don&rsquo;t have to leave my terminal window to do the tasks I need to do. Instead, I can search through the files I need to work with, open them, make adjustments, and commit them to the repository. Then I enter the command to run the ansible playbook, and it all happens in the same window, and I don&rsquo;t have to lift my fingers from the keyboard.</p>
<h4 id="keyboard-shortcuts">Keyboard Shortcuts</h4>
<p>Now that I am gaining more experience with vim, I&rsquo;m picking up more advanced usages that significantly improve my workflow. For example, &ldquo;da(&rdquo; meaning &ldquo;delete around parentheses&rdquo; to quickly delete the text between two parentheses. Or &ldquo;da&lt;&rdquo; to very quickly delete HTML tags. Another great feature is the visual block mode, where I can add comment tags to many lines simultaneously, for example.</p>
<h4 id="searching-and-navigation">Searching and Navigation</h4>
<p>Navigating large text files has become incredibly quick since I started using vim. Of course, it takes some getting used to, but it is a lovely experience to open a file, press / to search and enter the keyword and immediately arrive at the point I need to be—no scrolling with the mouse and no need to lift my hands from the keyboard.</p>
<p>I also love the ability to jump from sentence to sentence using ) or paragraphs using }.</p>
<h4 id="multiple-files">Multiple Files</h4>
<p>It takes a little while to get used to, but when you get into it, it is effortless to open up two files at a time if you need information from both. Often I need data from 4 or more files, and opening them quickly with keyboard commands has significantly improved my workflow speed.</p>
<h4 id="customization">Customization</h4>
<p>One of the things I enjoy most about vim is the ability to customize it exactly to my needs. I&rsquo;m completely in charge of the plugins which are loaded into vim and which colors it uses, and this appeals a lot to me. However, it can be rather overwhelming in the beginning. To be honest, it is still overwhelming after ten months. It can be tough to get an idea of where to start, which plugins you need, and which settings you need to change.</p>
<p>I just started with the base install of vim and started from there. Every time I required a particular functionality, I searched around to see if a plugin was available. Very often, someone out there had the same problem as you and created a plugin for it. For example, I recently installed a plugin for using emojis in vim 😄</p>
<h2 id="how-to-get-started">How to Get Started</h2>
<p>The short answer is to simply start using vim for all of your text editing, whether it be coding or writing for pleasure. It is a cliche to say, but it will be hard in the beginning, but I promise you it will pay off in the end.</p>
<p>The second thing I&rsquo;d recommend is to run vimtutor on a Linux machine. Do this once a day for a couple of weeks, and you&rsquo;ll know how to edit text files on any Linux system for the rest of your life, which is a precious skill.</p>
<p>Finally, don&rsquo;t spend too much time reading about all the available plugins. Your needs will become apparent to you as you start to use vim for all of your tasks, and you can search for plugins to address those needs. This way, you start with a minimal editor, which you&rsquo;ll build according to your needs.</p>
<h1 id="good-luck">Good Luck!</h1>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
