<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Networking on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/networking/</link>
    <description>Recent content in Networking on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alleviating Confusion About The To Field In Network Policies</title>
      <link>https://mischavandenburg.com/zet/alleviating-confusion-about-the-to-field-in-network-policies/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/alleviating-confusion-about-the-to-field-in-network-policies/</guid>
      <description>When solving a killercoda challenge I ran into some confusion. Even though my solution worked, there was a difference which I wanted to get clear on.
I wrote this:
apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: np namespace: space1 spec: podSelector: {} policyTypes: - Egress egress: - to: - namespaceSelector: matchLabels: kubernetes.io/metadata.name: space2 - to: ports: - protocol: TCP port: 53 - protocol: UDP port: 53 But the provided course solution was this:</description>
      <content:encoded><![CDATA[<p>When solving a killercoda challenge I ran into some confusion. Even though my solution worked, there was a difference which I wanted to get clear on.</p>
<p>I wrote this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">NetworkPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">np</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">space1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">podSelector</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">policyTypes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">Egress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">to</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">namespaceSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">kubernetes.io/metadata.name</span><span class="p">:</span><span class="w"> </span><span class="l">space2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">to</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">53</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">53</span><span class="w">
</span></span></span></code></pre></div><p>But the provided course solution was this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">NetworkPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">np</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">space1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">podSelector</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">policyTypes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">Egress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">to</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span>- <span class="nt">namespaceSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="nt">kubernetes.io/metadata.name</span><span class="p">:</span><span class="w"> </span><span class="l">space2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">53</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">53</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span></span></span></code></pre></div><p>Do you see the difference? I used the <code>to:</code> field before the <code>ports:</code>  field.</p>
<p>My solution was correct, but it had me quite confused, why wouldn&rsquo;t they write <code>to:</code> here as well?</p>
<p>After some further digging I&rsquo;ve finally understood that the <code>to:</code> field is only necessary when you apply a selector. If the <code>to:</code> field is omitted, it means that it will apply to any destination. So in my solution, the <code>to:</code> field doesn&rsquo;t achieve anything because I&rsquo;m not applying any selector. It can therefore be omitted.</p>
<p>Each element under the <code>egress:</code> array is a separate rule and they are combined to reach the end result of allowing egress traffic to namespace space2, and UDP/TCP traffic to anywhere on port 53.</p>
<p>In this case, omitting the <code>to:</code> field makes sense because DNS is generally not limited to only one namespace. However, if you&rsquo;re only using the internal Kubernetes DNS you might want to limit it to the kube-system namespace. I&rsquo;ve done this in a CiliumNetworkPolicy in my homelab:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cilium.io/v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CiliumNetworkPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">commafeed-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">commafeed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">endpointSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">policy-type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;app&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- {}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql-operator-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-dns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">toPorts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;53&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">dns</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">matchPattern</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- {}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEntities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">world</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">toPorts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;7844&#34;</span><span class="w">
</span></span></span></code></pre></div><h2 id="links">Links:</h2>
<p><strong>part of</strong>:: [[Network Policies]]
[[CKS]]
[[networking-computers]]</p>
<p>202403250845</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>I&#39;m better at Network Policies than I thought</title>
      <link>https://mischavandenburg.com/zet/im-better-at-network-policies-than-i-thought/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/im-better-at-network-policies-than-i-thought/</guid>
      <description>There are two things which I&amp;rsquo;m dreading most for the CKS exam: writing Network Policies and configuring RBAC under heavy time pressure.
I&amp;rsquo;ve heard from colleagues that the exam has many questions of this nature, so it will be a good way of scoring points. However, regardless of the exam, the fact that I&amp;rsquo;m dreading these topics also shows that I&amp;rsquo;m not familiar enough with them and therefore this is a point where I should improve.</description>
      <content:encoded><![CDATA[<p>There are two things which I&rsquo;m dreading most for the CKS exam: writing Network Policies and configuring RBAC under heavy time pressure.</p>
<p>I&rsquo;ve heard from colleagues that the exam has many questions of this nature, so it will be a good way of scoring points. However, regardless of the exam, the fact that I&rsquo;m dreading these topics also shows that I&rsquo;m not familiar enough with them and therefore this is a point where I should improve. It&rsquo;s not only about the exam, but also my growth of expertise as a Kubernetes Engineer.</p>
<p>With the help of <a href="https://networkpolicy.io/">https://networkpolicy.io/</a> I&rsquo;ve created CiliumNetworkpolicies for my homelab and the publically available stuff is pretty well secured. It&rsquo;s not that I don&rsquo;t understand them, but I haven&rsquo;t practiced them enough to do them without having to spend a lot of time or relying on external tools. And the time pressure is the biggest challenge for the CKA / CKS exams.</p>
<p>For the weeks in my preparation of the CKS exam I will do Network Policy and RBAC exercises on Killercoda every day. They have multiple scenarios for the CKS, but also CKA and CKAD so there are a few things I can practice every day. I&rsquo;m told that when I can solve these without problems, I know enough to do the exam questions without problem.</p>
<h2 id="better-than-i-thought">Better than I thought</h2>
<p>I <a href="https://youtube.com/live/1NJTM2ocdtM?feature=share">streamed my first 3 hour study session live</a> and after I worked through the video module about Network Policies I went ahead and tackled the practical scenarios.</p>
<p>To my great surprise I was able to solve them without much trouble! I was slow and needed to talk myself through the code a few times, but I did manage to solve all of the challenges for the CKS on Killercoda. There was never a point where I was unsure of what to do, or a problem I couldn&rsquo;t fix.</p>
<p>This was quite an eye opening experience because I had expected some weeks of struggle with this. Perhaps I&rsquo;m better at this stuff than I give myself credit for. In any case, I am still going to do daily practice with these scenarios and possibly thinking of a few of my own when I run out of Killercoda practice.</p>
<p>Even though I managed to solve the challenges during this first round, being in an exam under heavy time pressure and feeling nervous is going to be a completely different experience. So I want to get this down to the point where I hardly have to think about it any more, I need to master these questions so I can spend my time on the big questions.</p>
<p>This experience has me wondering how RBAC is going to go. We&rsquo;ll find out soon enough!</p>
<h2 id="links">Links:</h2>
<p>202403250703</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Kubernetes Gateway API &amp; Azure Application Gateway for Containers</title>
      <link>https://mischavandenburg.com/zet/articles/gateway-api-application-gateway-for-containers/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/gateway-api-application-gateway-for-containers/</guid>
      <description>This document is the result of my research into the Gateway API. It aims to briefly describe the Gateway API for Kubernetes, a typical implementation of ingress traffic using NGINX in AKS and how this setup could benefit from implementing the Gateway API.
Introduction Gateway API is an official Kubernetes project focused on L4 and L7 routing in Kubernetes. This project represents the next generation of Kubernetes Ingress, Load Balancing, and Service Mesh APIs.</description>
      <content:encoded><![CDATA[<p>This document is the result of my research into the Gateway API. It aims to briefly describe the Gateway API for Kubernetes, a typical implementation of ingress traffic using NGINX in AKS and how this setup could benefit from implementing the Gateway API.</p>
<h1 id="introduction">Introduction</h1>
<p>Gateway API is an official Kubernetes project focused on L4 and L7 routing in Kubernetes. This project represents the next generation of Kubernetes Ingress, Load Balancing, and Service Mesh APIs. From the outset, it has been designed to be generic, expressive, and role-oriented.</p>
<p>The overall resource model focuses on 3 separate personas and corresponding resources that they are expected to manage:</p>
<p><img loading="lazy" src="/ga1.png" type="" alt=""  /></p>
<p>Up until now ingress traffic to Kubernetes clusters was handled by the Ingress resource. Although the Ingress API will not be deprecated, the Gateway API is where all the development and innovation happens in the Kubernetes project.</p>
<blockquote>
<p>Gateway API is the successor to the Ingress API.</p>
<p>-Kubernetes documentation</p>
</blockquote>
<h1 id="a-typical-nginx-ingress-solution">A Typical NGINX Ingress Solution</h1>
<p>Ingress traffic is typically implemented as follows.</p>
<ol>
<li>An AKS cluster is provisioned in its own resource group and added to an existing virtual network. Usually each subscription has its own virtual network.</li>
<li>We use the NGINX Ingress Controller which is deployed through ArgoCD</li>
<li>The NGINX Ingress controller creates a Kubernetes LoadBalancer resource and exposes the cluster on port 80 and 443, as you can see below:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Switched to context <span class="s2">&#34;aks-gwa-dev-admin&#34;</span>.
</span></span><span class="line"><span class="cl">mischa@mac-beast:~
</span></span><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)</span>$ kn
</span></span><span class="line"><span class="cl">Context <span class="s2">&#34;aks-gwa-dev-admin&#34;</span> modified.
</span></span><span class="line"><span class="cl">Active namespace is <span class="s2">&#34;nginx-ingress&#34;</span>.
</span></span><span class="line"><span class="cl">mischa@mac-beast:~
</span></span><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)</span>$ k get svc
</span></span><span class="line"><span class="cl">NAME                                                    TYPE           CLUSTER-IP        EXTERNAL-IP    PORT<span class="o">(</span>S<span class="o">)</span>                      AGE
</span></span><span class="line"><span class="cl">nginx-ingress-ingress-nginx-controller                  LoadBalancer   192.168.10.17     52.137.26.47   80:30974/TCP,443:30474/TCP   595d
</span></span><span class="line"><span class="cl">nginx-ingress-ingress-nginx-controller-admission        ClusterIP      192.168.51.96     &lt;none&gt;         443/TCP                      595d
</span></span><span class="line"><span class="cl">nginx-ingress-ingress-nginx-controller-metrics          ClusterIP      192.168.214.164   &lt;none&gt;         10254/TCP                    417d
</span></span><span class="line"><span class="cl">nginx-ingress-ingress-nginx-vo-custom-default-backend   ClusterIP      192.168.226.137   &lt;none&gt;         80/TCP                       595d
</span></span><span class="line"><span class="cl">mischa@mac-beast:~
</span></span><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)</span>$
</span></span></code></pre></div><ol start="4">
<li>When a LoadBalancer resource is created in the cluster, AKS creates an Azure Load Balancer in the resource group of the AKS cluster. This Azure Load Balancer receives a public or internal IP address dependent on the Ingress Controller configuration. You can have a normal/external controller and an internal controller which doesn&rsquo;t receive a public IP address.</li>
<li>An Ingress resource is created in Kubernetes to configure the FQDN and TLS settings. In the Ingress resource, a label selector is configured to route the traffic to the correct backend service, which will route the traffic to the correct pods.</li>
<li>A DNS record is created and linked to the IP of the Azure Load Balancer which was provisioned by the Ingress Controller</li>
<li>When the FQDN is approached in the browser, the Azure DNS zone will forward the request to the Azure Load Balancer. The NGINX Ingress Controller will then route the traffic to the backend pods which were selected in the Ingress resource in Kubernetes.</li>
</ol>
<h2 id="disadvantages-of-this-situation">Disadvantages Of This Situation</h2>
<ul>
<li>Ingress API has less functionality</li>
<li>Azure Loadbalancer only works on Layer 4, no layer 7 routing</li>
<li>NGINX Ingress Controller maintenance and configuration</li>
</ul>
<h1 id="benefits-of-gateway-api">Benefits of Gateway API</h1>
<ul>
<li>natively supports traffic weighting, no extra annotations needed on ingress controller
<ul>
<li>example: sending 50% of the traffic to an application instance with a feature flag enabled</li>
</ul>
</li>
<li>natively supports header-based matching</li>
<li>traffic can be routed to other resources outside of the cluster or other clusters</li>
<li>extensible: allows for custom resources to be linked at various layers of the API, allowing customization</li>
<li>simplifies networking configuration</li>
<li>aids in transition towards service mesh</li>
<li>set up to support role based division of labour. The platform team sets up the infrastructure and Gateway itself, and the developer teams can add routing configuration that suits their needs</li>
<li>enables the developer teams to gain full control over their network configuration through GitOps</li>
</ul>
<p>Gateway API simplifies networking configuration by standardizing the way we define network rules. Thus, Gateway API aids in the transition from ingress towards service mesh. When the Gateway API is implemented, it will be much easier to adopt a service mesh networking architecture, or to migrate between service meshes.</p>
<p>Another advantage is that it can enable teams to implement specific header-based routing and traffic weighting between backend pools</p>
<p>A more specific list of Gateway API features:</p>
<ul>
<li>Header rewrite</li>
<li>HTTPS traffic management:</li>
<li>SSL termination</li>
<li>End to End SSL</li>
<li>Ingress and Gateway API support</li>
<li>Layer 7 HTTP/HTTPS request forwarding based on prefix/exact match on:
<ul>
<li>Hostname</li>
<li>Path</li>
<li>Header</li>
<li>Query string</li>
<li>Methods</li>
<li>Ports (80/443)</li>
</ul>
</li>
<li>Mutual Authentication (mTLS) to backend target</li>
<li>Traffic Splitting / weighted round robin</li>
<li>TLS Policies</li>
<li>URL rewrite</li>
</ul>
<h1 id="implementations">Implementations</h1>
<p>The Gateway API can be implemented <a href="https://gateway-api.sigs.k8s.io/implementations/">through various controllers</a>. Some notable implementations:</p>
<p><a href="https://github.com/nginxinc/nginx-gateway-fabric">NGINX Gateway Fabric (GA)</a></p>
<p><a href="https://doc.traefik.io/traefik/routing/providers/kubernetes-gateway/">Traefik (alpha)</a></p>
<p><a href="https://cilium.io/">Cilium (beta)</a></p>
<p>These will all require an extra controller or even a CNI to be installed.</p>
<p>However, with the release of <a href="https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/overview">Application Gateway for Containers</a>, Azure also offers a native implementation of the Gateway API in Azure Kubernetes Service.</p>
<h1 id="application-gateway-for-containers">Application Gateway for Containers</h1>
<p>The implementation of Gateway API through Azure&rsquo;s solution is rather straightforward since we are already running on the Azure platform.</p>
<p>The AG for Containers is a cluster-specific resource which deploys two resources in Azure: a frontend and an association. The frontend is an entry point where traffic is received in the form of an FQDN. The association is the entry to a virtual network. An association is a 1:1 mapping of an association resource to an Azure Subnet that has been delegated.</p>
<p>Each Application Gateway for Containers frontend provides a generated Fully Qualified Domain Name managed by Azure. The FQDN may be used as-is or customers may opt to mask the FQDN with a CNAME record.</p>
<p>Before a client sends a request to Application Gateway for Containers, the client resolves a CNAME that points to the frontend&rsquo;s FQDN; or the client may directly resolve the FQDN provided by Application Gateway for Containers by using a DNS server.</p>
<p>When the client initiates the request, the DNS name specified is passed as a host header to Application Gateway for Containers on the defined frontend.</p>
<p><img loading="lazy" src="/ga2.png" type="" alt=""  /></p>
<p>Image from Microsoft Documentation. I don&rsquo;t own this image.</p>
<h2 id="gateway-and-route-setup">Gateway and Route Setup</h2>
<p>A set of routing rules evaluates how the request for that hostname should be initiated to a defined backend target.</p>
<p>These resources are provided from within the cluster by creating a gateway with a Kubernetes manifest:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">kubectl apply -f - &lt;&lt;EOF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">gateway.networking.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Gateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gateway-01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">test-infra</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">alb.networking.azure.io/alb-namespace</span><span class="p">:</span><span class="w"> </span><span class="l">alb-test-infra</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">alb.networking.azure.io/alb-name</span><span class="p">:</span><span class="w"> </span><span class="l">alb-test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gatewayClassName</span><span class="p">:</span><span class="w"> </span><span class="l">azure-alb-external</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">listeners</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">HTTP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allowedRoutes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">namespaces</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="l">Same</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">EOF</span><span class="w">
</span></span></span></code></pre></div><p>When the gateway is created, the AG for Containers will create the required frontend and association.</p>
<p>Then we can create a route that connects the gateway to the backend pods of our application. This example shows how easy it is to weight traffic 50/50 to two backends:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">kubectl apply -f - &lt;&lt;EOF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">gateway.networking.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">HTTPRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traffic-split-route</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">test-infra</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">parentRefs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gateway-01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">backendRefs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">backend-v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">backend-v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">EOF</span><span class="w">
</span></span></span></code></pre></div><p><img loading="lazy" src="/ga3.png" type="" alt=""  /></p>
<p>Image from Microsoft Documentation. I don&rsquo;t own this image.</p>
<h3 id="azure-load-balancer-controller">Azure Load Balancer Controller</h3>
<p>In order to enable these resources on the cluster, the Azure Load Balancer controller needs to be installed via Helm. When it is connected to a Managed Identity it is able to provision the required resources in Azure.</p>
<p>There is an alternative deployment mode where the Azure resources (frontends and associations) can be provisioned through Terraform or Bicep and referred to from within the cluster. However, I think that it is best to deploy these resources from within the cluster because it enables the application teams to get full control over their traffic based on the GitOps workflow that they are already used to working with.</p>
<h2 id="advantages-of-the-azure-application-gateway-for-containers">Advantages of the Azure Application Gateway for Containers</h2>
<ul>
<li>Natively supported for AKS on the Azure platform</li>
<li>Microsoft support and SLA</li>
<li>Increased performance, offering near real-time updates to add or move pods, routes, and probes</li>
<li>Does not need any configuration on the controller</li>
<li>Autoscaling</li>
<li>Availability zone resiliency</li>
<li>Azure resources can be provisioned from within the cluster</li>
<li>The FQDN can be linked to the DNS zone using <a href="https://github.com/kubernetes-sigs/external-dns">External DNS</a>, Azure Front Door or Azure DNS zones</li>
<li>Will likely be integrated into the AKS offering as an extension, which means we won&rsquo;t have to maintain the controller</li>
<li>Easier to maintain because configuration is tailored to AKS out of the box</li>
</ul>
<h2 id="disadvantages-of-the-azure-application-gateway-for-containers">Disadvantages of the Azure Application Gateway for Containers</h2>
<p>I don&rsquo;t see any disadvantages over using the AG for Containers in terms of technical implementation. In fact, implementing the AG for Containers will be the most straightforward and easiest option. However, we must consider the price. As the AG for containers does not currently have WAF functionality, the premium NGINX Ingress Controller offering could be considered in the price.</p>
<p>Using NGINX or Traefik would still require an Azure LoadBalancer resource to provision an internal and/or external IP. When making a pricing comparison, the following things should be considered when using a different solution:</p>
<ul>
<li>cost of Azure Load Balancer (and the reduncany of the load balancer)</li>
<li>cost of man hours needed to learn a new controller such as Traefik or NGINX</li>
<li>time required to upgrade the controller and reading up on release notes and changelogs</li>
<li>potential licence costs when adopting enterprise usage</li>
</ul>
<h2 id="lifecycle-management">Lifecycle management</h2>
<p>No matter which implementation we choose, the lifecycle management of the controller will at this point still be with us. When using the Azure Application Gateway for containers, it is installed with helm and updated through helm. We can use our ArgoCD setup for this. The same applies for different solutions such as traefik or nginx.</p>
<p>However, I expect that the ALB controller will be integrated within AKS in the future and that would remove the need for lifecycle management for the ALB controller.</p>
<h1 id="impact-analysis">Impact Analysis</h1>
<p>Since the Azure Application Gateway for Containers or the NGINX Gateway Fabric are deployed as separate controllers, these could co-exist with the current ingress setup. Normal Ingress resources should not be affected.</p>
<p>When adopting the Gateway API, all the existing Ingress resources will need to be converted to Gateway API resources in our code base. We will need to decide if this needs to be done by the platform team or the developer teams.</p>
<p>One solution could be that we configure the Gateway and let the teams know that this is now a posiblity and that this should be used for new application deployments. The teams can then configure the Routes themselves after some training by the platform team.</p>
<h1 id="conclusion">Conclusion</h1>
<p>The Gateway API is the next iteration of the Ingress resource. It allows more functionality and aids in defining the roles between the platform and development teams. If one is in the process to revise the method of handling ingress traffic to the clusters, it would make sense to adopt the Gateway API in this process.</p>
<p>Although there are no plans for a service mesh at the time of writing, having the Gateway API implemented will make the transition to a service mesh much easier. In the meantime, the Gateway API already provides interesting functionality such as traffic weighting, which would be one of the reasons to implement a service mesh.</p>
<p>Since the Gateway API itself is a Kubernetes resource, it does not have feature parity and would work on any Kubernetes cluster that has a controller which allows the Gateway resource to be defined. The choice we need to make is which controller we will use for the implementation of the Gateway API on our AKS clusters.</p>
<p>Given the ease of implementation, native Azure support and simplified maintenance, the Application Gateway for Containers is the most logical choice.</p>
<h1 id="links">Links</h1>
<p><a href="https://gateway-api.sigs.k8s.io/">https://gateway-api.sigs.k8s.io/</a></p>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/gateway/">https://kubernetes.io/docs/concepts/services-networking/gateway/</a></p>
<p><a href="https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/overview">https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/overview</a></p>
<p><a href="https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/gateway-api.md">https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/gateway-api.md</a></p>
<h2 id="links-1">Links:</h2>
<p>202403101103</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Learned Cilium Network Policies</title>
      <link>https://mischavandenburg.com/zet/cilium-network-policies/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/cilium-network-policies/</guid>
      <description>Today I learned about Cilium network policies. These are much easier to implement than normal network policies because there are some tools available when creating the cilium policies. Network policies were probably my weakest Kubernetes skill and I tended to avoid them.
But now I&amp;rsquo;m exposing some apps to the internet in my homelab and I&amp;rsquo;m forced to think about security and what would happen if a hacker managed to get root privileges in a container even though I implemented strict security contests and enabled privilege escalation.</description>
      <content:encoded><![CDATA[<p>Today I learned about Cilium network policies. These are much easier to implement than normal network policies because there are some tools available when creating the cilium policies. Network policies were probably my weakest Kubernetes skill and I tended to avoid them.</p>
<p>But now I&rsquo;m exposing some apps to the internet in my homelab and I&rsquo;m forced to think about security and what would happen if a hacker managed to get root privileges in a container even though I implemented strict security contests and enabled privilege escalation.</p>
<p>I installed Cilium as the Container Networking Interface in my homelab cluster. This also allows me to use the Hubble tool. This has proven to be of immmense value to see the traffic that is actually flowing around in the namespace you&rsquo;re working on.</p>
<p><img loading="lazy" src="/npolicy1.png" type="" alt=""  /></p>
<p>Even with a small application of a few microservices, as the image shows, the traffic that flows between them and which needs to come from other namespaces can get pretty complex. But in the Hubble UI you get a clear view of what&rsquo;s happening, and you can see exactly when packets are being dropped.</p>
<p>I also found the <a href="https://editor.networkpolicy.io/">Network Policy Editor</a> extremely valuable. It is such a relief to be able to compose the policy from a graphical interface, even though I&rsquo;m a CLI guy and want to do everything in and from code, this has been a gamechanger.</p>
<p>Now I have created the following policy for my linkding app, which allows the EDB operator to do its thing on my databases, Prometheus to monitor my application, but a hacker could not do anything outside of the namespace if they managed to break out.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cilium.io/v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CiliumNetworkPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">linkding-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">linkding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">endpointSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">policy-type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;app&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- {}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql-operator-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-dns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">toPorts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;53&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">dns</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">matchPattern</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- {}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEntities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">world</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">toPorts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;7844&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cilium.io/v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CiliumNetworkPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">linkding-database</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">linkding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">endpointSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">policy-type</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;database&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- {}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">monitoring</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">fromEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql-operator-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- {}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEndpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">io.kubernetes.pod.namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kube-dns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">toPorts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;53&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">dns</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">matchPattern</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEntities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">kube-apiserver</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">toPorts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;6443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">toEntities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">world</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">toPorts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cilium.io/v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CiliumNetworkPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">deny-all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">linkding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">endpointSelector</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- {}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">egress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- {}<span class="w">
</span></span></span></code></pre></div><h2 id="links">Links:</h2>
<p>202401142001</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Designed The Network For My Homelab</title>
      <link>https://mischavandenburg.com/zet/homelab-network-design/</link>
      <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/homelab-network-design/</guid>
      <description>My ISP router only allowed me to assign 200 IP addresses and it didn&amp;rsquo;t have any possibility to create VLANS, so it was time for an upgrade to my setup.
Now that I&amp;rsquo;m hosting several clusters in my homelab and exposing things to the internet I can justify to spend the money on this hardware and the complexity of dividing up my home network into VLANS.
I bought a Unifi Express gateway and the Unifi Lite 8 PoE managed switch.</description>
      <content:encoded><![CDATA[<p>My ISP router only allowed me to assign 200 IP addresses and it didn&rsquo;t have any possibility to create VLANS, so it was time for an upgrade to my setup.</p>
<p>Now that I&rsquo;m hosting several clusters in my homelab and exposing things to the internet I can justify to spend the money on this hardware and the complexity of dividing up my home network into VLANS.</p>
<p>I bought a Unifi Express gateway and the Unifi Lite 8 PoE managed switch.</p>
<p>The gateway will function as the main portal to the internet and the WiFi access point. The switch will be located in my pantry where all the devices for my homelab are currently.</p>
<p><img loading="lazy" src="/home-network-design.png" type="" alt=""  /></p>
<h1 id="naming-strategy">Naming Strategy</h1>
<p>I&rsquo;m also going to have some fun with the naming strategy. I love Nordic mythology so I picked that as a theme.</p>
<h2 id="network-name">Network Name:</h2>
<ul>
<li><strong>Asgard</strong>: A reference to the home of the gods in Norse mythology, symbolizing a powerful and central network.</li>
</ul>
<h3 id="vlan-naming-strategy">VLAN Naming Strategy:</h3>
<ol>
<li><strong>Production Kubernetes Cluster</strong>: <code>Valhalla</code> - Named after the majestic hall where heroes reside, representing the strength and importance of the production environment.</li>
<li><strong>Staging Kubernetes Cluster</strong>: <code>Midgard</code> - Midgard, the world of humans in Norse mythology, can symbolize a testing ground that&rsquo;s closer to the &lsquo;real world&rsquo; scenarios.</li>
<li><strong>Main VLAN (Work &amp; Personal Devices)</strong>: <code>Yggdrasil</code> - Named after the great tree that connects all the worlds, symbolizing the connectivity and central role of this VLAN in the network.</li>
<li><strong>IoT VLAN</strong>: <code>Niflheim</code> - The realm of fog and mist, a metaphor for the mysterious and ubiquitous nature of IoT devices.</li>
<li><strong>Guest Network VLAN</strong>: <code>Jotunheim</code> - Inspired by the realm of giants in Norse mythology, this guest network embodies the vastness and mystery of Jotunheim. It&rsquo;s a separate, secure space for visitors, representing the outer layers of my realm.</li>
</ol>
<p><img loading="lazy" src="/jotunheim.png" type="" alt=""  /></p>
<h2 id="why-unifi">Why UniFi?</h2>
<ul>
<li>a colleague of mine has it and is very satisfied with it</li>
<li>saw a few videos of Techno Tim and was very impressed by his setup</li>
<li>looks like a very easy way to manage the network</li>
<li>provides insight into traffic flow</li>
<li>beautiful dashboard and UI</li>
<li>I like ecosystems with good documentation</li>
<li>allows expanding within the same ecosystem</li>
</ul>
<h2 id="links">Links:</h2>
<p>202401130601</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video notes - Application Gateway for Containers</title>
      <link>https://mischavandenburg.com/zet/application-gateway-for-containers/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/application-gateway-for-containers/</guid>
      <description>App Gateway It has App Gateway in the name, but it is an entirely new solution. The App Gateway is the only thing it has in common with Azure Application Gateway.
Resources Two types of resources. Azure resources and k8s resources.
The App Gateway for Container is an azure resource which listens to changes in k8s resources through the ALB controller. AGWFC is the control plane.
Frontend Azure Frontend is a public IP and fqdn.</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/slCjHV8z9Wk?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<h1 id="app-gateway">App Gateway</h1>
<p>It has App Gateway in the name, but it is an entirely new solution. The App Gateway is the only thing it has in common with Azure Application Gateway.</p>
<h1 id="resources">Resources</h1>
<p>Two types of resources. Azure resources and k8s resources.</p>
<p>The App Gateway for Container is an azure resource which listens to changes in k8s resources through the ALB controller. AGWFC is the control plane.</p>
<h1 id="frontend">Frontend</h1>
<h2 id="azure">Azure</h2>
<p>Frontend is a public IP and fqdn. Both are managed resources, you don&rsquo;t see them in your subscription.</p>
<p>You can have multiple frontends in one gateway to save money. Teams could share the app gateway but use different frontend IP addresses or FQDNs.</p>
<p>Control plane: Azure App Gateway for Containers</p>
<p>Data plane: association with kubernetes pods.</p>
<p>The association is made to the subnet in the Azure VNet.</p>
<p>Each association is in one subnet, and the subnet should at least have /24 or 256 addresses.</p>
<h1 id="kubernetes">Kubernetes</h1>
<p>ALB controller consists of two pods. Controller pod and a bootstrap pod.</p>
<p>Controller communicates to the Azure gateway resource. It talks directly to the App Gateway, not to the Azure Resource Manager, which is why you&rsquo;re able to have sub-second updates.</p>
<p>The bootstrap contains the CRDs etc, it does not do very much.</p>
<h2 id="creating-resources">Creating resources</h2>
<p>There is a managed option that will talk to ARM and create the resources for you. Or you can choose to deploy them yourself. It depends whether you want to control everything from Kubernetes. If you have all your Azure resources in Infrastructure as Code it probably makes more sense to create the App Gateway resources from there instead of from Kubernetes.</p>
<h1 id="association">Association</h1>
<p>Links frontend with a subnet in a VNet. This will typically be the same vnet that the AKS cluster is in. Could technically be a peered VNet but probably uncommon.</p>
<p>This is an Azure resource. It lives in the VNet and handles TLS and makes the connections to and from the pods and frontend IP. This is the data path.</p>
<p>The traffic is not routed within the cluster, but in Azure by the association.</p>
<p>Client talks to the front end, passes to the association, the association is doing the work, and then routing it to the cluster.</p>
<h1 id="support">Support</h1>
<p>Azure CNI. Does not support kubenet or Azure CNI overlay yet, but it will support in the future.</p>
<h1 id="kubernetes-resources">Kubernetes Resources</h1>
<p>Application Load Balancer: this name was chosen because k8s people don&rsquo;t know the concept of app gateway.</p>
<h1 id="benefits">Benefits</h1>
<ul>
<li>ssl offloading</li>
<li>traffic splitting</li>
<li>clearer separation between platform team and app team</li>
<li>platform team manages the gateway itself</li>
<li>automatic default health probes</li>
</ul>
<h1 id="benefits-of-azure">Benefits of Azure</h1>
<ul>
<li>not suing cluster resources for load balancing. this happens in azure</li>
<li>native azure metrics available</li>
</ul>
<h1 id="misc">misc</h1>
<ul>
<li>AGIC does not support ingress</li>
</ul>
<h2 id="links">Links:</h2>
<p>202309301009</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Video: Homelab E2 - Setting Up Monitoring &#43; Studying k3s Networking  &amp; Configuring Ingress</title>
      <link>https://mischavandenburg.com/zet/video-homelab-3-k3s-networking/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/video-homelab-3-k3s-networking/</guid>
      <description>In this video I installed Prometheus and Grafana using helm and studied k3s networking.
My goal was to make Grafana approachable via ingress using a fake domain and after a bit of tinkering it worked.
installed prometheus and grafana with kube-prometheus-stack helm chart reflected on why I use k3s gained understanding of k3s loadbalancing solution configured /etc/hosts file to resolve to fake domain configured k3s ingress to use fake local domain struggled with ingress but figured it out in the end successfully made grafana UI available on fake local domain grafana.</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/JjIB65CVXAo?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>In this video I installed Prometheus and Grafana using helm and studied k3s networking.</p>
<p>My goal was to make Grafana approachable via ingress using a fake domain and after a bit of tinkering it worked.</p>
<ul>
<li>installed prometheus and grafana with kube-prometheus-stack helm chart</li>
<li>reflected on why I use k3s</li>
<li>gained understanding of k3s loadbalancing solution</li>
<li>configured /etc/hosts file to resolve to fake domain</li>
<li>configured k3s ingress to use fake local domain</li>
<li>struggled with ingress but figured it out in the end</li>
<li>successfully made grafana UI available on fake local domain grafana.homelab.nl</li>
</ul>
<h2 id="links">Links:</h2>
<p>202312261012</p>
<p><a href="https://youtu.be/JjIB65CVXAo">https://youtu.be/JjIB65CVXAo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Began studying for AZ-700 Designing and Implementing Microsoft Azure Networking Solutions</title>
      <link>https://mischavandenburg.com/zet/starting-az-700/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/starting-az-700/</guid>
      <description>Before I went on holiday I formed the intention to begin studying again after I came back.
During my current gig I&amp;rsquo;m configuring a fair bit of networking, VNets, peerings, firewall rules and set up a full hub-spoke network from scratch, so I&amp;rsquo;ve had a fair bit of practical experience. Now that the experience is still fresh in the mind I figured I&amp;rsquo;d go for this certification.
Usually I only use Microsoft Learn and practice exams, but this time around I want to try out a video course.</description>
      <content:encoded><![CDATA[<p>Before I went on holiday I formed the intention to begin studying again after I came back.</p>
<p>During my current gig I&rsquo;m configuring a fair bit of networking, VNets, peerings, firewall rules and set up a full hub-spoke network from scratch, so I&rsquo;ve had a fair bit of practical experience. Now that the experience is still fresh in the mind I figured I&rsquo;d go for this certification.</p>
<p>Usually I only use Microsoft Learn and practice exams, but this time around I want to try out a video course. I purchased a year of A Cloud Guru access and so far it has been a good experience.</p>
<p>I&rsquo;ll publish my notes as I go along.</p>
<h2 id="links">Links:</h2>
<p>202309280909</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>What is Azure CNI Overlay for AKS?</title>
      <link>https://mischavandenburg.com/zet/azure-aks-cni-overlay/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/azure-aks-cni-overlay/</guid>
      <description>CNI? CNI stands for Container Network Interface. It allows communication between pods and services.
Current Azure CNI limitations Let&amp;rsquo;s take a practical example. We have an enterprise environment where a large network is utilized, spanning multiple clouds and on-prem infrastructure hubs. To enable seamless communication across these sections, they must belong to the same network. As a result, specific IP address ranges are assigned to each section, with AWS, On-Prem A, and Azure each having their respective ranges.</description>
      <content:encoded><![CDATA[<h1 id="cni">CNI?</h1>
<p>CNI stands for Container Network Interface. It allows communication between pods and services.</p>
<h2 id="current-azure-cni-limitations">Current Azure CNI limitations</h2>
<p>Let&rsquo;s take a practical example. We have an enterprise environment where a large network is utilized, spanning multiple clouds and on-prem infrastructure hubs. To enable seamless communication across these sections, they must belong to the same network. As a result, specific IP address ranges are assigned to each section, with AWS, On-Prem A, and Azure each having their respective ranges.</p>
<p>Let&rsquo;s say Azure is assigned the following ranges:</p>
<p>10.60.0.0/16</p>
<p>10.61.0.0/16</p>
<p>10.62.0.0/16</p>
<p>This means that the networks in each of these ranges would have a maximum possible amount of 65534 addresses per range.</p>
<p>With the current Azure CNI (i.e. the non-overlay version), all pods are assigned an IP address from one of these ranges. It also uses direct VNet routing.  Since the pods use VNet IP&rsquo;s, there is a maximum of 65.000 pods per cluster. In other words, there is a risk for IP exhaustion, which limits the scalability of your workloads. Moreover, pod subnets cannot be shared across clusters.</p>
<p>It is crucial to carefully plan the number of pods you expect to deploy. If the required number of IP addresses exceeds the available addresses in the subnet, you will not be able to run your pods.</p>
<p>Now, these ranges are large and you can anticipate the growth of your resources. For now we are fine. But to design an infrastructure which is truly scalable and extendable, you will need to look into different options. This is where the Azure CNI Overlay comes in.</p>
<h2 id="benefits-of-azure-cni-overlay">Benefits of Azure CNI Overlay</h2>
<p>An Overlay network is an abstracted, virtual network which is put on top of your current network infrastructure. Nodes are assigned IP addresses from the VNets that they are deployed in, but pods get assigned IP addresses from the Overlay network.</p>
<p>Pods are assigned addresses from a private CIDR which is logically separate from the VNet hosting the nodes. They do not use up the IP addressess of the VNets, which means that your workloads become nearly infinitely scalable within your assigned IP address ranges when you are operating in this type of corporate networking infrastructure with IP range limitations. You can scale up to literally thousands of nodes without worrying about IP exhaustion.</p>
<p><img loading="lazy" src="/cnioverlay.png" type="" alt=""  /></p>
<p>Additionally, the Overlay network can also span across multiple AKS clusters. This opens up a whole world of possibilities where pods from separate workloads on separate clusters could communicate with each other directly using the high speed native direct routing of the Azure network.</p>
<h2 id="limitations">Limitations</h2>
<p>Azure CNI Overlay also comes with some limitations. A big one is that you cannot use Application Gateway as an Ingress Controller (AGIC) for an Overlay cluster.</p>
<p>Other notable limitations:</p>
<ul>
<li>Windows support is still in Preview</li>
<li>Virtual Machine Availability Sets (VMAS) are not supported for Overlay</li>
<li>Dualstack networking is not supported in Overlay</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, the Azure CNI Overlay provides a powerful solution to address the challenges of IP exhaustion and scalability in Azure AKS. By implementing the overlay network, organizations can overcome the limitations of the non-overlay version of Azure CNI and achieve a truly scalable and manageable infrastructure.</p>
<p>Azure CNI Overlay is currently in preview for Windows and GA for Linux nodes, but I&rsquo;m very excited about the developments. I&rsquo;ll be following them closely and I hope to be a part of its implementation at my current contract.</p>
<h1 id="links">Links:</h1>
<p><a href="https://learn.microsoft.com/en-us/azure/aks/azure-cni-overlay">https://learn.microsoft.com/en-us/azure/aks/azure-cni-overlay</a></p>
<p><a href="https://www.youtube.com/watch?v=kLBLaCC_dNs">https://www.youtube.com/watch?v=kLBLaCC_dNs</a></p>
<p><a href="https://azure.microsoft.com/en-us/updates/generally-available-azure-cni-overlay-for-linux/">https://azure.microsoft.com/en-us/updates/generally-available-azure-cni-overlay-for-linux/</a></p>
<p>202306131506</p>
<p>[[aks-networking-essentials]]</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
