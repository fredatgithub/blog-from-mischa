<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Storage on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/storage/</link>
    <description>Recent content in Storage on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 18 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/storage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PersistentVolumeClaims Lifecycle in Kubernetes</title>
      <link>https://mischavandenburg.com/zet/kubernetes-storage-pvc-pv/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/kubernetes-storage-pvc-pv/</guid>
      <description>&lt;p&gt;I always thought that Persistent Volume Claims where deleted when you delete the pod which they are associated with. I was wrong. The lifecycle of PVCs is independent of Pods, and their behavior is largely governed by the Reclaim Policy set on the PVs. Here&amp;rsquo;s what you need to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PVCs&lt;/strong&gt;: These are requests for storage, akin to how Pods request resources like CPU and memory. They exist independently and can be bound to Pods when needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PVs&lt;/strong&gt;: Provisioned by administrators or dynamically through Storage Classes, PVs provide the actual storage resources. Their lifecycle is not tied to any specific Pod.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;understanding-reclaim-policies&#34;&gt;Understanding Reclaim Policies&lt;/h1&gt;
&lt;p&gt;The Reclaim Policy on a PV dictates its fate after a PVC is released. There are three policies to be aware of:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I always thought that Persistent Volume Claims where deleted when you delete the pod which they are associated with. I was wrong. The lifecycle of PVCs is independent of Pods, and their behavior is largely governed by the Reclaim Policy set on the PVs. Here&rsquo;s what you need to know:</p>
<ul>
<li><strong>PVCs</strong>: These are requests for storage, akin to how Pods request resources like CPU and memory. They exist independently and can be bound to Pods when needed.</li>
<li><strong>PVs</strong>: Provisioned by administrators or dynamically through Storage Classes, PVs provide the actual storage resources. Their lifecycle is not tied to any specific Pod.</li>
</ul>
<h1 id="understanding-reclaim-policies">Understanding Reclaim Policies</h1>
<p>The Reclaim Policy on a PV dictates its fate after a PVC is released. There are three policies to be aware of:</p>
<ol>
<li><strong>Delete</strong>: The PV and its underlying storage are deleted when the PVC is deleted. Importantly, if the PVC is not deleted, the PV remains.</li>
<li><strong>Retain</strong>: When a PVC is deleted, the PV is not. Instead, it transitions to a <code>Released</code> state, but the data remains intact until manually deleted or repurposed.</li>
<li><strong>Recycle (Deprecated)</strong>: The volume is scrubbed clean and made available for a new claim. Note: this policy is no longer recommended.</li>
</ol>
<h1 id="practical-implications">Practical Implications</h1>
<ul>
<li>PVCs won&rsquo;t cause PV deletion unless they themselves are deleted. This is crucial to understand, especially with a <code>Delete</code> Reclaim Policy, as it leads to the deletion of both the PV and the underlying storage, resulting in data loss.</li>
<li>Carefully manage PVCs, especially in production environments. Ensure you have backups and fully understand the implications of deleting PVCs, especially when using a <code>Delete</code> Reclaim Policy.</li>
</ul>
<h2 id="links">Links:</h2>
<p>202401180901</p>
<p>[[Kubernetes]]</p>
<p>[[storage]]</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
