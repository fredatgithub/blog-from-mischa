<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Article on Mischa van den Burg</title>
    <link>https://mischavandenburg.com/tags/article/</link>
    <description>Recent content in Article on Mischa van den Burg</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 05 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mischavandenburg.com/tags/article/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lab VM project - Install ArgoCD to your Kubernetes cluster</title>
      <link>https://mischavandenburg.com/zet/articles/lab-vm-install-argocd/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/lab-vm-install-argocd/</guid>
      <description>This guide uses the official getting started guide with a few modifications. This installation is only for lab purposes. Running ArgoCD in a production environment requires more configuration.
Install argocd and argocd cli kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml My VM is running on arm architecture, so I need these commands to install the argocd cli on ubuntu.
curl -sSL -o argocd-linux-arm64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-arm64 sudo install -m 555 argocd-linux-arm64 /usr/local/bin/argocd rm argocd-linux-arm64 Change the service type to LoadBalancer</description>
      <content:encoded><![CDATA[<p>This guide uses the official getting started guide with a few modifications. This installation is only for lab purposes. Running ArgoCD in a production environment requires more configuration.</p>
<h2 id="install-argocd-and-argocd-cli">Install argocd and argocd cli</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create namespace argocd
</span></span><span class="line"><span class="cl">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
</span></span></code></pre></div><p>My VM is running on arm architecture, so I need these commands to install the argocd cli on ubuntu.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sSL -o argocd-linux-arm64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-arm64
</span></span><span class="line"><span class="cl">sudo install -m <span class="m">555</span> argocd-linux-arm64 /usr/local/bin/argocd
</span></span><span class="line"><span class="cl">rm argocd-linux-arm64
</span></span></code></pre></div><p>Change the service type to LoadBalancer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl patch svc argocd-server -n argocd -p <span class="s1">&#39;{&#34;spec&#34;: {&#34;type&#34;: &#34;LoadBalancer&#34;}}&#39;</span>
</span></span></code></pre></div><p>Retrieve your passsword</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl -n argocd get secret argocd-initial-admin-secret -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">&#34;{.data.password}&#34;</span> <span class="p">|</span> base64 -d<span class="p">;</span> <span class="nb">echo</span>
</span></span></code></pre></div><p>Find out which port argocd-server is running on</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">k get svc -A
</span></span></code></pre></div><p>Look for the argocd-server and see where port 80 is mapped to. In my case, it is 80:31372.</p>
<p>Open this port in your network security group for your VM, and you should be able to log in on ArgoCD in the browser by entering the VM ip followed by the port:</p>
<p><code>http://143.44.179.11:31372</code></p>
<h2 id="links">Links</h2>
<p><a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">https://argo-cd.readthedocs.io/en/stable/getting_started/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setting up a Kubernetes cluster on an Ubuntu 20.04 VM with containerd and flannel</title>
      <link>https://mischavandenburg.com/zet/articles/simple-cluster-on-ubuntu-vm/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/simple-cluster-on-ubuntu-vm/</guid>
      <description>You can get a free 24GB ram VM from Oracle. What better place for your own Kubernetes lab that is always available? See this article to create your VM.
Here are the steps I took to install a single node kubernetes cluster on the Ubuntu VM.
Installation sudo apt-get update sudo apt install apt-transport-https curl Install containerd
sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.</description>
      <content:encoded><![CDATA[<p>You can get a free 24GB ram VM from Oracle. What better place for your own Kubernetes lab that is always available? See <a href="/zet/free-oracle-vm.md">this article</a> to create your VM.</p>
<p>Here are the steps I took to install a single node kubernetes cluster on the Ubuntu VM.</p>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt install apt-transport-https curl
</span></span></code></pre></div><p>Install containerd</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mkdir -p /etc/apt/keyrings
</span></span><span class="line"><span class="cl">curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install containerd.io
</span></span></code></pre></div><p>Remove the default containerd configuration, because it creates errors when running kubeadm init.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo rm -f /etc/containerd/config.toml
</span></span><span class="line"><span class="cl">sudo systemctl status containerd.service
</span></span></code></pre></div><p>Install Kubernetes</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/kubernetes.list
</span></span><span class="line"><span class="cl">sudo apt install kubeadm kubelet kubectl kubernetes-cni
</span></span></code></pre></div><p>Avoid the error &ldquo;/proc/sys/net/bridge/bridge-nf-call-iptables does not exist&rdquo; on kubeinit (reference <a href="https://github.com/kubernetes/kubeadm/issues/1062)">https://github.com/kubernetes/kubeadm/issues/1062)</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo modprobe br_netfilter
</span></span><span class="line"><span class="cl">sudo <span class="nb">echo</span> <span class="m">1</span> &gt; /proc/sys/net/ipv4/ip_forward
</span></span></code></pre></div><h2 id="start-the-cluster">Start the cluster</h2>
<p>Initialize the Kubernetes cluster for use with Flannel</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo kubeadm init --pod-network-cidr<span class="o">=</span>10.244.0.0/16
</span></span></code></pre></div><p>Copy to config as kubadm command says</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span></code></pre></div><p>Usually you wouldn&rsquo;t run pods on your control-plane node. However, since we are running a lab environment on a single VM, it&rsquo;s ok. To be able to schedule pods on the control-plane node, we need to remove the NoSchedule taint:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl taint node instance-20230205-0909 node-role.kubernetes.io/control-plane:NoSchedule-
</span></span></code></pre></div><h2 id="add-a-container-networking-interface">Add a Container Networking Interface</h2>
<p>Install Flannel to the cluster (reference <a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
</span></span></code></pre></div><h2 id="configure-the-server-firewall">Configure the server firewall</h2>
<p>We use Uncomplicated Firewall. Run these commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo ufw allow <span class="m">22</span>
</span></span><span class="line"><span class="cl">sudo ufw allow 6443/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 2379:2380/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 10250/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 10259/tcp
</span></span><span class="line"><span class="cl">sudo ufw allow 10257/tcp
</span></span><span class="line"><span class="cl">sudo ufw <span class="nb">enable</span>
</span></span><span class="line"><span class="cl">sudo ufw status
</span></span></code></pre></div><h2 id="set-up-bashrc">Set up bashrc</h2>
<p>Next, edit your bashrc with <code>vim ~/.bashrc</code> and add these lines:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> &lt;<span class="o">(</span>kubectl completion bash<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">k</span><span class="o">=</span>kubectl
</span></span><span class="line"><span class="cl"><span class="nb">complete</span> -o default -F __start_kubectl k
</span></span></code></pre></div><p>Then run <code>source ~/.bashrc</code></p>
<p>This configures autocompletion for kubectl, and sets up &ldquo;k&rdquo; as an alias for kubectl.</p>
<h2 id="lets-run-a-pod">Let&rsquo;s run a pod!</h2>
<p>To see all pods running on your cluster:</p>
<p><code>k get pods -A</code></p>
<p>Now let&rsquo;s run a simple nginx pod and expose it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">k run nginx --image<span class="o">=</span>nginx
</span></span><span class="line"><span class="cl">k expose pod nginx --port<span class="o">=</span><span class="m">80</span> --type<span class="o">=</span>NodePort
</span></span></code></pre></div><p>To find out which port it&rsquo;s running on, run <code>k get service</code>. In the PORT(S) column, there will be an nginx service exposing port 80 to a random port on the node in the range of 30000-32767.</p>
<p>In my case, it says &ldquo;80:31878/TCP&rdquo;</p>
<p>To see if we can reach the container, run:</p>
<p><code>curl localhost:31878</code></p>
<p>If everything went well, you will get back the HTML of the default index page served by NGINX:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ubuntu@instance-20230205-0909:~$ curl localhost:31878
</span></span><span class="line"><span class="cl">&lt;!DOCTYPE html&gt;
</span></span><span class="line"><span class="cl">&lt;html&gt;
</span></span><span class="line"><span class="cl">&lt;head&gt;
</span></span><span class="line"><span class="cl">&lt;title&gt;Welcome to nginx!&lt;/title&gt;
</span></span><span class="line"><span class="cl">&lt;style&gt;
</span></span><span class="line"><span class="cl">html <span class="o">{</span> color-scheme: light dark<span class="p">;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">body <span class="o">{</span> width: 35em<span class="p">;</span> margin: <span class="m">0</span> auto<span class="p">;</span>
</span></span><span class="line"><span class="cl">font-family: Tahoma, Verdana, Arial, sans-serif<span class="p">;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">&lt;/style&gt;
</span></span><span class="line"><span class="cl">&lt;/head&gt;
</span></span><span class="line"><span class="cl">&lt;body&gt;
</span></span><span class="line"><span class="cl">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;
</span></span><span class="line"><span class="cl">&lt;p&gt;If you see this page, the nginx web server is successfully installed and
</span></span><span class="line"><span class="cl">working. Further configuration is required.&lt;/p&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;p&gt;For online documentation and support please refer to
</span></span><span class="line"><span class="cl">&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;http://nginx.org/&#34;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;
</span></span><span class="line"><span class="cl">Commercial support is available at
</span></span><span class="line"><span class="cl">&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;http://nginx.com/&#34;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;p&gt;&lt;em&gt;Thank you <span class="k">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;
</span></span><span class="line"><span class="cl">&lt;/body&gt;
</span></span><span class="line"><span class="cl">&lt;/html&gt;
</span></span></code></pre></div><p>To reach the pod from the browser, open your port in the security group configured for the subnet of your VM.</p>
<p>Good luck with your new lab environment!</p>
<h2 id="links">Links</h2>
<p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/service/">https://kubernetes.io/docs/concepts/services-networking/service/</a></p>
<p><a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setting up a new LUKS encrypted disk with dm-crypt in Arch Linux</title>
      <link>https://mischavandenburg.com/zet/articles/new-luks-encrypted-disk/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mischavandenburg.com/zet/articles/new-luks-encrypted-disk/</guid>
      <description>Today I added a harddisk I had lying around because I needed some more space. On my Arch Linux system I have all my drives encrypted like a good boy. It can be a bit tricky when you are adding them because you need to configure a few different files and add different UUID&amp;rsquo;s in each of them.
Here are the steps I follow to add a new disk. Note that this how to assumes that you already have set up your system with dm-crypt.</description>
      <content:encoded><![CDATA[<p>Today I added a harddisk I had lying around because I needed some more space. On my Arch Linux system I have all my drives encrypted like a good boy. It can be a bit tricky when you are adding them because you need to configure a few different files and add different UUID&rsquo;s in each of them.</p>
<p>Here are the steps I follow to add a new disk. Note that this how to assumes that you already have set up your system with dm-crypt.</p>
<p>List out the disks with lsblk:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)[</span>mischa@arch-beast ~<span class="o">]</span>$ lsblk
</span></span><span class="line"><span class="cl">NAME          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
</span></span><span class="line"><span class="cl">sda             8:0    <span class="m">0</span> 223.6G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sda1          8:1    <span class="m">0</span> 223.6G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─games     254:0    <span class="m">0</span> 223.6G  <span class="m">0</span> crypt /games
</span></span><span class="line"><span class="cl">sdb             8:16   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdb1          8:17   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd  254:2    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd
</span></span><span class="line"><span class="cl">sdc             8:32   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdc1          8:33   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd2 254:3    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd2
</span></span><span class="line"><span class="cl">sdd             8:48   <span class="m">0</span> 465.8G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">├─sdd1          8:49   <span class="m">0</span>   300M  <span class="m">0</span> part  /boot
</span></span><span class="line"><span class="cl">└─sdd2          8:50   <span class="m">0</span> 465.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─root      254:1    <span class="m">0</span> 465.5G  <span class="m">0</span> crypt /
</span></span><span class="line"><span class="cl">sde             8:64   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sde1          8:65   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span></code></pre></div><p>I will be adding /dev/sde to my system. As you see, I already created a partition on it, named <code>sde1</code>. The mountpoint for the disk will be <code>/data-hdd3</code>.</p>
<p>If you still need to add your partition, use <code>sudo gdisk /dev/sde</code> to write a new table and partition.</p>
<h2 id="encryption">encryption</h2>
<p>First I create the mount point I&rsquo;ll use and set the appropriate permisssions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mkdir /data-hdd3
</span></span><span class="line"><span class="cl">sudo chown mischa:mischa /data-hdd3
</span></span></code></pre></div><p>Now we create a LUKS header and an encrypted filesystem on the disk.
Note that I&rsquo;m using the notation convention from the Arch Wiki where the &ldquo;#&rdquo; indicates that the command should be run as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># cryptsetup -y -v luksFormat /dev/sde1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># cryptsetup open /dev/sde1 data-hdd3 </span>
</span></span><span class="line"><span class="cl"><span class="c1"># mkfs.ext4 /dev/mapper/data-hdd3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># mount /dev/mapper/data-hdd3 /data-hdd3</span>
</span></span></code></pre></div><p>Verify that it worked and the new encrypted partition is mounted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arch-beast# lsblk
</span></span><span class="line"><span class="cl">NAME          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
</span></span><span class="line"><span class="cl">sda             8:0    <span class="m">0</span> 223.6G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sda1          8:1    <span class="m">0</span> 223.6G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─games     254:0    <span class="m">0</span> 223.6G  <span class="m">0</span> crypt /games
</span></span><span class="line"><span class="cl">sdb             8:16   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdb1          8:17   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd  254:2    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd
</span></span><span class="line"><span class="cl">sdc             8:32   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdc1          8:33   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd2 254:3    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd2
</span></span><span class="line"><span class="cl">sdd             8:48   <span class="m">0</span> 465.8G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">├─sdd1          8:49   <span class="m">0</span>   300M  <span class="m">0</span> part  /boot
</span></span><span class="line"><span class="cl">└─sdd2          8:50   <span class="m">0</span> 465.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─root      254:1    <span class="m">0</span> 465.5G  <span class="m">0</span> crypt /
</span></span><span class="line"><span class="cl">sde             8:64   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sde1          8:65   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd3 254:4    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd3
</span></span></code></pre></div><h2 id="auto-mounting-at-boot">Auto mounting at boot</h2>
<p>We&rsquo;ll need to add this disk to the kerenel parameters, /etc/crypttab and /etc/fstab. I haven&rsquo;t gotten round to switching to systemd boot yet, but I will do so very soon.</p>
<p>Open tmux and split the pane. In the bottom pane, run <code>lsblk -f</code> to have all the UUIDs listed. Then open the grub configuration file with <code>sudoedit /etc/default/grub</code></p>
<p><img loading="lazy" src="/luks1.png" type="" alt=""  /></p>
<p>You can discern which uuid to add from the listed examples. For my new disk, I needed to add the following:</p>
<p><code>rd.luks.name=3169af6c-a129-448e-b451-d7767866f607 data-hdd3=/dev/mapper/data-hdd3</code></p>
<p>Then run <code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code> to update grub with the new settings. Adjust the path if you use a different path for your boot partition!</p>
<p>Next, we add it to /etc/crypttab</p>
<p><img loading="lazy" src="/luks2.png" type="" alt=""  /></p>
<p>To mount the new encrypted partition at boot, we add it to /etc/fstab.</p>
<p><strong>Note that this time we need to use the UUID of the partition located at /dev/mapper/data-hdd3</strong></p>
<p><img loading="lazy" src="/luks3.png" type="" alt=""  /></p>
<p>Use <code>sudo findmnt --verify</code> to check if there is antyhing wrong with the file.</p>
<p>Now you should be able to reboot and your new encrypted disk should be mounted automatically.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>ins<span class="o">)[</span>mischa@arch-beast ~<span class="o">]</span>$ lsblk
</span></span><span class="line"><span class="cl">NAME          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
</span></span><span class="line"><span class="cl">sda             8:0    <span class="m">0</span> 223.6G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sda1          8:1    <span class="m">0</span> 223.6G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─games     254:1    <span class="m">0</span> 223.6G  <span class="m">0</span> crypt /games
</span></span><span class="line"><span class="cl">sdb             8:16   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdb1          8:17   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd  254:0    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd
</span></span><span class="line"><span class="cl">sdc             8:32   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sdc1          8:33   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd2 254:4    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd2
</span></span><span class="line"><span class="cl">sdd             8:48   <span class="m">0</span> 465.8G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">├─sdd1          8:49   <span class="m">0</span>   300M  <span class="m">0</span> part  /boot
</span></span><span class="line"><span class="cl">└─sdd2          8:50   <span class="m">0</span> 465.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─root      254:2    <span class="m">0</span> 465.5G  <span class="m">0</span> crypt /
</span></span><span class="line"><span class="cl">sde             8:64   <span class="m">0</span> 931.5G  <span class="m">0</span> disk
</span></span><span class="line"><span class="cl">└─sde1          8:65   <span class="m">0</span> 931.5G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">  └─data-hdd3 254:3    <span class="m">0</span> 931.5G  <span class="m">0</span> crypt /data-hdd3
</span></span></code></pre></div><h1 id="links">links</h1>
<p><a href="https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition">https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition</a></p>
<p><a href="https://wiki.archlinux.org/title/GRUB">https://wiki.archlinux.org/title/GRUB</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
